#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RuntimeGameplayStatics

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Runtime_structs.hpp"
#include "EnumPredictionMarkerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RuntimeGameplayStatics.BP_RuntimeGameplayStatics_C
// 0x0000 (0x0028 - 0x0028)
class UBP_RuntimeGameplayStatics_C final : public UBlueprintFunctionLibrary
{
public:
	static struct FGameplayAbilityTargetDataHandle AppendHitPrediction(class AActor* InActor, const struct FGameplayAbilityTargetDataHandle& InTargetData, double InPredictionMaxDuration, class UObject* __WorldContext);
	static void ApplyTeamMPCColors(class UObject* __WorldContext);
	static bool AreCharactersInSameTeam(class APawn* A, class APawn* B, class UObject* __WorldContext);
	static bool AreCharactersInSameTeam_FromPlayerState(class APlayerState* PalyerStateA, class APlayerState* PlayerStateB, class UObject* __WorldContext);
	static bool CheckIfTheShootIsAimed(TArray<class UBoxComponent*>& GoalCollisions, class ABall* Ball, bool IsAimed, class UObject* __WorldContext);
	static void Compute_Prediction_Marker_Location(const struct FGameplayTagContainer& ShootTypeTagContainer, const struct FBallTrajectoryResult& ShootTrajectory, bool StopAtFirstBounce, TArray<struct FPredictionMarkerData>& PredictionMarkerData, class UObject* __WorldContext, bool* Succeeded);
	static void GetAllActorsOfClassWithContext(class AActor* InContextActor, TSubclassOf<class AActor> InActorClass, class UObject* __WorldContext, TArray<class AActor*>* OutActors);
	static double GetCurrentOvertimeTime(class ARuntimeMatchGameState* InGameState, class UObject* __WorldContext);
	static class ABall* GetNearestBall(class AActor* InRefActor, bool bShouldBeOnScreen, class UObject* __WorldContext, EnumPredictionMarkerType* MarkerType);
	static void GetVFXColorsFromTeamColorList(const struct FLinearColor& Color, class UObject* __WorldContext, struct FLinearColor* VFXColorDark, struct FLinearColor* VFXColorBright, struct FLinearColor* VisualRemap);
	static bool HasAnyEmptyTeam(class UObject* __WorldContext);
	static void IsBallCall(class UPingDataAsset* InPingDataAsset, class UObject* __WorldContext, bool* OutReturnValue);
	static void PlayDynamicForceFeedback(class AActor* My_target, double FeedbackIntensity, double FeedbackDuration, class UObject* __WorldContext);
	static void SnapBallToPlayerFeet(class ARuntimeCharacter* Character, class ABall* Ball, class UObject* __WorldContext);

	bool IsActorMoving(double MinSpeedThresholdToBeMoving, class AActor* Actor, bool CheckOnlyHorizontally, class UObject* __WorldContext);
	double SmoothStep(double A, double B, double X, class UObject* __WorldContext);

	void CheckPlayersRelationType(class ARuntimePlayerState* _player1, class ARuntimePlayerState* _player2, ERelationshipType _eRelationType, class UObject* __WorldContext, bool* isCandidate) const;
	uint8 GetOtherTeamIndex(class ARuntimeGameState* _gameState, uint8 _uiTeam, class UObject* __WorldContext) const;
	void Is_Ball_Aimed_In_Goal_Collision(class ABall* Ball, const class UBoxComponent* GoalCollision, bool CheckAllTrajectoryPoints, class UObject* __WorldContext, bool* bIsAimed, struct FPredictProjectilePathPointData* PointDetectedInGoalCollision) const;
	void IsShootBlind(const struct FShootParams& ShootParams, class UObject* __WorldContext, bool* IsShootBlind_0) const;

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_RuntimeGameplayStatics_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_RuntimeGameplayStatics_C")
	}
	static class UBP_RuntimeGameplayStatics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_RuntimeGameplayStatics_C>();
	}
};
DUMPER7_ASSERTS_UBP_RuntimeGameplayStatics_C;

}

