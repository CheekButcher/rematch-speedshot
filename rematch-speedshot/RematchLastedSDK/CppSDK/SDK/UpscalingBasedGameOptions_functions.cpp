#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UpscalingBasedGameOptions

#include "Basic.hpp"

#include "UpscalingBasedGameOptions_classes.hpp"
#include "UpscalingBasedGameOptions_parameters.hpp"


namespace SDK
{

// Function UpscalingBasedGameOptions.DLSSSuperResolutionQualityMode.GetAvailableDLSSModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<EOrderedDLSSMode>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<EOrderedDLSSMode> UDLSSSuperResolutionQualityMode::GetAvailableDLSSModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DLSSSuperResolutionQualityMode", "GetAvailableDLSSModes");

	Params::DLSSSuperResolutionQualityMode_GetAvailableDLSSModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UpscalingBasedGameOptions.UpscalerFeaturesBlueprintLibrary.CheckUpscalingFeatureAvailability
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   UpscalingFeaturesBitFlag                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNeedsTechnoEnabled                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUpscalerFeaturesBlueprintLibrary::CheckUpscalingFeatureAvailability(int32 UpscalingFeaturesBitFlag, bool bNeedsTechnoEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpscalerFeaturesBlueprintLibrary", "CheckUpscalingFeatureAvailability");

	Params::UpscalerFeaturesBlueprintLibrary_CheckUpscalingFeatureAvailability Parms{};

	Parms.UpscalingFeaturesBitFlag = UpscalingFeaturesBitFlag;
	Parms.bNeedsTechnoEnabled = bNeedsTechnoEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UpscalingBasedGameOptions.UpscalerFeaturesBlueprintLibrary.GetCurrentUpscalingMethod
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EUpscaler                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUpscaler UUpscalerFeaturesBlueprintLibrary::GetCurrentUpscalingMethod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpscalerFeaturesBlueprintLibrary", "GetCurrentUpscalingMethod");

	Params::UpscalerFeaturesBlueprintLibrary_GetCurrentUpscalingMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UpscalingBasedGameOptions.UpscalerFeaturesBlueprintLibrary.IsThirdPartyUpscalerSelected
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUpscalerFeaturesBlueprintLibrary::IsThirdPartyUpscalerSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpscalerFeaturesBlueprintLibrary", "IsThirdPartyUpscalerSelected");

	Params::UpscalerFeaturesBlueprintLibrary_IsThirdPartyUpscalerSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UpscalingBasedGameOptions.UpscalingMethodOption.GetAvailableUpscalers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<EUpscaler>                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<EUpscaler> UUpscalingMethodOption::GetAvailableUpscalers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpscalingMethodOption", "GetAvailableUpscalers");

	Params::UpscalingMethodOption_GetAvailableUpscalers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

