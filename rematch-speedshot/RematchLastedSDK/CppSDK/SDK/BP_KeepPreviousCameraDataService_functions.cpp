#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KeepPreviousCameraDataService

#include "Basic.hpp"

#include "BP_KeepPreviousCameraDataService_classes.hpp"
#include "BP_KeepPreviousCameraDataService_parameters.hpp"


namespace SDK
{

// Function BP_KeepPreviousCameraDataService.BP_KeepPreviousCameraDataService_C.BPE_OnUpdate
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_KeepPreviousCameraDataService_C::BPE_OnUpdate(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KeepPreviousCameraDataService_C", "BPE_OnUpdate");

	Params::BP_KeepPreviousCameraDataService_C_BPE_OnUpdate Parms{};

	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KeepPreviousCameraDataService.BP_KeepPreviousCameraDataService_C.UpdateVelocityOffsetRatio
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_KeepPreviousCameraDataService_C::UpdateVelocityOffsetRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KeepPreviousCameraDataService_C", "UpdateVelocityOffsetRatio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KeepPreviousCameraDataService.BP_KeepPreviousCameraDataService_C.BPE_CheckConditionWantsToRun
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_KeepPreviousCameraDataService_C::BPE_CheckConditionWantsToRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KeepPreviousCameraDataService_C", "BPE_CheckConditionWantsToRun");

	Params::BP_KeepPreviousCameraDataService_C_BPE_CheckConditionWantsToRun Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

