#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputAction_Data

#include "Basic.hpp"

#include "BP_InputAction_Data_classes.hpp"
#include "BP_InputAction_Data_parameters.hpp"


namespace SDK
{

// Function BP_InputAction_Data.BP_InputAction_Data_C.BPE_OnDataUpdated
// (Event, Protected, BlueprintEvent)

void UBP_InputAction_Data_C::BPE_OnDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "BPE_OnDataUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.BPE_OnUIInputModeChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EUIInputModes                           _eMode                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    _bInit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::BPE_OnUIInputModeChanged(EUIInputModes _eMode, bool _bInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "BPE_OnUIInputModeChanged");

	Params::BP_InputAction_Data_C_BPE_OnUIInputModeChanged Parms{};

	Parms._eMode = _eMode;
	Parms._bInit = _bInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.BPE_SetInputAction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USCInputAction*                   _eAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          _owner                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FControllerIconStyle&      _eIconStyle                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// EControllerIconAxisTypes                _eAxisType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSCUserDefinedEnumHandler& _drawingStyle                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_InputAction_Data_C::BPE_SetInputAction(class USCInputAction* _eAction, class UWidget* _owner, const struct FControllerIconStyle& _eIconStyle, EControllerIconAxisTypes _eAxisType, const struct FSCUserDefinedEnumHandler& _drawingStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "BPE_SetInputAction");

	Params::BP_InputAction_Data_C_BPE_SetInputAction Parms{};

	Parms._eAction = _eAction;
	Parms._owner = _owner;
	Parms._eIconStyle = std::move(_eIconStyle);
	Parms._eAxisType = _eAxisType;
	Parms._drawingStyle = std::move(_drawingStyle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_InputAction_Data_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.ControllerTypeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bGamepad                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::ControllerTypeChanged(bool bGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "ControllerTypeChanged");

	Params::BP_InputAction_Data_C_ControllerTypeChanged Parms{};

	Parms.bGamepad = bGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.ExecuteUbergraph_BP_InputAction_Data
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::ExecuteUbergraph_BP_InputAction_Data(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "ExecuteUbergraph_BP_InputAction_Data");

	Params::BP_InputAction_Data_C_ExecuteUbergraph_BP_InputAction_Data Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.InputMappingChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputMappingProfileData&  mappingProfileData                                     (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UBP_InputAction_Data_C::InputMappingChanged(const struct FInputMappingProfileData& mappingProfileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "InputMappingChanged");

	Params::BP_InputAction_Data_C_InputMappingChanged Parms{};

	Parms.mappingProfileData = std::move(mappingProfileData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.IsFirstKeyValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   FirstKeyValid                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::IsFirstKeyValid(bool* FirstKeyValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "IsFirstKeyValid");

	Params::BP_InputAction_Data_C_IsFirstKeyValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstKeyValid != nullptr)
		*FirstKeyValid = Parms.FirstKeyValid;
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.OverrideWithKeys
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInOverrideKeys                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FKey>&                    InOverridingKeys                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_InputAction_Data_C::OverrideWithKeys(bool bInOverrideKeys, TArray<struct FKey>& InOverridingKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "OverrideWithKeys");

	Params::BP_InputAction_Data_C_OverrideWithKeys Parms{};

	Parms.bInOverrideKeys = bInOverrideKeys;
	Parms.InOverridingKeys = std::move(InOverridingKeys);

	UObject::ProcessEvent(Func, &Parms);

	InOverridingKeys = std::move(Parms.InOverridingKeys);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "PreConstruct");

	Params::BP_InputAction_Data_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.RemappingDataChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputMappingProfileData&  mappingProfileData                                     (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UBP_InputAction_Data_C::RemappingDataChanged(const struct FInputMappingProfileData& mappingProfileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "RemappingDataChanged");

	Params::BP_InputAction_Data_C_RemappingDataChanged Parms{};

	Parms.mappingProfileData = std::move(mappingProfileData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetAxisType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerIconAxisTypes                AxisType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::SetAxisType(EControllerIconAxisTypes AxisType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetAxisType");

	Params::BP_InputAction_Data_C_SetAxisType Parms{};

	Parms.AxisType = AxisType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetBlack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Black                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::SetBlack(bool Black)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetBlack");

	Params::BP_InputAction_Data_C_SetBlack Parms{};

	Parms.Black = Black;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetHoldVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputAction_Data_C::SetHoldVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetHoldVisibility");

	Params::BP_InputAction_Data_C_SetHoldVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetIconStyle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FControllerIconStyle&            IconStyle                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_InputAction_Data_C::SetIconStyle(struct FControllerIconStyle& IconStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetIconStyle");

	Params::BP_InputAction_Data_C_SetIconStyle Parms{};

	Parms.IconStyle = std::move(IconStyle);

	UObject::ProcessEvent(Func, &Parms);

	IconStyle = std::move(Parms.IconStyle);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetInputsMappingID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMappingID&                _mappingID                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_InputAction_Data_C::SetInputsMappingID(const struct FMappingID& _mappingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetInputsMappingID");

	Params::BP_InputAction_Data_C_SetInputsMappingID Parms{};

	Parms._mappingID = std::move(_mappingID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.SetMappingID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMappingID&                MappingID_0                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_InputAction_Data_C::SetMappingID(const struct FMappingID& MappingID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "SetMappingID");

	Params::BP_InputAction_Data_C_SetMappingID Parms{};

	Parms.MappingID_0 = std::move(MappingID_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.UpdateChildInputs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_InputAction_Data_C::UpdateChildInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "UpdateChildInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.UpdateMappingData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputMappingProfileData&  mappingProfileData                                     (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UBP_InputAction_Data_C::UpdateMappingData(const struct FInputMappingProfileData& mappingProfileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "UpdateMappingData");

	Params::BP_InputAction_Data_C_UpdateMappingData Parms{};

	Parms.mappingProfileData = std::move(mappingProfileData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.UpdateSeparator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_InputActionKey_Data_C*        InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UTextBlock*                       Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_InputAction_Data_C::UpdateSeparator(class UBP_InputActionKey_Data_C* InputPin, class UTextBlock* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "UpdateSeparator");

	Params::BP_InputAction_Data_C_UpdateSeparator Parms{};

	Parms.InputPin = InputPin;
	Parms.Text = Text;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputAction_Data.BP_InputAction_Data_C.UpdateSeparators
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InputAction_Data_C::UpdateSeparators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputAction_Data_C", "UpdateSeparators");

	UObject::ProcessEvent(Func, nullptr);
}

}

