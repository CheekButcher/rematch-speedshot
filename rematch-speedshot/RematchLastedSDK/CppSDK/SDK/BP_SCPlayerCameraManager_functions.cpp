#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SCPlayerCameraManager

#include "Basic.hpp"

#include "BP_SCPlayerCameraManager_classes.hpp"
#include "BP_SCPlayerCameraManager_parameters.hpp"


namespace SDK
{

// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.AsyncTraceOver
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FSCTraceResult>&    _results                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_SCPlayerCameraManager_C::AsyncTraceOver(const TArray<struct FSCTraceResult>& _results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "AsyncTraceOver");

	Params::BP_SCPlayerCameraManager_C_AsyncTraceOver Parms{};

	Parms._results = std::move(_results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.CheckAngle
// (BlueprintCallable, BlueprintEvent)

void ABP_SCPlayerCameraManager_C::CheckAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "CheckAngle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ComputeTraceResults
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FSCTraceResult>&    _results                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool*                                   CrowdIsVisibleAndNotPlaying                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CrowdIsNotVisibleButPlaying                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::ComputeTraceResults(const TArray<struct FSCTraceResult>& _results, bool* CrowdIsVisibleAndNotPlaying, bool* CrowdIsNotVisibleButPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ComputeTraceResults");

	Params::BP_SCPlayerCameraManager_C_ComputeTraceResults Parms{};

	Parms._results = std::move(_results);

	UObject::ProcessEvent(Func, &Parms);

	if (CrowdIsVisibleAndNotPlaying != nullptr)
		*CrowdIsVisibleAndNotPlaying = Parms.CrowdIsVisibleAndNotPlaying;

	if (CrowdIsNotVisibleButPlaying != nullptr)
		*CrowdIsNotVisibleButPlaying = Parms.CrowdIsNotVisibleButPlaying;
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ComputeTraceSetup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SCPlayerCameraManager_C::ComputeTraceSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ComputeTraceSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ExecuteUbergraph_BP_SCPlayerCameraManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::ExecuteUbergraph_BP_SCPlayerCameraManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ExecuteUbergraph_BP_SCPlayerCameraManager");

	Params::BP_SCPlayerCameraManager_C_ExecuteUbergraph_BP_SCPlayerCameraManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.IsNotInCineCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsNotCineCamera                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::IsNotInCineCam(bool* IsNotCineCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "IsNotInCineCam");

	Params::BP_SCPlayerCameraManager_C_IsNotInCineCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotCineCamera != nullptr)
		*IsNotCineCamera = Parms.IsNotCineCamera;
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.LaunchAsyncTrace
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FSCTraceSetup>&     TraceArray                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SCPlayerCameraManager_C::LaunchAsyncTrace(const TArray<struct FSCTraceSetup>& TraceArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "LaunchAsyncTrace");

	Params::BP_SCPlayerCameraManager_C_LaunchAsyncTrace Parms{};

	Parms.TraceArray = std::move(TraceArray);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ReceiveActorBeginOverlap");

	Params::BP_SCPlayerCameraManager_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ReceiveActorEndOverlap");

	Params::BP_SCPlayerCameraManager_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SCPlayerCameraManager.BP_SCPlayerCameraManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SCPlayerCameraManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SCPlayerCameraManager_C", "ReceiveEndPlay");

	Params::BP_SCPlayerCameraManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}

}

