#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MVVM_TestViewModel

#include "Basic.hpp"

#include "BP_MVVM_TestViewModel_classes.hpp"
#include "BP_MVVM_TestViewModel_parameters.hpp"


namespace SDK
{

// Function BP_MVVM_TestViewModel.BP_MVVM_TestViewModel_C.Get Bool A B C
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MVVM_TestViewModel_C::Get_Bool_A_B_C(int32 Index_0, int32 Offset, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MVVM_TestViewModel_C", "Get Bool A B C");

	Params::BP_MVVM_TestViewModel_C_Get_Bool_A_B_C Parms{};

	Parms.Index_0 = Index_0;
	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_MVVM_TestViewModel.BP_MVVM_TestViewModel_C.Get Child At
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   idx                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTestViewModelChild**             Child_0                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MVVM_TestViewModel_C::Get_Child_At(int32 idx, class UTestViewModelChild** Child_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MVVM_TestViewModel_C", "Get Child At");

	Params::BP_MVVM_TestViewModel_C_Get_Child_At Parms{};

	Parms.idx = idx;

	UObject::ProcessEvent(Func, &Parms);

	if (Child_0 != nullptr)
		*Child_0 = Parms.Child_0;
}


// Function BP_MVVM_TestViewModel.BP_MVVM_TestViewModel_C.GetChildFirstName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString*                          Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_MVVM_TestViewModel_C::GetChildFirstName(class FString* Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MVVM_TestViewModel_C", "GetChildFirstName");

	Params::BP_MVVM_TestViewModel_C_GetChildFirstName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function BP_MVVM_TestViewModel.BP_MVVM_TestViewModel_C.Is A Or B
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   A_or_B                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MVVM_TestViewModel_C::Is_A_Or_B(bool* A_or_B) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MVVM_TestViewModel_C", "Is A Or B");

	Params::BP_MVVM_TestViewModel_C_Is_A_Or_B Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (A_or_B != nullptr)
		*A_or_B = Parms.A_or_B;
}

}

