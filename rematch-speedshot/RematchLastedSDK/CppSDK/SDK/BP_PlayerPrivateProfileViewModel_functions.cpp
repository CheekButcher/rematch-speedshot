#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPrivateProfileViewModel

#include "Basic.hpp"

#include "BP_PlayerPrivateProfileViewModel_classes.hpp"
#include "BP_PlayerPrivateProfileViewModel_parameters.hpp"


namespace SDK
{

// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.Get CurrentLvlXP FloatProgressBar
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_PlayerPrivateProfileViewModel_C::Get_CurrentLvlXP_FloatProgressBar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "Get CurrentLvlXP FloatProgressBar");

	Params::BP_PlayerPrivateProfileViewModel_C_Get_CurrentLvlXP_FloatProgressBar Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.Get Next Level
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerPrivateProfileViewModel_C::Get_Next_Level() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "Get Next Level");

	Params::BP_PlayerPrivateProfileViewModel_C_Get_Next_Level Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.Get Placement Match Status
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   IsPlacementMatchCompleted                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::Get_Placement_Match_Status(int32 Index_0, const class FString& GameMode, bool* IsPlacementMatchCompleted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "Get Placement Match Status");

	Params::BP_PlayerPrivateProfileViewModel_C_Get_Placement_Match_Status Parms{};

	Parms.Index_0 = Index_0;
	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlacementMatchCompleted != nullptr)
		*IsPlacementMatchCompleted = Parms.IsPlacementMatchCompleted;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetCurrentDivision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Division                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetCurrentDivision(const class FString& GameMode, int32* Division) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetCurrentDivision");

	Params::BP_PlayerPrivateProfileViewModel_C_GetCurrentDivision Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Division != nullptr)
		*Division = Parms.Division;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetCurrentLeague
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  League                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetCurrentLeague(const class FString& GameMode, int32* League) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetCurrentLeague");

	Params::BP_PlayerPrivateProfileViewModel_C_GetCurrentLeague Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (League != nullptr)
		*League = Parms.League;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetCurrentRankUIData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FUIRankedLeagues*                LeagueUIData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetCurrentRankUIData(const class FString& GameMode, struct FUIRankedLeagues* LeagueUIData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetCurrentRankUIData");

	Params::BP_PlayerPrivateProfileViewModel_C_GetCurrentRankUIData Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (LeagueUIData != nullptr)
		*LeagueUIData = std::move(Parms.LeagueUIData);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetCurrentSeasonRankPoints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Current_Season_Rank_Point                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetCurrentSeasonRankPoints(const class FString& GameMode, int32* Current_Season_Rank_Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetCurrentSeasonRankPoints");

	Params::BP_PlayerPrivateProfileViewModel_C_GetCurrentSeasonRankPoints Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Season_Rank_Point != nullptr)
		*Current_Season_Rank_Point = Parms.Current_Season_Rank_Point;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetHighestRankGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESOSGameType*                           GameMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetHighestRankGameMode(ESOSGameType* GameMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetHighestRankGameMode");

	Params::BP_PlayerPrivateProfileViewModel_C_GetHighestRankGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = Parms.GameMode;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastMatchColorAtIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLastMatchColorAtIndex(int32 Index_0, struct FLinearColor* Color) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastMatchColorAtIndex");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastMatchColorAtIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastMatchesCountAsText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Matches                                                (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetLastMatchesCountAsText(class FText* Matches) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastMatchesCountAsText");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastMatchesCountAsText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Matches != nullptr)
		*Matches = std::move(Parms.Matches);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastMatchIconAtIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UTexture2D>*       Icon                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLastMatchIconAtIndex(int32 Index_0, TSoftObjectPtr<class UTexture2D>* Icon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastMatchIconAtIndex");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastMatchIconAtIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Icon != nullptr)
		*Icon = Parms.Icon;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastSeasonDivision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Division                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLastSeasonDivision(const class FString& GameMode, int32* Division) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastSeasonDivision");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastSeasonDivision Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Division != nullptr)
		*Division = Parms.Division;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastSeasonLeague
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  League                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLastSeasonLeague(const class FString& GameMode, int32* League) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastSeasonLeague");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastSeasonLeague Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (League != nullptr)
		*League = Parms.League;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLastWinsCountAsText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Wins                                                   (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetLastWinsCountAsText(class FText* Wins) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLastWinsCountAsText");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLastWinsCountAsText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wins != nullptr)
		*Wins = std::move(Parms.Wins);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLeagueUIData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   LeagueID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DivID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUIRankedLeagues*                LeagueUIData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLeagueUIData(int32 LeagueID, int32 DivID, struct FUIRankedLeagues* LeagueUIData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLeagueUIData");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLeagueUIData Parms{};

	Parms.LeagueID = LeagueID;
	Parms.DivID = DivID;

	UObject::ProcessEvent(Func, &Parms);

	if (LeagueUIData != nullptr)
		*LeagueUIData = std::move(Parms.LeagueUIData);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLossPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetLossPercent(const class FString& GameMode, int32* Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLossPercent");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLossPercent Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetLossPercentAsText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText*                            Percent                                                (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetLossPercentAsText(const class FString& GameMode, class FText* Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetLossPercentAsText");

	Params::BP_PlayerPrivateProfileViewModel_C_GetLossPercentAsText Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = std::move(Parms.Percent);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetMostPlayedGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESOSGameType*                           GameMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetMostPlayedGameMode(ESOSGameType* GameMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetMostPlayedGameMode");

	Params::BP_PlayerPrivateProfileViewModel_C_GetMostPlayedGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = Parms.GameMode;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetNextRankDivision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Division                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetNextRankDivision(const class FString& GameMode, int32* Division) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetNextRankDivision");

	Params::BP_PlayerPrivateProfileViewModel_C_GetNextRankDivision Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Division != nullptr)
		*Division = Parms.Division;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetNextRankLeague
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  League                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetNextRankLeague(const class FString& GameMode, int32* League) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetNextRankLeague");

	Params::BP_PlayerPrivateProfileViewModel_C_GetNextRankLeague Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (League != nullptr)
		*League = Parms.League;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetNextRankUIData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FUIRankedLeagues*                LeagueUIData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetNextRankUIData(const class FString& GameMode, struct FUIRankedLeagues* LeagueUIData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetNextRankUIData");

	Params::BP_PlayerPrivateProfileViewModel_C_GetNextRankUIData Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (LeagueUIData != nullptr)
		*LeagueUIData = std::move(Parms.LeagueUIData);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetPrivateRankedDataForGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USOSPlayerProfilePrivateRankData**PrivateRankedData                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetPrivateRankedDataForGameMode(const class FString& GameMode, class USOSPlayerProfilePrivateRankData** PrivateRankedData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetPrivateRankedDataForGameMode");

	Params::BP_PlayerPrivateProfileViewModel_C_GetPrivateRankedDataForGameMode Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (PrivateRankedData != nullptr)
		*PrivateRankedData = Parms.PrivateRankedData;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetRankedDataForGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USOSPlayerProfileRankGameModeViewData**RankData                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetRankedDataForGameMode(const class FString& GameMode, class USOSPlayerProfileRankGameModeViewData** RankData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetRankedDataForGameMode");

	Params::BP_PlayerPrivateProfileViewModel_C_GetRankedDataForGameMode Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (RankData != nullptr)
		*RankData = Parms.RankData;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetSeasonEndStatsGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESOSGameType*                           GameMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetSeasonEndStatsGameMode(ESOSGameType* GameMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetSeasonEndStatsGameMode");

	Params::BP_PlayerPrivateProfileViewModel_C_GetSeasonEndStatsGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = Parms.GameMode;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetSeasonEndStatsGameModeName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Name_0                                                 (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetSeasonEndStatsGameModeName(class FText* Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetSeasonEndStatsGameModeName");

	Params::BP_PlayerPrivateProfileViewModel_C_GetSeasonEndStatsGameModeName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetSeasonEndStatsViewModel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USOSPlayerProfileStatisticsViewData**VM                                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetSeasonEndStatsViewModel(class USOSPlayerProfileStatisticsViewData** VM) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetSeasonEndStatsViewModel");

	Params::BP_PlayerPrivateProfileViewModel_C_GetSeasonEndStatsViewModel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VM != nullptr)
		*VM = Parms.VM;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetStatFormattedValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBPE_StatUnit                           Unit                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            FormattedValue                                         (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetStatFormattedValue(double Stat, EBPE_StatUnit Unit, class FText* FormattedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetStatFormattedValue");

	Params::BP_PlayerPrivateProfileViewModel_C_GetStatFormattedValue Parms{};

	Parms.Stat = Stat;
	Parms.Unit = Unit;

	UObject::ProcessEvent(Func, &Parms);

	if (FormattedValue != nullptr)
		*FormattedValue = std::move(Parms.FormattedValue);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetTotalMatchesAsText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Matches                                                (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetTotalMatchesAsText(class FText* Matches) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetTotalMatchesAsText");

	Params::BP_PlayerPrivateProfileViewModel_C_GetTotalMatchesAsText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Matches != nullptr)
		*Matches = std::move(Parms.Matches);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetWinPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::GetWinPercent(const class FString& GameMode, int32* Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetWinPercent");

	Params::BP_PlayerPrivateProfileViewModel_C_GetWinPercent Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.GetWinPercentAsText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText*                            Percent                                                (Parm, OutParm)

void UBP_PlayerPrivateProfileViewModel_C::GetWinPercentAsText(const class FString& GameMode, class FText* Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "GetWinPercentAsText");

	Params::BP_PlayerPrivateProfileViewModel_C_GetWinPercentAsText Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = std::move(Parms.Percent);
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.HasPlacementMatches
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bHasMatches                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::HasPlacementMatches(const class FString& GameMode, bool* bHasMatches) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "HasPlacementMatches");

	Params::BP_PlayerPrivateProfileViewModel_C_HasPlacementMatches Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bHasMatches != nullptr)
		*bHasMatches = Parms.bHasMatches;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.IsCurrentLeagueLast
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bLastLeague                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::IsCurrentLeagueLast(const class FString& GameMode, bool* bLastLeague) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "IsCurrentLeagueLast");

	Params::BP_PlayerPrivateProfileViewModel_C_IsCurrentLeagueLast Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bLastLeague != nullptr)
		*bLastLeague = Parms.bLastLeague;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.IsNextRankLeagueLast
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bLastLeague                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::IsNextRankLeagueLast(const class FString& GameMode, bool* bLastLeague) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "IsNextRankLeagueLast");

	Params::BP_PlayerPrivateProfileViewModel_C_IsNextRankLeagueLast Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bLastLeague != nullptr)
		*bLastLeague = Parms.bLastLeague;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.IsRankedInCurrentSeason
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bRanked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::IsRankedInCurrentSeason(const class FString& GameMode, bool* bRanked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "IsRankedInCurrentSeason");

	Params::BP_PlayerPrivateProfileViewModel_C_IsRankedInCurrentSeason Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bRanked != nullptr)
		*bRanked = Parms.bRanked;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.IsUnrankedInCurrentSeason
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bUnranked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::IsUnrankedInCurrentSeason(const class FString& GameMode, bool* bUnranked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "IsUnrankedInCurrentSeason");

	Params::BP_PlayerPrivateProfileViewModel_C_IsUnrankedInCurrentSeason Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bUnranked != nullptr)
		*bUnranked = Parms.bUnranked;
}


// Function BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C.WasRankedInPreviousSeason
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class FString&                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   bRanked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerPrivateProfileViewModel_C::WasRankedInPreviousSeason(const class FString& GameMode, bool* bRanked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerPrivateProfileViewModel_C", "WasRankedInPreviousSeason");

	Params::BP_PlayerPrivateProfileViewModel_C_WasRankedInPreviousSeason Parms{};

	Parms.GameMode = std::move(GameMode);

	UObject::ProcessEvent(Func, &Parms);

	if (bRanked != nullptr)
		*bRanked = Parms.bRanked;
}

}

