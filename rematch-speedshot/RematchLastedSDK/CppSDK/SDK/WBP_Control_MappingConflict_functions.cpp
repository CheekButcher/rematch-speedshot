#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Control_MappingConflict

#include "Basic.hpp"

#include "WBP_Control_MappingConflict_classes.hpp"
#include "WBP_Control_MappingConflict_parameters.hpp"


namespace SDK
{

// Function WBP_Control_MappingConflict.WBP_Control_MappingConflict_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Control_MappingConflict_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Control_MappingConflict_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Control_MappingConflict.WBP_Control_MappingConflict_C.ExecuteUbergraph_WBP_Control_MappingConflict
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Control_MappingConflict_C::ExecuteUbergraph_WBP_Control_MappingConflict(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Control_MappingConflict_C", "ExecuteUbergraph_WBP_Control_MappingConflict");

	Params::WBP_Control_MappingConflict_C_ExecuteUbergraph_WBP_Control_MappingConflict Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Control_MappingConflict.WBP_Control_MappingConflict_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Control_MappingConflict_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Control_MappingConflict_C", "PreConstruct");

	Params::WBP_Control_MappingConflict_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Control_MappingConflict.WBP_Control_MappingConflict_C.SetActionMappingViewModel
// (Final, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActionMappingViewModel*          viewModel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_Control_MappingConflict_C::SetActionMappingViewModel(class UActionMappingViewModel* viewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Control_MappingConflict_C", "SetActionMappingViewModel");

	Params::WBP_Control_MappingConflict_C_SetActionMappingViewModel Parms{};

	Parms.viewModel = viewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Control_MappingConflict.WBP_Control_MappingConflict_C.SetMappingID
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMappingID&                MappingID                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_Control_MappingConflict_C::SetMappingID(const struct FMappingID& MappingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Control_MappingConflict_C", "SetMappingID");

	Params::WBP_Control_MappingConflict_C_SetMappingID Parms{};

	Parms.MappingID = std::move(MappingID);

	UObject::ProcessEvent(Func, &Parms);
}

}

