#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCCombatSystem

#include "Basic.hpp"

#include "SCCombatSystem_classes.hpp"
#include "SCCombatSystem_parameters.hpp"


namespace SDK
{

// Function SCCombatSystem.AbilityTask_HandleHitboxBase.BPF_ScheduleDestroyActor
// (Final, Native, Public, BlueprintCallable)

void UAbilityTask_HandleHitboxBase::BPF_ScheduleDestroyActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_HandleHitboxBase", "BPF_ScheduleDestroyActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.AbilityTask_HandleHitboxBase.BPF_SetClientPayload
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAbilityTask_HandleHitboxBase::BPF_SetClientPayload(const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_HandleHitboxBase", "BPF_SetClientPayload");

	Params::AbilityTask_HandleHitboxBase_BPF_SetClientPayload Parms{};

	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.AbilityTask_HandleAttack.BPF_HandleAttack
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      _onMissGameplayEffect                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleAttack*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleAttack* UAbilityTask_HandleAttack::BPF_HandleAttack(class UGameplayAbility* _owningAbility, TSubclassOf<class UGameplayEffect> _onMissGameplayEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleAttack", "BPF_HandleAttack");

	Params::AbilityTask_HandleAttack_BPF_HandleAttack Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._onMissGameplayEffect = _onMissGameplayEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AbilityTask_HandleBallStealTracking.BP_HandleBallStealTracking
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePlayInfos&    _playInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USCInputAction*                   _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBallStealTrackingRootMotionModifier>_rootMotionModifier                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fInputDelay                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fUpdateInputFrequency                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBallStealTracking_DirectionSource      _eDir                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleBallStealTracking*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleBallStealTracking* UAbilityTask_HandleBallStealTracking::BP_HandleBallStealTracking(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FAnimSequencePlayInfos& _playInfos, class USCInputAction* _action, TSubclassOf<class UBallStealTrackingRootMotionModifier> _rootMotionModifier, float _fInputDelay, float _fUpdateInputFrequency, EBallStealTracking_DirectionSource _eDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleBallStealTracking", "BP_HandleBallStealTracking");

	Params::AbilityTask_HandleBallStealTracking_BP_HandleBallStealTracking Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._playInfos = std::move(_playInfos);
	Parms._action = _action;
	Parms._rootMotionModifier = _rootMotionModifier;
	Parms._fInputDelay = _fInputDelay;
	Parms._fUpdateInputFrequency = _fUpdateInputFrequency;
	Parms._eDir = _eDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AbilityTask_HandleHitbox.BPF_HandleHitbox
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitDetectionDB*                  _hitDetection                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitboxData>          _hitboxData                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitbox*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleHitbox* UAbilityTask_HandleHitbox::BPF_HandleHitbox(class UGameplayAbility* _owningAbility, class UHitDetectionDB* _hitDetection, TSubclassOf<class UHitboxData> _hitboxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleHitbox", "BPF_HandleHitbox");

	Params::AbilityTask_HandleHitbox_BPF_HandleHitbox Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._hitDetection = _hitDetection;
	Parms._hitboxData = _hitboxData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AbilityTask_HandleHitboxComponent.BPF_HandleHitboxComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _hitboxID                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitSortingMethod>    _hitSortingMethod                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTargetDatasourceInstance& _predTargetDatasource                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fPredictionDuration                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (Parm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitboxComponent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleHitboxComponent* UAbilityTask_HandleHitboxComponent::BPF_HandleHitboxComponent(class UGameplayAbility* _owningAbility, const struct FGameplayTag& _hitboxID, TSubclassOf<class UHitSortingMethod> _hitSortingMethod, const struct FTargetDatasourceInstance& _predTargetDatasource, float _fPredictionDuration, const struct FGameplayAbilityTargetDataHandle& _context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleHitboxComponent", "BPF_HandleHitboxComponent");

	Params::AbilityTask_HandleHitboxComponent_BPF_HandleHitboxComponent Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._hitboxID = std::move(_hitboxID);
	Parms._hitSortingMethod = _hitSortingMethod;
	Parms._predTargetDatasource = std::move(_predTargetDatasource);
	Parms._fPredictionDuration = _fPredictionDuration;
	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AbilityTask_HandleHitboxComponent.HandleHitboxComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _hitboxID                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitSortingMethod>    _hitSortingMethod                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTargetDatasourceInstance& _predTargetDatasource                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fPredictionDuration                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (Parm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitboxComponent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleHitboxComponent* UAbilityTask_HandleHitboxComponent::HandleHitboxComponent(class UGameplayAbility* _owningAbility, const struct FGameplayTag& _hitboxID, TSubclassOf<class UHitSortingMethod> _hitSortingMethod, const struct FTargetDatasourceInstance& _predTargetDatasource, float _fPredictionDuration, const struct FGameplayAbilityTargetDataHandle& _context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleHitboxComponent", "HandleHitboxComponent");

	Params::AbilityTask_HandleHitboxComponent_HandleHitboxComponent Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._hitboxID = std::move(_hitboxID);
	Parms._hitSortingMethod = _hitSortingMethod;
	Parms._predTargetDatasource = std::move(_predTargetDatasource);
	Parms._fPredictionDuration = _fPredictionDuration;
	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AbilityTask_PredictHit.BPF_PredictHit
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitboxBase*    _hitTask                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fPredictionDuration                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnPrediction                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCancelPredictionOnEndTask                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_PredictHit*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_PredictHit* UAbilityTask_PredictHit::BPF_PredictHit(class UGameplayAbility* _owningAbility, class UAbilityTask_HandleHitboxBase* _hitTask, float _fPredictionDuration, bool _bEndTaskOnPrediction, bool _bCancelPredictionOnEndTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_PredictHit", "BPF_PredictHit");

	Params::AbilityTask_PredictHit_BPF_PredictHit Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._hitTask = _hitTask;
	Parms._fPredictionDuration = _fPredictionDuration;
	Parms._bEndTaskOnPrediction = _bEndTaskOnPrediction;
	Parms._bCancelPredictionOnEndTask = _bCancelPredictionOnEndTask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AttackAnimationMetadata.BPF_MakeAttackIDFromMontageInstanceID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             _iMontageInstanceID                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAttackID                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAttackID UAttackAnimationMetadata::BPF_MakeAttackIDFromMontageInstanceID(const int32 _iMontageInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AttackAnimationMetadata", "BPF_MakeAttackIDFromMontageInstanceID");

	Params::AttackAnimationMetadata_BPF_MakeAttackIDFromMontageInstanceID Parms{};

	Parms._iMontageInstanceID = _iMontageInstanceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AttackHitNotifyState.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* UAttackHitNotifyState::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackHitNotifyState", "GetCustomDataTableStruct");

	Params::AttackHitNotifyState_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.BPF_GetHitBoxTagFromHitRequest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitRequest&               _hitRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UHitComponent::BPF_GetHitBoxTagFromHitRequest(class USCGameplayAbility* _ability, const struct FHitRequest& _hitRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitComponent", "BPF_GetHitBoxTagFromHitRequest");

	Params::HitComponent_BPF_GetHitBoxTagFromHitRequest Parms{};

	Parms._ability = _ability;
	Parms._hitRequest = std::move(_hitRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.BPF_GetHitBoxTagFromPendingHit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _pendingHit                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UHitComponent::BPF_GetHitBoxTagFromPendingHit(class USCGameplayAbility* _ability, const struct FPendingHit& _pendingHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitComponent", "BPF_GetHitBoxTagFromPendingHit");

	Params::HitComponent_BPF_GetHitBoxTagFromPendingHit Parms{};

	Parms._ability = _ability;
	Parms._pendingHit = std::move(_pendingHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.BPF_IsEnvironmentHit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitDescription&           _hitDescription                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHitComponent::BPF_IsEnvironmentHit(const struct FHitDescription& _hitDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitComponent", "BPF_IsEnvironmentHit");

	Params::HitComponent_BPF_IsEnvironmentHit Parms{};

	Parms._hitDescription = std::move(_hitDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.BPF_MakeGameplayCueParametersFromPendingHit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _hitDescription                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayCueParameters UHitComponent::BPF_MakeGameplayCueParametersFromPendingHit(class USCGameplayAbility* _ability, const struct FPendingHit& _hitDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitComponent", "BPF_MakeGameplayCueParametersFromPendingHit");

	Params::HitComponent_BPF_MakeGameplayCueParametersFromPendingHit Parms{};

	Parms._ability = _ability;
	Parms._hitDescription = std::move(_hitDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.BPF_SetInstigator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _instigator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitComponent::BPF_SetInstigator(class AActor* _instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "BPF_SetInstigator");

	Params::HitComponent_BPF_SetInstigator Parms{};

	Parms._instigator = _instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.ClientRejectPendingClientHit
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FPredictionKey&            _hitPredictionKey                                      (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitComponent::ClientRejectPendingClientHit(const struct FPredictionKey& _hitPredictionKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ClientRejectPendingClientHit");

	Params::HitComponent_ClientRejectPendingClientHit Parms{};

	Parms._hitPredictionKey = std::move(_hitPredictionKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.ServerAddPendingClientHits
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const TArray<struct FPendingHit>&       _hit                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitComponent::ServerAddPendingClientHits(const TArray<struct FPendingHit>& _hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ServerAddPendingClientHits");

	Params::HitComponent_ServerAddPendingClientHits Parms{};

	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.ServerNotifyPredictedHit
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitComponent::ServerNotifyPredictedHit(const struct FPendingHit& _hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ServerNotifyPredictedHit");

	Params::HitComponent_ServerNotifyPredictedHit Parms{};

	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.ServerOnHitSolved
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bResult                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitComponent::ServerOnHitSolved(const struct FPendingHit& _hit, bool _bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ServerOnHitSolved");

	Params::HitComponent_ServerOnHitSolved Parms{};

	Parms._hit = std::move(_hit);
	Parms._bResult = _bResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.ServerUpdatePredictedHit
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class UHurtboxComponent*                _target                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitOwnerID&               _ID                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitComponent::ServerUpdatePredictedHit(class UHurtboxComponent* _target, const struct FHitOwnerID& _ID, float _fTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ServerUpdatePredictedHit");

	Params::HitComponent_ServerUpdatePredictedHit Parms{};

	Parms._target = _target;
	Parms._ID = std::move(_ID);
	Parms._fTime = _fTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitComponent.BPF_GetInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UHitComponent::BPF_GetInstigator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "BPF_GetInstigator");

	Params::HitComponent_BPF_GetInstigator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitComponent.ServerNotifyCanceledHit
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// class UHurtboxComponent*                _target                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitOwnerID&               _ID                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitComponent::ServerNotifyCanceledHit(class UHurtboxComponent* _target, const struct FHitOwnerID& _ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitComponent", "ServerNotifyCanceledHit");

	Params::HitComponent_ServerNotifyCanceledHit Parms{};

	Parms._target = _target;
	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.AttackComponent.BPF_GetAttackIDFromNotify
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNotifyEventReference& _eventReference                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAttackID                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAttackID UAttackComponent::BPF_GetAttackIDFromNotify(const struct FAnimNotifyEventReference& _eventReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AttackComponent", "BPF_GetAttackIDFromNotify");

	Params::AttackComponent_BPF_GetAttackIDFromNotify Parms{};

	Parms._eventReference = std::move(_eventReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.AttackComponent.BPF_GetLatestAttackID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAttackID                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAttackID UAttackComponent::BPF_GetLatestAttackID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttackComponent", "BPF_GetLatestAttackID");

	Params::AttackComponent_BPF_GetLatestAttackID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.DefaultHitAbility.BuildPayload
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (Parm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitboxBase*    _payloadTarget                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDefaultHitAbility::BuildPayload(const struct FPendingHit& _hit, const struct FGameplayAbilityTargetDataHandle& _context, class UAbilityTask_HandleHitboxBase* _payloadTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultHitAbility", "BuildPayload");

	Params::DefaultHitAbility_BuildPayload Parms{};

	Parms._hit = std::move(_hit);
	Parms._context = std::move(_context);
	Parms._payloadTarget = _payloadTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitboxActor.BPF_ActivateHitbox
// (Final, Native, Public, BlueprintCallable)

void AHitboxActor::BPF_ActivateHitbox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxActor", "BPF_ActivateHitbox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitboxActor.BPF_BuildHitPayload
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleHitboxBase*    _payloadTarget                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHitboxActor::BPF_BuildHitPayload(const struct FPendingHit& _hit, const struct FGameplayAbilityTargetDataHandle& _context, class UAbilityTask_HandleHitboxBase* _payloadTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxActor", "BPF_BuildHitPayload");

	Params::HitboxActor_BPF_BuildHitPayload Parms{};

	Parms._hit = std::move(_hit);
	Parms._context = std::move(_context);
	Parms._payloadTarget = _payloadTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCombatSystem.HitboxActor.BPF_DeactivateHitbox
// (Final, Native, Public, BlueprintCallable)

void AHitboxActor::BPF_DeactivateHitbox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxActor", "BPF_DeactivateHitbox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitboxComponent.BPF_ResetHitBoxTableRowToDefault
// (Final, Native, Public, BlueprintCallable)

void UHitboxComponent::BPF_ResetHitBoxTableRowToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxComponent", "BPF_ResetHitBoxTableRowToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitboxComponent.BPF_SetHitBoxTableRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       _hitBoxTableRowName                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitboxComponent::BPF_SetHitBoxTableRow(const class FName _hitBoxTableRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxComponent", "BPF_SetHitBoxTableRow");

	Params::HitboxComponent_BPF_SetHitBoxTableRow Parms{};

	Parms._hitBoxTableRowName = _hitBoxTableRowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitboxComponent.BPF_GetCurrentHitBoxRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UHitboxComponent::BPF_GetCurrentHitBoxRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxComponent", "BPF_GetCurrentHitBoxRow");

	Params::HitboxComponent_BPF_GetCurrentHitBoxRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitboxComponent.BPF_GetHitDetectionExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHitboxComponent::BPF_GetHitDetectionExtent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxComponent", "BPF_GetHitDetectionExtent");

	Params::HitboxComponent_BPF_GetHitDetectionExtent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitboxComponent.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* UHitboxComponent::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxComponent", "GetCustomDataTableStruct");

	Params::HitboxComponent_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitboxData.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* UHitboxData::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitboxData", "GetCustomDataTableStruct");

	Params::HitboxData_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitReaction.BPF_BuildClientPayload
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class USCGameplayAbility*         _ability                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle&_outResultTargetData                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHitReaction::BPF_BuildClientPayload(const class USCGameplayAbility* _ability, const struct FPendingHit& _hit, struct FGameplayAbilityTargetDataHandle& _outResultTargetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitReaction", "BPF_BuildClientPayload");

	Params::HitReaction_BPF_BuildClientPayload Parms{};

	Parms._ability = _ability;
	Parms._hit = std::move(_hit);
	Parms._outResultTargetData = std::move(_outResultTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_outResultTargetData = std::move(Parms._outResultTargetData);
}


// Function SCCombatSystem.HitReaction.BPF_OnHit
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class USCGameplayAbility*         _ability                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitReaction::BPF_OnHit(const class USCGameplayAbility* _ability, const struct FPendingHit& _hit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitReaction", "BPF_OnHit");

	Params::HitReaction_BPF_OnHit Parms{};

	Parms._ability = _ability;
	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitReaction.BPF_OnHurt
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UHurtboxSolverComponent*          _hurtComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           _outcomeTags                                           (Parm, OutParm, NativeAccessSpecifierPublic)

void UHitReaction::BPF_OnHurt(class UHurtboxSolverComponent* _hurtComponent, const struct FPendingHit& _hit, struct FGameplayTagContainer* _outcomeTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitReaction", "BPF_OnHurt");

	Params::HitReaction_BPF_OnHurt Parms{};

	Parms._hurtComponent = _hurtComponent;
	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outcomeTags != nullptr)
		*_outcomeTags = std::move(Parms._outcomeTags);
}


// Function SCCombatSystem.HitReaction.BPF_OnReaction
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EHitReactionType                        _eReaction                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitReaction::BPF_OnReaction(EHitReactionType _eReaction, const struct FPendingHit& _hit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitReaction", "BPF_OnReaction");

	Params::HitReaction_BPF_OnReaction Parms{};

	Parms._eReaction = _eReaction;
	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HitReactionHelpers.BPF_GetInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitReactionInstance&      _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UHitReactionHelpers::BPF_GetInstance(const struct FHitReactionInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionHelpers", "BPF_GetInstance");

	Params::HitReactionHelpers_BPF_GetInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitReactionHelpers.GetEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FHitReactionInstance&      _reaction                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHitReactionHelpers::GetEditorDesc(const struct FHitReactionInstance& _reaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionHelpers", "GetEditorDesc");

	Params::HitReactionHelpers_GetEditorDesc Parms{};

	Parms._reaction = std::move(_reaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitDescTargetDataHandleHelpers.Conv_BaseHitDescTargetDataHandle
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitTargetDataHandle&      _hHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FBaseHitDescTargetDataHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FBaseHitDescTargetDataHandle UHitDescTargetDataHandleHelpers::Conv_BaseHitDescTargetDataHandle(const struct FHitTargetDataHandle& _hHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitDescTargetDataHandleHelpers", "Conv_BaseHitDescTargetDataHandle");

	Params::HitDescTargetDataHandleHelpers_Conv_BaseHitDescTargetDataHandle Parms{};

	Parms._hHit = std::move(_hHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HitDescTargetDataHandleHelpers.Conv_HitTargetDataHandle
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FHitTargetDataHandle             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitTargetDataHandle UHitDescTargetDataHandleHelpers::Conv_HitTargetDataHandle(const struct FPendingHit& _hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitDescTargetDataHandleHelpers", "Conv_HitTargetDataHandle");

	Params::HitDescTargetDataHandleHelpers_Conv_HitTargetDataHandle Parms{};

	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HurtboxSolverComponent.BPF_MakeHitTargetDataHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitDescription&           _hHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FHitTargetDataHandle             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitTargetDataHandle UHurtboxSolverComponent::BPF_MakeHitTargetDataHandle(const struct FHitDescription& _hHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HurtboxSolverComponent", "BPF_MakeHitTargetDataHandle");

	Params::HurtboxSolverComponent_BPF_MakeHitTargetDataHandle Parms{};

	Parms._hHit = std::move(_hHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HurtboxSolverComponent.BPF_MakeHurtTargetDataHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitDescription&           _hHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FHurtTargetDataHandle            ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHurtTargetDataHandle UHurtboxSolverComponent::BPF_MakeHurtTargetDataHandle(const struct FHitDescription& _hHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HurtboxSolverComponent", "BPF_MakeHurtTargetDataHandle");

	Params::HurtboxSolverComponent_BPF_MakeHurtTargetDataHandle Parms{};

	Parms._hHit = std::move(_hHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.HurtboxSolverComponent.OnRep_NextValidPredictedHit
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FHitPredictionResult&      PreviousSimulatedTasks                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHurtboxSolverComponent::OnRep_NextValidPredictedHit(const struct FHitPredictionResult& PreviousSimulatedTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HurtboxSolverComponent", "OnRep_NextValidPredictedHit");

	Params::HurtboxSolverComponent_OnRep_NextValidPredictedHit Parms{};

	Parms.PreviousSimulatedTasks = std::move(PreviousSimulatedTasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HurtboxSolverComponent.OnWorldRemoved
// (Final, Native, Public)
// Parameters:
// class UWorld*                           _destroyedWorld                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHurtboxSolverComponent::OnWorldRemoved(class UWorld* _destroyedWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HurtboxSolverComponent", "OnWorldRemoved");

	Params::HurtboxSolverComponent_OnWorldRemoved Parms{};

	Parms._destroyedWorld = _destroyedWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.HurtboxSolverComponent.BPF_GetPendingHitCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHurtboxSolverComponent::BPF_GetPendingHitCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HurtboxSolverComponent", "BPF_GetPendingHitCount");

	Params::HurtboxSolverComponent_BPF_GetPendingHitCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.OnActorCollidedBinder.OnActorCollided
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UOnActorCollidedBinder::OnActorCollided(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnActorCollidedBinder", "OnActorCollided");

	Params::OnActorCollidedBinder_OnActorCollided Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.OnActorHitBinder.OnActorHit
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UOnActorHitBinder::OnActorHit(const struct FPendingHit& _hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnActorHitBinder", "OnActorHit");

	Params::OnActorHitBinder_OnActorHit Parms{};

	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.OnActorHurtBinder.OnActorHurt
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPendingHit&               _hit                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UOnActorHurtBinder::OnActorHurt(const struct FPendingHit& _hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnActorHurtBinder", "OnActorHurt");

	Params::OnActorHurtBinder_OnActorHurt Parms{};

	Parms._hit = std::move(_hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCombatSystem.SCProjectile.BPF_ComputeStartTransformForTargetActor
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _spawnLocation                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _targetActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutWantedSpeed                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  _maxRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDeltaOnTarget                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fNoTargetDistance                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCurvedTrajectory                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ASCProjectile::BPF_ComputeStartTransformForTargetActor(const class UObject* _worldContextObject, const struct FTransform& _spawnLocation, const class AActor* _targetActor, float* _fOutWantedSpeed, const struct FRotator& _maxRotation, const struct FVector& _vDeltaOnTarget, float _fNoTargetDistance, bool _bCurvedTrajectory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProjectile", "BPF_ComputeStartTransformForTargetActor");

	Params::SCProjectile_BPF_ComputeStartTransformForTargetActor Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._spawnLocation = std::move(_spawnLocation);
	Parms._targetActor = _targetActor;
	Parms._maxRotation = std::move(_maxRotation);
	Parms._vDeltaOnTarget = std::move(_vDeltaOnTarget);
	Parms._fNoTargetDistance = _fNoTargetDistance;
	Parms._bCurvedTrajectory = _bCurvedTrajectory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutWantedSpeed != nullptr)
		*_fOutWantedSpeed = Parms._fOutWantedSpeed;

	return Parms.ReturnValue;
}


// Function SCCombatSystem.SCProjectile.BPF_ComputeStartTransformForTargetLocation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _spawnLocation                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vTargetLocation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vTargetVelocity                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutWantedSpeed                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  _maxRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDeltaOnTarget                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCurvedTrajectory                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ASCProjectile::BPF_ComputeStartTransformForTargetLocation(const class UObject* _worldContextObject, const struct FTransform& _spawnLocation, const struct FVector& _vTargetLocation, const struct FVector& _vTargetVelocity, float* _fOutWantedSpeed, const struct FRotator& _maxRotation, const struct FVector& _vDeltaOnTarget, bool _bCurvedTrajectory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProjectile", "BPF_ComputeStartTransformForTargetLocation");

	Params::SCProjectile_BPF_ComputeStartTransformForTargetLocation Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._spawnLocation = std::move(_spawnLocation);
	Parms._vTargetLocation = std::move(_vTargetLocation);
	Parms._vTargetVelocity = std::move(_vTargetVelocity);
	Parms._maxRotation = std::move(_maxRotation);
	Parms._vDeltaOnTarget = std::move(_vDeltaOnTarget);
	Parms._bCurvedTrajectory = _bCurvedTrajectory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutWantedSpeed != nullptr)
		*_fOutWantedSpeed = Parms._fOutWantedSpeed;

	return Parms.ReturnValue;
}

}

