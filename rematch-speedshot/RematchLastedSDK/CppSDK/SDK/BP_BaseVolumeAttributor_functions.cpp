#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseVolumeAttributor

#include "Basic.hpp"

#include "BP_BaseVolumeAttributor_classes.hpp"
#include "BP_BaseVolumeAttributor_parameters.hpp"


namespace SDK
{

// Function BP_BaseVolumeAttributor.BP_BaseVolumeAttributor_C.OnOngoingBlockingAbilityStateChanged
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class USCAbilitySystemComponent*  _abilitySystem                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              _gameplayTag                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   _iCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseVolumeAttributor_C::OnOngoingBlockingAbilityStateChanged(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseVolumeAttributor_C", "OnOngoingBlockingAbilityStateChanged");

	Params::BP_BaseVolumeAttributor_C_OnOngoingBlockingAbilityStateChanged Parms{};

	Parms._abilitySystem = _abilitySystem;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._iCount = _iCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseVolumeAttributor.BP_BaseVolumeAttributor_C.BPE_RemoveCurrentEffectOwner
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           _actor                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_BaseVolumeAttributor_C::BPE_RemoveCurrentEffectOwner(class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseVolumeAttributor_C", "BPE_RemoveCurrentEffectOwner");

	Params::BP_BaseVolumeAttributor_C_BPE_RemoveCurrentEffectOwner Parms{};

	Parms._actor = _actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseVolumeAttributor.BP_BaseVolumeAttributor_C.BPE_CantRemoveEffectFromTarget
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           _actor                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_BaseVolumeAttributor_C::BPE_CantRemoveEffectFromTarget(class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseVolumeAttributor_C", "BPE_CantRemoveEffectFromTarget");

	Params::BP_BaseVolumeAttributor_C_BPE_CantRemoveEffectFromTarget Parms{};

	Parms._actor = _actor;

	UObject::ProcessEvent(Func, &Parms);
}

}

