#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCCore

#include "Basic.hpp"

#include "SCCore_classes.hpp"
#include "SCCore_parameters.hpp"


namespace SDK
{

// Function SCCore.AbilityMontageNotifyState.BPF_NotifyBegin
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEvent&          _event                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityMontageNotifyState::BPF_NotifyBegin(const struct FGameplayAbilityTargetDataHandle& _context, class USCGameplayAbility* _ability, const struct FAnimNotifyEvent& _event, float _fDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityMontageNotifyState", "BPF_NotifyBegin");

	Params::AbilityMontageNotifyState_BPF_NotifyBegin Parms{};

	Parms._context = std::move(_context);
	Parms._ability = _ability;
	Parms._event = std::move(_event);
	Parms._fDuration = _fDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.AbilityTask_ApplyRootMotionSnapFromInitialSpeed.BPF_SnapFromInitialSpeed
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vTargetPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _springSpeedPerInitialDistance                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDistanceReachRadius                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ApplyRootMotionSnapFromInitialSpeed*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ApplyRootMotionSnapFromInitialSpeed* UAbilityTask_ApplyRootMotionSnapFromInitialSpeed::BPF_SnapFromInitialSpeed(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FVector& _vTargetPosition, class UCurveFloat* _springSpeedPerInitialDistance, float _fDistanceReachRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ApplyRootMotionSnapFromInitialSpeed", "BPF_SnapFromInitialSpeed");

	Params::AbilityTask_ApplyRootMotionSnapFromInitialSpeed_BPF_SnapFromInitialSpeed Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._vTargetPosition = std::move(_vTargetPosition);
	Parms._springSpeedPerInitialDistance = _springSpeedPerInitialDistance;
	Parms._fDistanceReachRadius = _fDistanceReachRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_BlueprintGenericTask.BPF_BlueprintGenericTask
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_BlueprintGenericTask*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_BlueprintGenericTask* UAbilityTask_BlueprintGenericTask::BPF_BlueprintGenericTask(class UGameplayAbility* _owningAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_BlueprintGenericTask", "BPF_BlueprintGenericTask");

	Params::AbilityTask_BlueprintGenericTask_BPF_BlueprintGenericTask Parms{};

	Parms._owningAbility = _owningAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_CancelAbilityByTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          _asc                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _withTags                                              (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _withoutTags                                           (Parm, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 _ignore                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemBPLibrary::BPF_CancelAbilityByTag(class UAbilitySystemComponent* _asc, const struct FGameplayTagContainer& _withTags, const struct FGameplayTagContainer& _withoutTags, class UGameplayAbility* _ignore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_CancelAbilityByTag");

	Params::SCAbilitySystemBPLibrary_BPF_CancelAbilityByTag Parms{};

	Parms._asc = _asc;
	Parms._withTags = std::move(_withTags);
	Parms._withoutTags = std::move(_withoutTags);
	Parms._ignore = _ignore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_FindLocalAbility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          _asc                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayAbility>     _abilityClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncludeChildren                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCheckIfActive                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayAbility* USCAbilitySystemBPLibrary::BPF_FindLocalAbility(class UAbilitySystemComponent* _asc, TSubclassOf<class UGameplayAbility> _abilityClass, bool _bIncludeChildren, bool _bCheckIfActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_FindLocalAbility");

	Params::SCAbilitySystemBPLibrary_BPF_FindLocalAbility Parms{};

	Parms._asc = _asc;
	Parms._abilityClass = _abilityClass;
	Parms._bIncludeChildren = _bIncludeChildren;
	Parms._bCheckIfActive = _bCheckIfActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_GetAbility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayEffectContextHandle&_effectContext                                         (Parm, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayAbility* USCAbilitySystemBPLibrary::BPF_GetAbility(const struct FGameplayEffectContextHandle& _effectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_GetAbility");

	Params::SCAbilitySystemBPLibrary_BPF_GetAbility Parms{};

	Parms._effectContext = std::move(_effectContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_GetGameplayEffectContextHandleFromActiveEffectHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActiveGameplayEffectHandle&_activeHandle                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayEffectContextHandle USCAbilitySystemBPLibrary::BPF_GetGameplayEffectContextHandleFromActiveEffectHandle(const struct FActiveGameplayEffectHandle& _activeHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_GetGameplayEffectContextHandleFromActiveEffectHandle");

	Params::SCAbilitySystemBPLibrary_BPF_GetGameplayEffectContextHandleFromActiveEffectHandle Parms{};

	Parms._activeHandle = std::move(_activeHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_GetSetByCallerMagnitude
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayEffectSpec&       _effectSpec                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAbilitySystemBPLibrary::BPF_GetSetByCallerMagnitude(const struct FGameplayEffectSpec& _effectSpec, const struct FGameplayTag& _gameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_GetSetByCallerMagnitude");

	Params::SCAbilitySystemBPLibrary_BPF_GetSetByCallerMagnitude Parms{};

	Parms._effectSpec = std::move(_effectSpec);
	Parms._gameplayTag = std::move(_gameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_HasActiveAbilities
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          _asc                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _gameplayTagContainer                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    _bOnlyAbilitiesThatSatisfyTagRequirements              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemBPLibrary::BPF_HasActiveAbilities(class UAbilitySystemComponent* _asc, const struct FGameplayTagContainer& _gameplayTagContainer, bool _bOnlyAbilitiesThatSatisfyTagRequirements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_HasActiveAbilities");

	Params::SCAbilitySystemBPLibrary_BPF_HasActiveAbilities Parms{};

	Parms._asc = _asc;
	Parms._gameplayTagContainer = std::move(_gameplayTagContainer);
	Parms._bOnlyAbilitiesThatSatisfyTagRequirements = _bOnlyAbilitiesThatSatisfyTagRequirements;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemBPLibrary.BPF_IsEffectHandleValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActiveGameplayEffectHandle&_activeHandle                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemBPLibrary::BPF_IsEffectHandleValid(const struct FActiveGameplayEffectHandle& _activeHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemBPLibrary", "BPF_IsEffectHandleValid");

	Params::SCAbilitySystemBPLibrary_BPF_IsEffectHandleValid Parms{};

	Parms._activeHandle = std::move(_activeHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_ChangeMovementMode.BPF_TaskChangeMovementMode
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCDynamicSpeedMovementComponent* _movementComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           _eMovementModeStartingAbility                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ChangeMovementMode*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ChangeMovementMode* UAbilityTask_ChangeMovementMode::BPF_TaskChangeMovementMode(class UGameplayAbility* _owningAbility, class USCDynamicSpeedMovementComponent* _movementComponent, EMovementMode _eMovementModeStartingAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ChangeMovementMode", "BPF_TaskChangeMovementMode");

	Params::AbilityTask_ChangeMovementMode_BPF_TaskChangeMovementMode Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._movementComponent = _movementComponent;
	Parms._eMovementModeStartingAbility = _eMovementModeStartingAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_Transition.IsTransitionAllowedByTransitionDB
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTransition&             _currentTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTransitionRatio                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsInDeccel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAbilityTask_Transition::IsTransitionAllowedByTransitionDB(const struct FSCTransition& _testingTransition, const struct FSCTransition& _currentTransition, float _fTransitionRatio, bool _bIsInDeccel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_Transition", "IsTransitionAllowedByTransitionDB");

	Params::AbilityTask_Transition_IsTransitionAllowedByTransitionDB Parms{};

	Parms._testingTransition = std::move(_testingTransition);
	Parms._currentTransition = std::move(_currentTransition);
	Parms._fTransitionRatio = _fTransitionRatio;
	Parms._bIsInDeccel = _bIsInDeccel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCActorHelpers.BPF_GetClosestActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            _actors                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USCActorHelpers::BPF_GetClosestActor(class AActor* _target, const TArray<class AActor*>& _actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCActorHelpers", "BPF_GetClosestActor");

	Params::SCActorHelpers_BPF_GetClosestActor Parms{};

	Parms._target = _target;
	Parms._actors = std::move(_actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_ComputeTransition.BPF_ComputeTransition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTransitionSettings&     _transitionSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   _iMaxPreviousMovementDescriptionCount                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ComputeTransition*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ComputeTransition* UAbilityTask_ComputeTransition::BPF_ComputeTransition(class UGameplayAbility* _owningAbility, const struct FSCTransitionSettings& _transitionSettings, int32 _iMaxPreviousMovementDescriptionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ComputeTransition", "BPF_ComputeTransition");

	Params::AbilityTask_ComputeTransition_BPF_ComputeTransition Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._transitionSettings = std::move(_transitionSettings);
	Parms._iMaxPreviousMovementDescriptionCount = _iMaxPreviousMovementDescriptionCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_DetectGameplayTagMontageNotify.BPF_DetectGameplayTagMontageNotify
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_DetectGameplayTagMontageNotify*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_DetectGameplayTagMontageNotify* UAbilityTask_DetectGameplayTagMontageNotify::BPF_DetectGameplayTagMontageNotify(class UGameplayAbility* _owningAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_DetectGameplayTagMontageNotify", "BPF_DetectGameplayTagMontageNotify");

	Params::AbilityTask_DetectGameplayTagMontageNotify_BPF_DetectGameplayTagMontageNotify Parms{};

	Parms._owningAbility = _owningAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDataCondition.BPF_Evaluate
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetDataCondition::BPF_Evaluate(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _handle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetDataCondition", "BPF_Evaluate");

	Params::TargetDataCondition_BPF_Evaluate Parms{};

	Parms._actor = _actor;
	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleAvailabilityTags.BPF_HandleAvailabilityTags
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTagAvailabilityLayer&     _tag                                                   (Parm, NativeAccessSpecifierPublic)
// const struct FFloatRange&               _timeRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleAvailabilityTags*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleAvailabilityTags* UAbilityTask_HandleAvailabilityTags::BPF_HandleAvailabilityTags(class UGameplayAbility* _owningAbility, const struct FTagAvailabilityLayer& _tag, const struct FFloatRange& _timeRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleAvailabilityTags", "BPF_HandleAvailabilityTags");

	Params::AbilityTask_HandleAvailabilityTags_BPF_HandleAvailabilityTags Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._tag = std::move(_tag);
	Parms._timeRange = std::move(_timeRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleAvailabilityTags.BPF_HandleAvailabilityTagsFromData
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UTagAvailabilityLayerContainer>_data                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFloatRange&               _timeRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleAvailabilityTags*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleAvailabilityTags* UAbilityTask_HandleAvailabilityTags::BPF_HandleAvailabilityTagsFromData(class UGameplayAbility* _owningAbility, TSubclassOf<class UTagAvailabilityLayerContainer> _data, const struct FFloatRange& _timeRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleAvailabilityTags", "BPF_HandleAvailabilityTagsFromData");

	Params::AbilityTask_HandleAvailabilityTags_BPF_HandleAvailabilityTagsFromData Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._data = _data;
	Parms._timeRange = std::move(_timeRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleCharacterLocomotion.BPF_HandleCharacterLocomotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputStablizationSettings&_inputStabilizationSettings                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGameplayTagQuery&         _activationQuery                                       (Parm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleCharacterLocomotion*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleCharacterLocomotion* UAbilityTask_HandleCharacterLocomotion::BPF_HandleCharacterLocomotion(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, const struct FInputStablizationSettings& _inputStabilizationSettings, const struct FGameplayTagQuery& _activationQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleCharacterLocomotion", "BPF_HandleCharacterLocomotion");

	Params::AbilityTask_HandleCharacterLocomotion_BPF_HandleCharacterLocomotion Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._inputStabilizationSettings = std::move(_inputStabilizationSettings);
	Parms._activationQuery = std::move(_activationQuery);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleGameplayCue.BPF_HandleGameplayCue
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayCueTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayEffectContextHandle&_context                                               (Parm, NativeAccessSpecifierPublic)
// bool                                    _bReplicated                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleGameplayCue*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleGameplayCue* UAbilityTask_HandleGameplayCue::BPF_HandleGameplayCue(class UGameplayAbility* _owningAbility, const struct FGameplayTag& _gameplayCueTag, const struct FGameplayEffectContextHandle& _context, bool _bReplicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleGameplayCue", "BPF_HandleGameplayCue");

	Params::AbilityTask_HandleGameplayCue_BPF_HandleGameplayCue Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._gameplayCueTag = std::move(_gameplayCueTag);
	Parms._context = std::move(_context);
	Parms._bReplicated = _bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleGameplayEffect.BPF_HandleGameplayEffect
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      _gameplayEffectClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iGameplayEffectLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iStacks                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleGameplayEffect*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleGameplayEffect* UAbilityTask_HandleGameplayEffect::BPF_HandleGameplayEffect(class UGameplayAbility* _owningAbility, TSubclassOf<class UGameplayEffect> _gameplayEffectClass, int32 _iGameplayEffectLevel, int32 _iStacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleGameplayEffect", "BPF_HandleGameplayEffect");

	Params::AbilityTask_HandleGameplayEffect_BPF_HandleGameplayEffect Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._gameplayEffectClass = _gameplayEffectClass;
	Parms._iGameplayEffectLevel = _iGameplayEffectLevel;
	Parms._iStacks = _iStacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleGameplayEffectSpecToSelf.BPF_HandleGameplayEffectSpecToSelf
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayEffectSpecHandle& _specHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleGameplayEffectSpecToSelf*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleGameplayEffectSpecToSelf* UAbilityTask_HandleGameplayEffectSpecToSelf::BPF_HandleGameplayEffectSpecToSelf(class UGameplayAbility* _owningAbility, const struct FGameplayEffectSpecHandle& _specHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleGameplayEffectSpecToSelf", "BPF_HandleGameplayEffectSpecToSelf");

	Params::AbilityTask_HandleGameplayEffectSpecToSelf_BPF_HandleGameplayEffectSpecToSelf Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._specHandle = std::move(_specHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleLooseGameplayTags.BPF_HandleLooseGameplayTag
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFloatRange&               _timeRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bReplicated                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleLooseGameplayTags*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleLooseGameplayTags* UAbilityTask_HandleLooseGameplayTags::BPF_HandleLooseGameplayTag(class UGameplayAbility* _owningAbility, const struct FGameplayTag& _gameplayTag, const struct FFloatRange& _timeRange, bool _bReplicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleLooseGameplayTags", "BPF_HandleLooseGameplayTag");

	Params::AbilityTask_HandleLooseGameplayTags_BPF_HandleLooseGameplayTag Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._timeRange = std::move(_timeRange);
	Parms._bReplicated = _bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_HandleLooseGameplayTags.BPF_HandleLooseGameplayTags
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _gameplayTags                                          (Parm, NativeAccessSpecifierPublic)
// const struct FFloatRange&               _timeRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bReplicated                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_HandleLooseGameplayTags*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_HandleLooseGameplayTags* UAbilityTask_HandleLooseGameplayTags::BPF_HandleLooseGameplayTags(class UGameplayAbility* _owningAbility, const struct FGameplayTagContainer& _gameplayTags, const struct FFloatRange& _timeRange, bool _bReplicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_HandleLooseGameplayTags", "BPF_HandleLooseGameplayTags");

	Params::AbilityTask_HandleLooseGameplayTags_BPF_HandleLooseGameplayTags Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._gameplayTags = std::move(_gameplayTags);
	Parms._timeRange = std::move(_timeRange);
	Parms._bReplicated = _bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_MoveToLocationWithSpeed.BPF_MoveToLocationWithSpeed
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vTargetLocation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _speedCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRestrictSpeedToExpected                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSetNewMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           _eMovementMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveVector*                     _pathOffsetCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vPathOffsetAmplitude                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fComputeDistanceStep                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_MoveToLocationWithSpeed*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_MoveToLocationWithSpeed* UAbilityTask_MoveToLocationWithSpeed::BPF_MoveToLocationWithSpeed(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FVector& _vTargetLocation, class UCurveFloat* _speedCurve, bool _bRestrictSpeedToExpected, bool _bSetNewMovementMode, EMovementMode _eMovementMode, class UCurveVector* _pathOffsetCurve, const struct FVector& _vPathOffsetAmplitude, float _fComputeDistanceStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_MoveToLocationWithSpeed", "BPF_MoveToLocationWithSpeed");

	Params::AbilityTask_MoveToLocationWithSpeed_BPF_MoveToLocationWithSpeed Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._vTargetLocation = std::move(_vTargetLocation);
	Parms._speedCurve = _speedCurve;
	Parms._bRestrictSpeedToExpected = _bRestrictSpeedToExpected;
	Parms._bSetNewMovementMode = _bSetNewMovementMode;
	Parms._eMovementMode = _eMovementMode;
	Parms._pathOffsetCurve = _pathOffsetCurve;
	Parms._vPathOffsetAmplitude = std::move(_vPathOffsetAmplitude);
	Parms._fComputeDistanceStep = _fComputeDistanceStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_MoveToLocationWithSpeed.BPF_MoveToLocationWithSpeedAndDuration
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vMaxTargetLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _speedCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRestrictSpeedToExpected                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSetNewMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           _eMovementMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fComputeDistanceStep                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_MoveToLocationWithSpeed*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_MoveToLocationWithSpeed* UAbilityTask_MoveToLocationWithSpeed::BPF_MoveToLocationWithSpeedAndDuration(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FVector& _vMaxTargetLocation, class UCurveFloat* _speedCurve, bool _bRestrictSpeedToExpected, bool _bSetNewMovementMode, EMovementMode _eMovementMode, float _fComputeDistanceStep, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_MoveToLocationWithSpeed", "BPF_MoveToLocationWithSpeedAndDuration");

	Params::AbilityTask_MoveToLocationWithSpeed_BPF_MoveToLocationWithSpeedAndDuration Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._vMaxTargetLocation = std::move(_vMaxTargetLocation);
	Parms._speedCurve = _speedCurve;
	Parms._bRestrictSpeedToExpected = _bRestrictSpeedToExpected;
	Parms._bSetNewMovementMode = _bSetNewMovementMode;
	Parms._eMovementMode = _eMovementMode;
	Parms._fComputeDistanceStep = _fComputeDistanceStep;
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_MoveToSnapLocation.BPF_MoveToSnapLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequenceSnapPrediction&_snapPrediction                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    _bRedirectToTarget                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRotationBlendDuration                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_MoveToSnapLocation*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_MoveToSnapLocation* UAbilityTask_MoveToSnapLocation::BPF_MoveToSnapLocation(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FAnimSequenceSnapPrediction& _snapPrediction, bool _bRedirectToTarget, float _fRotationBlendDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_MoveToSnapLocation", "BPF_MoveToSnapLocation");

	Params::AbilityTask_MoveToSnapLocation_BPF_MoveToSnapLocation Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._snapPrediction = std::move(_snapPrediction);
	Parms._bRedirectToTarget = _bRedirectToTarget;
	Parms._fRotationBlendDuration = _fRotationBlendDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.BPF_NetworkSyncWithDelay
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_targetData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCConditionsToSyncEarly&  _conditionsToSyncEarly                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCNetworkSyncData&        _syncData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fFireTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fShootCompensationTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCatchupTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_NetworkSyncWithDelay*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_NetworkSyncWithDelay* UAbilityTask_NetworkSyncWithDelay::BPF_NetworkSyncWithDelay(class UGameplayAbility* _owningAbility, const struct FGameplayAbilityTargetDataHandle& _targetData, const struct FSCConditionsToSyncEarly& _conditionsToSyncEarly, const struct FGameplayAbilityTargetDataHandle& _context, const struct FSCNetworkSyncData& _syncData, float _fFireTime, float _fShootCompensationTime, const struct FGameplayTag& _gameplayTag, float _fCatchupTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_NetworkSyncWithDelay", "BPF_NetworkSyncWithDelay");

	Params::AbilityTask_NetworkSyncWithDelay_BPF_NetworkSyncWithDelay Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._targetData = std::move(_targetData);
	Parms._conditionsToSyncEarly = std::move(_conditionsToSyncEarly);
	Parms._context = std::move(_context);
	Parms._syncData = std::move(_syncData);
	Parms._fFireTime = _fFireTime;
	Parms._fShootCompensationTime = _fShootCompensationTime;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._fCatchupTime = _fCatchupTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.BPF_NetworkSyncWithDelayOrInputTrigger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_targetData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCConditionsToSyncEarly&  _conditionsToSyncEarly                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCNetworkSyncData&        _syncData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fFireTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fShootCompensationTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCatchupTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMinTimeBeforeSync                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_NetworkSyncWithDelay*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_NetworkSyncWithDelay* UAbilityTask_NetworkSyncWithDelay::BPF_NetworkSyncWithDelayOrInputTrigger(class UGameplayAbility* _owningAbility, const struct FGameplayAbilityTargetDataHandle& _targetData, const struct FSCConditionsToSyncEarly& _conditionsToSyncEarly, const struct FGameplayAbilityTargetDataHandle& _context, const struct FSCNetworkSyncData& _syncData, float _fFireTime, float _fShootCompensationTime, const struct FGameplayTag& _gameplayTag, float _fCatchupTime, float _fMinTimeBeforeSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_NetworkSyncWithDelay", "BPF_NetworkSyncWithDelayOrInputTrigger");

	Params::AbilityTask_NetworkSyncWithDelay_BPF_NetworkSyncWithDelayOrInputTrigger Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._targetData = std::move(_targetData);
	Parms._conditionsToSyncEarly = std::move(_conditionsToSyncEarly);
	Parms._context = std::move(_context);
	Parms._syncData = std::move(_syncData);
	Parms._fFireTime = _fFireTime;
	Parms._fShootCompensationTime = _fShootCompensationTime;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._fCatchupTime = _fCatchupTime;
	Parms._fMinTimeBeforeSync = _fMinTimeBeforeSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.BuildProvidedTargetData
// (Native, Public, HasOutParams)
// Parameters:
// struct FTargetDataTypeFilter*           _outProvidedTargetData                                 (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkSyncWithDelay::BuildProvidedTargetData(struct FTargetDataTypeFilter* _outProvidedTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "BuildProvidedTargetData");

	Params::AbilityTask_NetworkSyncWithDelay_BuildProvidedTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outProvidedTargetData != nullptr)
		*_outProvidedTargetData = std::move(Parms._outProvidedTargetData);
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.CheckEndSyncConditions
// (Native, Public)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_targetData                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    _bFire                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAbilityTask_NetworkSyncWithDelay::CheckEndSyncConditions(const struct FGameplayAbilityTargetDataHandle& _targetData, bool _bFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "CheckEndSyncConditions");

	Params::AbilityTask_NetworkSyncWithDelay_CheckEndSyncConditions Parms{};

	Parms._targetData = std::move(_targetData);
	Parms._bFire = _bFire;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.InitInput
// (Final, Native, Protected)

void UAbilityTask_NetworkSyncWithDelay::InitInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "InitInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.OnCancelledCallback
// (Final, Native, Public)

void UAbilityTask_NetworkSyncWithDelay::OnCancelledCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "OnCancelledCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.OnInputTrigger
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class USCInputAction*             _action                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputActionState&         _listenerState                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkSyncWithDelay::OnInputTrigger(const class USCInputAction* _action, const struct FInputActionState& _listenerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "OnInputTrigger");

	Params::AbilityTask_NetworkSyncWithDelay_OnInputTrigger Parms{};

	Parms._action = _action;
	Parms._listenerState = std::move(_listenerState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.ReceiveTargetData
// (Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _activationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkSyncWithDelay::ReceiveTargetData(const struct FGameplayAbilityTargetDataHandle& _data, const struct FGameplayTag& _activationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "ReceiveTargetData");

	Params::AbilityTask_NetworkSyncWithDelay_ReceiveTargetData Parms{};

	Parms._data = std::move(_data);
	Parms._activationTag = std::move(_activationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.SendTargetData
// (Final, Native, Public)
// Parameters:
// bool                                    _bFire                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSyncByConditions                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkSyncWithDelay::SendTargetData(bool _bFire, bool _bSyncByConditions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "SendTargetData");

	Params::AbilityTask_NetworkSyncWithDelay_SendTargetData Parms{};

	Parms._bFire = _bFire;
	Parms._bSyncByConditions = _bSyncByConditions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.UpdateParamsPostBuildPayload
// (Native, Public)

void UAbilityTask_NetworkSyncWithDelay::UpdateParamsPostBuildPayload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "UpdateParamsPostBuildPayload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncWithDelay.UpdateParamsTargetData
// (Native, Public)
// Parameters:
// bool                                    _bFire                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSyncByConditions                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkSyncWithDelay::UpdateParamsTargetData(bool _bFire, bool _bSyncByConditions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkSyncWithDelay", "UpdateParamsTargetData");

	Params::AbilityTask_NetworkSyncWithDelay_UpdateParamsTargetData Parms{};

	Parms._bFire = _bFire;
	Parms._bSyncByConditions = _bSyncByConditions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkSyncInput.BPF_NetworkSyncInput
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputToListen                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCompensationTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCatchupTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_NetworkSyncInput*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_NetworkSyncInput* UAbilityTask_NetworkSyncInput::BPF_NetworkSyncInput(class UGameplayAbility* _owningAbility, class USCInputAction* _inputToListen, float _fTime, float _fCompensationTime, const struct FGameplayTag& _gameplayTag, float _fCatchupTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_NetworkSyncInput", "BPF_NetworkSyncInput");

	Params::AbilityTask_NetworkSyncInput_BPF_NetworkSyncInput Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputToListen = _inputToListen;
	Parms._fTime = _fTime;
	Parms._fCompensationTime = _fCompensationTime;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._fCatchupTime = _fCatchupTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkSyncInput.BPF_NetworkSyncInputWithInputTrigger
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputToListen                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCompensationTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCatchupTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMinTimeBeforeSync                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_NetworkSyncInput*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_NetworkSyncInput* UAbilityTask_NetworkSyncInput::BPF_NetworkSyncInputWithInputTrigger(class UGameplayAbility* _owningAbility, class USCInputAction* _inputToListen, float _fTime, float _fCompensationTime, const struct FGameplayTag& _gameplayTag, float _fCatchupTime, float _fMinTimeBeforeSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_NetworkSyncInput", "BPF_NetworkSyncInputWithInputTrigger");

	Params::AbilityTask_NetworkSyncInput_BPF_NetworkSyncInputWithInputTrigger Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputToListen = _inputToListen;
	Parms._fTime = _fTime;
	Parms._fCompensationTime = _fCompensationTime;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._fCatchupTime = _fCatchupTime;
	Parms._fMinTimeBeforeSync = _fMinTimeBeforeSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAimingBillboardActor.BPE_ComputeScore
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// const struct FVector&                   _v3DPointToTest                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASCAimingBillboardActor::BPE_ComputeScore(const struct FVector& _v3DPointToTest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAimingBillboardActor", "BPE_ComputeScore");

	Params::SCAimingBillboardActor_BPE_ComputeScore Parms{};

	Parms._v3DPointToTest = std::move(_v3DPointToTest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAimingBillboardActor.BPE_ComputeSize
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASCAimingBillboardActor::BPE_ComputeSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAimingBillboardActor", "BPE_ComputeSize");

	Params::SCAimingBillboardActor_BPE_ComputeSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAimingBillboardActor.BPF_GetActorOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASCAimingBillboardActor::BPF_GetActorOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAimingBillboardActor", "BPF_GetActorOwner");

	Params::SCAimingBillboardActor_BPF_GetActorOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAimingBillboardActor.BPF_GetScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASCAimingBillboardActor::BPF_GetScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAimingBillboardActor", "BPF_GetScore");

	Params::SCAimingBillboardActor_BPF_GetScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkWaitCharacterHitGround.BPF_NetworkWaitCharacterHitGround
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fStartAtTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTimeOutDuration                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_NetworkWaitCharacterHitGround*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_NetworkWaitCharacterHitGround* UAbilityTask_NetworkWaitCharacterHitGround::BPF_NetworkWaitCharacterHitGround(class UGameplayAbility* _owningAbility, float _fStartAtTime, float _fTimeOutDuration, const struct FGameplayTag& _gameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_NetworkWaitCharacterHitGround", "BPF_NetworkWaitCharacterHitGround");

	Params::AbilityTask_NetworkWaitCharacterHitGround_BPF_NetworkWaitCharacterHitGround Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._fStartAtTime = _fStartAtTime;
	Parms._fTimeOutDuration = _fTimeOutDuration;
	Parms._gameplayTag = std::move(_gameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_NetworkWaitCharacterHitGround.OnCancelledCallback
// (Final, Native, Private)

void UAbilityTask_NetworkWaitCharacterHitGround::OnCancelledCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkWaitCharacterHitGround", "OnCancelledCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_NetworkWaitCharacterHitGround.ReceiveTargetData
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _activationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_NetworkWaitCharacterHitGround::ReceiveTargetData(const struct FGameplayAbilityTargetDataHandle& _data, const struct FGameplayTag& _activationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_NetworkWaitCharacterHitGround", "ReceiveTargetData");

	Params::AbilityTask_NetworkWaitCharacterHitGround_ReceiveTargetData Parms{};

	Parms._data = std::move(_data);
	Parms._activationTag = std::move(_activationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BP_CreatePlayMontageAndWaitProxy_Context
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndAbilityOnMoveInterrupt                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fStartTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BP_CreatePlayMontageAndWaitProxy_Context(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FGameplayAbilityTargetDataHandle& _context, class FName _StartSection, bool _bStopWhenAbilityEnds, bool _bEndAbilityOnMoveInterrupt, float _fStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BP_CreatePlayMontageAndWaitProxy_Context");

	Params::AbilityTask_SCPlayMontageAndWait_BP_CreatePlayMontageAndWaitProxy_Context Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._context = std::move(_context);
	Parms._StartSection = _StartSection;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._bEndAbilityOnMoveInterrupt = _bEndAbilityOnMoveInterrupt;
	Parms._fStartTime = _fStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAbilityAnimSequence
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePicker>  _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos*          _outSequenceInfos                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_SCPlayMontageAndWait::BPF_PickAbilityAnimSequence(EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class USCGameplayAbility* _ability, TSubclassOf<class UAnimSequencePicker> _picker, const struct FGameplayAbilityTargetDataHandle& _playerContext, struct FAnimSequencePlayInfos* _outSequenceInfos, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAbilityAnimSequence");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAbilityAnimSequence Parms{};

	Parms._eIn = _eIn;
	Parms._ability = _ability;
	Parms._picker = _picker;
	Parms._playerContext = std::move(_playerContext);
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	if (_outSequenceInfos != nullptr)
		*_outSequenceInfos = std::move(Parms._outSequenceInfos);
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAbilityAnimSequenceFromInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePickerInstance&_pickerInstance                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos*          _outSequenceInfos                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_SCPlayMontageAndWait::BPF_PickAbilityAnimSequenceFromInstance(EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class USCGameplayAbility* _ability, const struct FAnimSequencePickerInstance& _pickerInstance, const struct FGameplayAbilityTargetDataHandle& _playerContext, struct FAnimSequencePlayInfos* _outSequenceInfos, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAbilityAnimSequenceFromInstance");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAbilityAnimSequenceFromInstance Parms{};

	Parms._eIn = _eIn;
	Parms._ability = _ability;
	Parms._pickerInstance = std::move(_pickerInstance);
	Parms._playerContext = std::move(_playerContext);
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	if (_outSequenceInfos != nullptr)
		*_outSequenceInfos = std::move(Parms._outSequenceInfos);
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePicker>  _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontage(class USCGameplayAbility* _owningAbility, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePicker> _picker, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontage");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._eIn = _eIn;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontageFromInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePickerInstance&_pickerInstance                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontageFromInstance(class USCGameplayAbility* _owningAbility, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class FName _taskInstanceName, const struct FAnimSequencePickerInstance& _pickerInstance, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontageFromInstance");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontageFromInstance Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._eIn = _eIn;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._pickerInstance = std::move(_pickerInstance);
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontageFromInstanceNoPayload
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePickerInstance&_pickerInstance                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontageFromInstanceNoPayload(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FAnimSequencePickerInstance& _pickerInstance, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontageFromInstanceNoPayload");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontageFromInstanceNoPayload Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._pickerInstance = std::move(_pickerInstance);
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontageNoPayload
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePicker>  _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontageNoPayload(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePicker> _picker, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontageNoPayload");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontageNoPayload Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontageNoPayloadInlineTargetdata
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePicker>  _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontageNoPayloadInlineTargetdata(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePicker> _picker, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontageNoPayloadInlineTargetdata");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontageNoPayloadInlineTargetdata Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlayMontageWithSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePickerContainer>_picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FAnimSequencePlayInfos>&_slots                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlayMontageWithSlots(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePickerContainer> _picker, const TMap<class FName, struct FAnimSequencePlayInfos>& _slots, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlayMontageWithSlots");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlayMontageWithSlots Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slots = std::move(_slots);
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlaySlaveMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePicker>  _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlaySlaveMontage(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePicker> _picker, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlaySlaveMontage");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlaySlaveMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PickAndPlaySlaveMontageFromInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePickerInstance&_pickerInstance                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PickAndPlaySlaveMontageFromInstance(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FAnimSequencePickerInstance& _pickerInstance, class FName _slotName, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PickAndPlaySlaveMontageFromInstance");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PickAndPlaySlaveMontageFromInstance Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._pickerInstance = std::move(_pickerInstance);
	Parms._slotName = _slotName;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PlayMontageFromPicker
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePlayInfos&    _sequenceInfos                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PlayMontageFromPicker(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, const struct FAnimSequencePlayInfos& _sequenceInfos, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PlayMontageFromPicker");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PlayMontageFromPicker Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._sequenceInfos = std::move(_sequenceInfos);
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PlayServerMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PlayServerMontage(class USCGameplayAbility* _owningAbility, class FName _taskInstanceName, bool _bLog, bool _bStopWhenAbilityEnds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PlayServerMontage");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PlayServerMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_PrepareAndPlayMontageFromPlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePlayInfos&    _sequenceInfos                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndAbilityOnMoveInterrupt                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::BPF_PrepareAndPlayMontageFromPlayInfos(class USCGameplayAbility* _owningAbility, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class FName _taskInstanceName, const struct FAnimSequencePlayInfos& _sequenceInfos, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection, bool _bEndAbilityOnMoveInterrupt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_PrepareAndPlayMontageFromPlayInfos");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_PrepareAndPlayMontageFromPlayInfos Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._eIn = _eIn;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._sequenceInfos = std::move(_sequenceInfos);
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;
	Parms._bEndAbilityOnMoveInterrupt = _bEndAbilityOnMoveInterrupt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.SCPlayMontageAndWait
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montageToPlay                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRate                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAnimRootMotionTranslationScale                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fStartTimeSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndAbilityOnMoveInterrupt                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlayMontageAndWait* UAbilityTask_SCPlayMontageAndWait::SCPlayMontageAndWait(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, class UAnimMontage* _montageToPlay, bool _bMirror, float _fRate, class FName _StartSection, bool _bStopWhenAbilityEnds, float _fAnimRootMotionTranslationScale, float _fStartTimeSeconds, bool _bEndAbilityOnMoveInterrupt, const struct FGameplayAbilityTargetDataHandle& _playerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlayMontageAndWait", "SCPlayMontageAndWait");

	Params::AbilityTask_SCPlayMontageAndWait_SCPlayMontageAndWait Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._montageToPlay = _montageToPlay;
	Parms._bMirror = _bMirror;
	Parms._fRate = _fRate;
	Parms._StartSection = _StartSection;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._fAnimRootMotionTranslationScale = _fAnimRootMotionTranslationScale;
	Parms._fStartTimeSeconds = _fStartTimeSeconds;
	Parms._bEndAbilityOnMoveInterrupt = _bEndAbilityOnMoveInterrupt;
	Parms._playerContext = std::move(_playerContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_SetMoveInterruptContext
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_targetData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAbilityTask_SCPlayMontageAndWait::BPF_SetMoveInterruptContext(const struct FGameplayAbilityTargetDataHandle& _targetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_SetMoveInterruptContext");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_SetMoveInterruptContext Parms{};

	Parms._targetData = std::move(_targetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_GetPlayInfos
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAnimSequencePlayInfos*          _outInfos                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UAbilityTask_SCPlayMontageAndWait::BPF_GetPlayInfos(struct FAnimSequencePlayInfos* _outInfos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_GetPlayInfos");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_GetPlayInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outInfos != nullptr)
		*_outInfos = std::move(Parms._outInfos);
}


// Function SCCore.AbilityTask_SCPlayMontageAndWait.BPF_GetPlayInfosTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_targetData                                            (Parm, OutParm, NativeAccessSpecifierPublic)

void UAbilityTask_SCPlayMontageAndWait::BPF_GetPlayInfosTargetData(struct FGameplayAbilityTargetDataHandle* _targetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_SCPlayMontageAndWait", "BPF_GetPlayInfosTargetData");

	Params::AbilityTask_SCPlayMontageAndWait_BPF_GetPlayInfosTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_targetData != nullptr)
		*_targetData = std::move(Parms._targetData);
}


// Function SCCore.AbilityTask_DetectEndMontage.BPF_DetectEndMontage
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*_scPlayMontageTask                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRegisterOnCanMoveInterruptEvent                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_DetectEndMontage*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_DetectEndMontage* UAbilityTask_DetectEndMontage::BPF_DetectEndMontage(class UGameplayAbility* _owningAbility, class UAbilityTask_SCPlayMontageAndWait* _scPlayMontageTask, const struct FGameplayTag& _gameplayTag, bool _bRegisterOnCanMoveInterruptEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_DetectEndMontage", "BPF_DetectEndMontage");

	Params::AbilityTask_DetectEndMontage_BPF_DetectEndMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._scPlayMontageTask = _scPlayMontageTask;
	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._bRegisterOnCanMoveInterruptEvent = _bRegisterOnCanMoveInterruptEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_DetectEndMontage.OnCancelled
// (Final, Native, Private)

void UAbilityTask_DetectEndMontage::OnCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_DetectEndMontage", "OnCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_DetectEndMontage.OnEnded
// (Final, Native, Private)

void UAbilityTask_DetectEndMontage::OnEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_DetectEndMontage", "OnEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_DetectEndMontage.ReceiveTargetData
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _activationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_DetectEndMontage::ReceiveTargetData(const struct FGameplayAbilityTargetDataHandle& _data, const struct FGameplayTag& _activationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_DetectEndMontage", "ReceiveTargetData");

	Params::AbilityTask_DetectEndMontage_ReceiveTargetData Parms{};

	Parms._data = std::move(_data);
	Parms._activationTag = std::move(_activationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_DetectEndMontage.SendTargetData
// (Final, Native, Private)

void UAbilityTask_DetectEndMontage::SendTargetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_DetectEndMontage", "SendTargetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_SCPlaySlotMontageAndWait.BPF_PickAndPlaySlotMontage
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePickerSlotContainer>_picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slot                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _animMontageSlotOverride                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlaySlotMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlaySlotMontageAndWait* UAbilityTask_SCPlaySlotMontageAndWait::BPF_PickAndPlaySlotMontage(class USCGameplayAbility* _owningAbility, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePickerSlotContainer> _picker, class FName _slot, class FName _animMontageSlotOverride, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlaySlotMontageAndWait", "BPF_PickAndPlaySlotMontage");

	Params::AbilityTask_SCPlaySlotMontageAndWait_BPF_PickAndPlaySlotMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._eIn = _eIn;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._slot = _slot;
	Parms._animMontageSlotOverride = _animMontageSlotOverride;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlaySlotMontageAndWait.BPF_SwapPlayingSlotMontage
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlayMontageAndWait*_playingMontage                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimSequencePickerSlotContainer>_picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _pickerSlot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _animMontageSlotOverride                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _overrideConfiguration                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopWhenAbilityEnds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _StartSection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCPlaySlotMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCPlaySlotMontageAndWait* UAbilityTask_SCPlaySlotMontageAndWait::BPF_SwapPlayingSlotMontage(class USCGameplayAbility* _owningAbility, class UAbilityTask_SCPlayMontageAndWait* _playingMontage, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, class FName _taskInstanceName, TSubclassOf<class UAnimSequencePickerSlotContainer> _picker, class FName _pickerSlot, class FName _animMontageSlotOverride, class UBasicMontagePlayerConfiguration* _overrideConfiguration, bool _bLog, bool _bStopWhenAbilityEnds, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCPlaySlotMontageAndWait", "BPF_SwapPlayingSlotMontage");

	Params::AbilityTask_SCPlaySlotMontageAndWait_BPF_SwapPlayingSlotMontage Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._playingMontage = _playingMontage;
	Parms._eIn = _eIn;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._picker = _picker;
	Parms._pickerSlot = _pickerSlot;
	Parms._animMontageSlotOverride = _animMontageSlotOverride;
	Parms._overrideConfiguration = _overrideConfiguration;
	Parms._bLog = _bLog;
	Parms._bStopWhenAbilityEnds = _bStopWhenAbilityEnds;
	Parms._playerContext = std::move(_playerContext);
	Parms._StartSection = _StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCPlaySlotMontageAndWait.BPF_GetSlot
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAbilityTask_SCPlaySlotMontageAndWait::BPF_GetSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_SCPlaySlotMontageAndWait", "BPF_GetSlot");

	Params::AbilityTask_SCPlaySlotMontageAndWait_BPF_GetSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_SCStartAbilityState.BPF_StartAbilityState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _stateName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bBindTasks                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_SCStartAbilityState* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_SCStartAbilityState* UAbilityTask_SCStartAbilityState::BPF_StartAbilityState(class UGameplayAbility* _owningAbility, class FName _stateName, bool _bBindTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_SCStartAbilityState", "BPF_StartAbilityState");

	Params::AbilityTask_SCStartAbilityState_BPF_StartAbilityState Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._stateName = _stateName;
	Parms._bBindTasks = _bBindTasks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_TickAction.BPF_TickAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_TickAction*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_TickAction* UAbilityTask_TickAction::BPF_TickAction(class UGameplayAbility* OwningAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_TickAction", "BPF_TickAction");

	Params::AbilityTask_TickAction_BPF_TickAction Parms{};

	Parms.OwningAbility = OwningAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_TriggerTransition.BPF_TriggerTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCTransitionDB>      _transitionDB                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreTransitionAvailability                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWaitTransitionEnd                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWaitRootMotionEnd                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_TriggerTransition*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_TriggerTransition* UAbilityTask_TriggerTransition::BPF_TriggerTransition(class UGameplayAbility* _owningAbility, TSubclassOf<class USCTransitionDB> _transitionDB, bool _bIgnoreTransitionAvailability, bool _bWaitTransitionEnd, bool _bWaitRootMotionEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_TriggerTransition", "BPF_TriggerTransition");

	Params::AbilityTask_TriggerTransition_BPF_TriggerTransition Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._transitionDB = _transitionDB;
	Parms._bIgnoreTransitionAvailability = _bIgnoreTransitionAvailability;
	Parms._bWaitTransitionEnd = _bWaitTransitionEnd;
	Parms._bWaitRootMotionEnd = _bWaitRootMotionEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_UpdateAbilityTarget.BPF_UpdateAbilityTarget
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLoseTargetOnInputLost                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fInputAngleChangeTolerance                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_UpdateAbilityTarget* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_UpdateAbilityTarget* UAbilityTask_UpdateAbilityTarget::BPF_UpdateAbilityTarget(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, bool _bLoseTargetOnInputLost, float _fInputAngleChangeTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_UpdateAbilityTarget", "BPF_UpdateAbilityTarget");

	Params::AbilityTask_UpdateAbilityTarget_BPF_UpdateAbilityTarget Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._bLoseTargetOnInputLost = _bLoseTargetOnInputLost;
	Parms._fInputAngleChangeTolerance = _fInputAngleChangeTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_UpdateAbilityTarget.BPF_UpdateAbilityTargetOnProvider
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLoseTargetOnInputLost                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentTargetProvider&     _provider                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fInputAngleChangeTolerance                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_UpdateAbilityTarget* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_UpdateAbilityTarget* UAbilityTask_UpdateAbilityTarget::BPF_UpdateAbilityTargetOnProvider(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, bool _bLoseTargetOnInputLost, const struct FLatentTargetProvider& _provider, float _fInputAngleChangeTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_UpdateAbilityTarget", "BPF_UpdateAbilityTargetOnProvider");

	Params::AbilityTask_UpdateAbilityTarget_BPF_UpdateAbilityTargetOnProvider Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._bLoseTargetOnInputLost = _bLoseTargetOnInputLost;
	Parms._provider = std::move(_provider);
	Parms._fInputAngleChangeTolerance = _fInputAngleChangeTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSubsystem.BPE_Deinitialize
// (Event, Protected, BlueprintEvent)

void USCSubsystem::BPE_Deinitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_Deinitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCSubsystem.BPE_Initialize
// (Event, Protected, BlueprintEvent)

void USCSubsystem::BPE_Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCSubsystem.BPE_OnGameStateHandleBeginPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASCGameState*                     _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_OnGameStateHandleBeginPlay(class ASCGameState* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_OnGameStateHandleBeginPlay");

	Params::SCSubsystem_BPE_OnGameStateHandleBeginPlay Parms{};

	Parms._gameState = _gameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_OnGameStateHandleInitialReplication
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASCGameState*                     _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_OnGameStateHandleInitialReplication(class ASCGameState* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_OnGameStateHandleInitialReplication");

	Params::SCSubsystem_BPE_OnGameStateHandleInitialReplication Parms{};

	Parms._gameState = _gameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_OnInputKey
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      _key                                                   (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             _event                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCBasePlayerController*          _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bConsumed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_OnInputKey(const struct FKey& _key, EInputEvent _event, class ASCBasePlayerController* _PlayerController, bool* _bConsumed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_OnInputKey");

	Params::SCSubsystem_BPE_OnInputKey Parms{};

	Parms._key = std::move(_key);
	Parms._event = _event;
	Parms._PlayerController = _PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	if (_bConsumed != nullptr)
		*_bConsumed = Parms._bConsumed;
}


// Function SCCore.SCSubsystem.BPE_OnMatchStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASCGameState*                     _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _newState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_OnMatchStateChanged(class ASCGameState* _gameState, class FName _newState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_OnMatchStateChanged");

	Params::SCSubsystem_BPE_OnMatchStateChanged Parms{};

	Parms._gameState = _gameState;
	Parms._newState = _newState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_OnWorldDestroyed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_OnWorldDestroyed(class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_OnWorldDestroyed");

	Params::SCSubsystem_BPE_OnWorldDestroyed Parms{};

	Parms._world = _world;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_PostEditChangeProperty
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             _propertyName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_PostEditChangeProperty(class FName _propertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_PostEditChangeProperty");

	Params::SCSubsystem_BPE_PostEditChangeProperty Parms{};

	Parms._propertyName = _propertyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_PostLoadMap
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_PostLoadMap(class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_PostLoadMap");

	Params::SCSubsystem_BPE_PostLoadMap Parms{};

	Parms._world = _world;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.BPE_Tick
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETickingGroup                           _eTickGroup                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::BPE_Tick(class UWorld* _world, ETickingGroup _eTickGroup, float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_Tick");

	Params::SCSubsystem_BPE_Tick Parms{};

	Parms._world = _world;
	Parms._eTickGroup = _eTickGroup;
	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSubsystem.OnPlayerStateAdded
// (Native, Protected)
// Parameters:
// class APlayerState*                     _PlayerStateAdded                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::OnPlayerStateAdded(class APlayerState* _PlayerStateAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "OnPlayerStateAdded");

	Params::SCSubsystem_OnPlayerStateAdded Parms{};

	Parms._PlayerStateAdded = _PlayerStateAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSubsystem.OnPlayerStateRemoved
// (Native, Protected)
// Parameters:
// class APlayerState*                     _PlayerStateRemoved                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::OnPlayerStateRemoved(class APlayerState* _PlayerStateRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "OnPlayerStateRemoved");

	Params::SCSubsystem_OnPlayerStateRemoved Parms{};

	Parms._PlayerStateRemoved = _PlayerStateRemoved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSubsystem.OnWorldBeginTearDown
// (Native, Protected)
// Parameters:
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSubsystem::OnWorldBeginTearDown(class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "OnWorldBeginTearDown");

	Params::SCSubsystem_OnWorldBeginTearDown Parms{};

	Parms._world = _world;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSubsystem.BPE_DebugLogStatus
// (Event, Protected, BlueprintEvent, Const)

void USCSubsystem::BPE_DebugLogStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSubsystem", "BPE_DebugLogStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.AbilityTask_WaitForPrediction.BPF_ClientWaitForPrediction
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAbilityTask_WaitForPrediction*_task                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WaitForPrediction*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WaitForPrediction* UAbilityTask_WaitForPrediction::BPF_ClientWaitForPrediction(class UGameplayAbility* _owningAbility, const class UAbilityTask_WaitForPrediction* _task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WaitForPrediction", "BPF_ClientWaitForPrediction");

	Params::AbilityTask_WaitForPrediction_BPF_ClientWaitForPrediction Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._task = _task;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WaitForPrediction.BPF_ClientWatchPrediction
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WaitForPrediction*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WaitForPrediction* UAbilityTask_WaitForPrediction::BPF_ClientWatchPrediction(class UGameplayAbility* _owningAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WaitForPrediction", "BPF_ClientWatchPrediction");

	Params::AbilityTask_WaitForPrediction_BPF_ClientWatchPrediction Parms{};

	Parms._owningAbility = _owningAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WaitFSMStateAction.WaitForFSMStateAction
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCStateMachine*                  _stateMachineToListenTo                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFSMStateWatchAction                    _eActionToWatch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WaitFSMStateAction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WaitFSMStateAction* UAbilityTask_WaitFSMStateAction::WaitForFSMStateAction(class UGameplayAbility* _owningAbility, class USCStateMachine* _stateMachineToListenTo, EFSMStateWatchAction _eActionToWatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WaitFSMStateAction", "WaitForFSMStateAction");

	Params::AbilityTask_WaitFSMStateAction_WaitForFSMStateAction Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._stateMachineToListenTo = _stateMachineToListenTo;
	Parms._eActionToWatch = _eActionToWatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WaitFSMStateAction.OnStateActionTriggered
// (Final, Native, Private, HasOutParams)
// Parameters:
// class USCFlowGraphNode*                 _previousState                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCFlowGraphNode*                 _nextState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCFlowGraphTransition*          _transition                                            (Parm, OutParm, NativeAccessSpecifierPublic)

void UAbilityTask_WaitFSMStateAction::OnStateActionTriggered(class USCFlowGraphNode* _previousState, class USCFlowGraphNode* _nextState, struct FSCFlowGraphTransition* _transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_WaitFSMStateAction", "OnStateActionTriggered");

	Params::AbilityTask_WaitFSMStateAction_OnStateActionTriggered Parms{};

	Parms._previousState = _previousState;
	Parms._nextState = _nextState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_transition != nullptr)
		*_transition = std::move(Parms._transition);
}


// Function SCCore.SCAnimInstanceBase.OnRep_AnimInstanceUpdateEnable
// (Final, Native, Protected)

void USCAnimInstanceBase::OnRep_AnimInstanceUpdateEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstanceBase", "OnRep_AnimInstanceUpdateEnable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPE_OnCinematicBlendedOut
// (Event, Protected, BlueprintEvent)

void USCAnimInstance::BPE_OnCinematicBlendedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPE_OnCinematicBlendedOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCAnimInstance.BPE_OnCinematicBlendOut
// (Event, Protected, BlueprintEvent)

void USCAnimInstance::BPE_OnCinematicBlendOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPE_OnCinematicBlendOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCAnimInstance.BPE_OnGameFlowStateChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              _previous                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _next                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPE_OnGameFlowStateChanged(const struct FGameplayTag& _previous, const struct FGameplayTag& _next)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPE_OnGameFlowStateChanged");

	Params::SCAnimInstance_BPE_OnGameFlowStateChanged Parms{};

	Parms._previous = std::move(_previous);
	Parms._next = std::move(_next);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPE_UpdateAnimationInPreview
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPE_UpdateAnimationInPreview(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPE_UpdateAnimationInPreview");

	Params::SCAnimInstance_BPE_UpdateAnimationInPreview Parms{};

	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCAnimInstance.BPE_UpdateForVLog
// (Event, Public, BlueprintEvent)

void USCAnimInstance::BPE_UpdateForVLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPE_UpdateForVLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCAnimInstance.BPF_AddProgressiveRedirection
// (Final, Native, Public)
// Parameters:
// float                                   _fYaw                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          _eRotationWay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eBlendType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_AddProgressiveRedirection(float _fYaw, float _fDuration, ESCRotationWay _eRotationWay, ESCBlendType _eBlendType, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_AddProgressiveRedirection");

	Params::SCAnimInstance_BPF_AddProgressiveRedirection Parms{};

	Parms._fYaw = _fYaw;
	Parms._fDuration = _fDuration;
	Parms._eRotationWay = _eRotationWay;
	Parms._eBlendType = _eBlendType;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPF_AddProgressiveRotation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   _fYaw                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_AddProgressiveRotation(float _fYaw, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_AddProgressiveRotation");

	Params::SCAnimInstance_BPF_AddProgressiveRotation Parms{};

	Parms._fYaw = _fYaw;
	Parms._fDuration = _fDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCAnimInstance.BPF_BindProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCIKPropertyEvaluation&         _property                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   _uiEnum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_BindProperty(struct FSCIKPropertyEvaluation& _property, uint8 _uiEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_BindProperty");

	Params::SCAnimInstance_BPF_BindProperty Parms{};

	Parms._property = std::move(_property);
	Parms._uiEnum = _uiEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_property = std::move(Parms._property);
}


// Function SCCore.SCAnimInstance.BPF_BindRepartitionProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCPropertyFloorBoneRepartition& _property                                              (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_BindRepartitionProperty(struct FSCPropertyFloorBoneRepartition& _property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_BindRepartitionProperty");

	Params::SCAnimInstance_BPF_BindRepartitionProperty Parms{};

	Parms._property = std::move(_property);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_property = std::move(Parms._property);
}


// Function SCCore.SCAnimInstance.BPF_BlendCinematicLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECinematicLayerTypes                    _eLayerToBlendOut                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTargettedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eBlendType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_BlendCinematicLayer(ECinematicLayerTypes _eLayerToBlendOut, float _fTargettedValue, float _fDuration, ESCBlendType _eBlendType, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_BlendCinematicLayer");

	Params::SCAnimInstance_BPF_BlendCinematicLayer Parms{};

	Parms._eLayerToBlendOut = _eLayerToBlendOut;
	Parms._fTargettedValue = _fTargettedValue;
	Parms._fDuration = _fDuration;
	Parms._eBlendType = _eBlendType;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPF_StartIKPath
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIKBodyPartEnumHandler&    _eIKBodyPart                                           (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBlendIn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montageToUse                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _ownerTransform                                        (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _targetedTransform                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_StartIKPath(const struct FGameplayTag& _tagIdentifier, const struct FIKBodyPartEnumHandler& _eIKBodyPart, float _fBlendIn, class UAnimMontage* _montageToUse, const struct FTransform& _ownerTransform, const struct FTransform& _targetedTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_StartIKPath");

	Params::SCAnimInstance_BPF_StartIKPath Parms{};

	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms._eIKBodyPart = std::move(_eIKBodyPart);
	Parms._fBlendIn = _fBlendIn;
	Parms._montageToUse = _montageToUse;
	Parms._ownerTransform = std::move(_ownerTransform);
	Parms._targetedTransform = std::move(_targetedTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPF_StopIKPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBlendOut                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montageToUse                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_StopIKPath(const struct FGameplayTag& _tagIdentifier, float _fBlendOut, class UAnimMontage* _montageToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_StopIKPath");

	Params::SCAnimInstance_BPF_StopIKPath Parms{};

	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms._fBlendOut = _fBlendOut;
	Parms._montageToUse = _montageToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPF_UpdateIKPathTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _ownerTransform                                        (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _targetedTransform                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimInstance::BPF_UpdateIKPathTarget(const struct FGameplayTag& _tagIdentifier, const struct FTransform& _ownerTransform, const struct FTransform& _targetedTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_UpdateIKPathTarget");

	Params::SCAnimInstance_BPF_UpdateIKPathTarget Parms{};

	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms._ownerTransform = std::move(_ownerTransform);
	Parms._targetedTransform = std::move(_targetedTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimInstance.BPF_GetCurrentActiveMontageBySlotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* USCAnimInstance::BPF_GetCurrentActiveMontageBySlotName(class FName _slotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_GetCurrentActiveMontageBySlotName");

	Params::SCAnimInstance_BPF_GetCurrentActiveMontageBySlotName Parms{};

	Parms._slotName = _slotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimInstance.BPF_GetMontageSlotAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FAnimSlotName&             _slotName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimInstance::BPF_GetMontageSlotAlpha(const struct FAnimSlotName& _slotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_GetMontageSlotAlpha");

	Params::SCAnimInstance_BPF_GetMontageSlotAlpha Parms{};

	Parms._slotName = std::move(_slotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimInstance.BPF_GetSavedTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _savedBone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTransform USCAnimInstance::BPF_GetSavedTransform(class FName _savedBone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_GetSavedTransform");

	Params::SCAnimInstance_BPF_GetSavedTransform Parms{};

	Parms._savedBone = _savedBone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimInstance.BPF_IsInPreview
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAnimInstance::BPF_IsInPreview() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimInstance", "BPF_IsInPreview");

	Params::SCAnimInstance_BPF_IsInPreview Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WaitInputRedirection.BPF_WaitInputRedirection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _activationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fToleranceAngle                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WaitInputRedirection*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WaitInputRedirection* UAbilityTask_WaitInputRedirection::BPF_WaitInputRedirection(class UGameplayAbility* _owningAbility, const struct FGameplayTag& _activationTag, class USCInputAction* _inputAction, const float _fToleranceAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WaitInputRedirection", "BPF_WaitInputRedirection");

	Params::AbilityTask_WaitInputRedirection_BPF_WaitInputRedirection Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._activationTag = std::move(_activationTag);
	Parms._inputAction = _inputAction;
	Parms._fToleranceAngle = _fToleranceAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WaitInputRedirection.ServerOnRedirection
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _activationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_WaitInputRedirection::ServerOnRedirection(const struct FGameplayAbilityTargetDataHandle& _data, const struct FGameplayTag& _activationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_WaitInputRedirection", "ServerOnRedirection");

	Params::AbilityTask_WaitInputRedirection_ServerOnRedirection Parms{};

	Parms._data = std::move(_data);
	Parms._activationTag = std::move(_activationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_WatchInput.BPF_WatchAbilityInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eTrigger                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetInputOnEndTask                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreInitialState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnTrigger                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBeforeTrigger                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WatchInput*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WatchInput* UAbilityTask_WatchInput::BPF_WatchAbilityInput(class USCGameplayAbility* _owningAbility, EInputWatchTrigger _eTrigger, bool _bResetInputOnEndTask, bool _bIgnoreInitialState, bool _bEndTaskOnTrigger, float _fDurationBeforeTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WatchInput", "BPF_WatchAbilityInput");

	Params::AbilityTask_WatchInput_BPF_WatchAbilityInput Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._eTrigger = _eTrigger;
	Parms._bResetInputOnEndTask = _bResetInputOnEndTask;
	Parms._bIgnoreInitialState = _bIgnoreInitialState;
	Parms._bEndTaskOnTrigger = _bEndTaskOnTrigger;
	Parms._fDurationBeforeTrigger = _fDurationBeforeTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WatchInput.BPF_WatchAbilityInputState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWatchInputState&                _updateState                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eTrigger                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetInputOnEndTask                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreInitialState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnTrigger                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBeforeTrigger                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WatchInput*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WatchInput* UAbilityTask_WatchInput::BPF_WatchAbilityInputState(class USCGameplayAbility* _owningAbility, struct FWatchInputState& _updateState, EInputWatchTrigger _eTrigger, bool _bResetInputOnEndTask, bool _bIgnoreInitialState, bool _bEndTaskOnTrigger, float _fDurationBeforeTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WatchInput", "BPF_WatchAbilityInputState");

	Params::AbilityTask_WatchInput_BPF_WatchAbilityInputState Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._updateState = std::move(_updateState);
	Parms._eTrigger = _eTrigger;
	Parms._bResetInputOnEndTask = _bResetInputOnEndTask;
	Parms._bIgnoreInitialState = _bIgnoreInitialState;
	Parms._bEndTaskOnTrigger = _bEndTaskOnTrigger;
	Parms._fDurationBeforeTrigger = _fDurationBeforeTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_updateState = std::move(Parms._updateState);

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WatchInput.BPF_WatchInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputGameplayAbilityTargetData&_inputTargetData                                       (Parm, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eTrigger                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetInputOnEndTask                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreInitialState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnTrigger                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBeforeTrigger                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WatchInput*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WatchInput* UAbilityTask_WatchInput::BPF_WatchInput(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, const struct FInputGameplayAbilityTargetData& _inputTargetData, EInputWatchTrigger _eTrigger, bool _bResetInputOnEndTask, bool _bIgnoreInitialState, bool _bEndTaskOnTrigger, float _fDurationBeforeTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WatchInput", "BPF_WatchInput");

	Params::AbilityTask_WatchInput_BPF_WatchInput Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._inputTargetData = std::move(_inputTargetData);
	Parms._eTrigger = _eTrigger;
	Parms._bResetInputOnEndTask = _bResetInputOnEndTask;
	Parms._bIgnoreInitialState = _bIgnoreInitialState;
	Parms._bEndTaskOnTrigger = _bEndTaskOnTrigger;
	Parms._fDurationBeforeTrigger = _fDurationBeforeTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WatchInput.BPF_WatchInputState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputGameplayAbilityTargetData&_inputTargetData                                       (Parm, NativeAccessSpecifierPublic)
// struct FWatchInputState&                _updateState                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eTrigger                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetInputOnEndTask                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreInitialState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnTrigger                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBeforeTrigger                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WatchInput*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WatchInput* UAbilityTask_WatchInput::BPF_WatchInputState(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, const struct FInputGameplayAbilityTargetData& _inputTargetData, struct FWatchInputState& _updateState, EInputWatchTrigger _eTrigger, bool _bResetInputOnEndTask, bool _bIgnoreInitialState, bool _bEndTaskOnTrigger, float _fDurationBeforeTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WatchInput", "BPF_WatchInputState");

	Params::AbilityTask_WatchInput_BPF_WatchInputState Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._inputTargetData = std::move(_inputTargetData);
	Parms._updateState = std::move(_updateState);
	Parms._eTrigger = _eTrigger;
	Parms._bResetInputOnEndTask = _bResetInputOnEndTask;
	Parms._bIgnoreInitialState = _bIgnoreInitialState;
	Parms._bEndTaskOnTrigger = _bEndTaskOnTrigger;
	Parms._fDurationBeforeTrigger = _fDurationBeforeTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_updateState = std::move(Parms._updateState);

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WatchInput.BPF_GetInputState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool*                                   _bOutActive                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionState*               _outState                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UAbilityTask_WatchInput::BPF_GetInputState(bool* _bOutActive, struct FInputActionState* _outState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_WatchInput", "BPF_GetInputState");

	Params::AbilityTask_WatchInput_BPF_GetInputState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutActive != nullptr)
		*_bOutActive = Parms._bOutActive;

	if (_outState != nullptr)
		*_outState = std::move(Parms._outState);
}


// Function SCCore.AbilityTask_BindInputStateToLooseGameplayTags.BPF_BindInputStateToLooseGameplayTags
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputGameplayAbilityTargetData&_inputTargetData                                       (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _tags                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    _bReplicateTags                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_BindInputStateToLooseGameplayTags*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_BindInputStateToLooseGameplayTags* UAbilityTask_BindInputStateToLooseGameplayTags::BPF_BindInputStateToLooseGameplayTags(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, const struct FInputGameplayAbilityTargetData& _inputTargetData, const struct FGameplayTagContainer& _tags, bool _bReplicateTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_BindInputStateToLooseGameplayTags", "BPF_BindInputStateToLooseGameplayTags");

	Params::AbilityTask_BindInputStateToLooseGameplayTags_BPF_BindInputStateToLooseGameplayTags Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._inputTargetData = std::move(_inputTargetData);
	Parms._tags = std::move(_tags);
	Parms._bReplicateTags = _bReplicateTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_BindInputStateToGameplayEffect.BPF_BindInputStateToGameplayEffect
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputGameplayAbilityTargetData&_inputTargetData                                       (Parm, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      _effect                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_BindInputStateToGameplayEffect*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_BindInputStateToGameplayEffect* UAbilityTask_BindInputStateToGameplayEffect::BPF_BindInputStateToGameplayEffect(class UGameplayAbility* _owningAbility, class USCInputAction* _inputAction, const struct FInputGameplayAbilityTargetData& _inputTargetData, TSubclassOf<class UGameplayEffect> _effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_BindInputStateToGameplayEffect", "BPF_BindInputStateToGameplayEffect");

	Params::AbilityTask_BindInputStateToGameplayEffect_BPF_BindInputStateToGameplayEffect Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._inputAction = _inputAction;
	Parms._inputTargetData = std::move(_inputTargetData);
	Parms._effect = _effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_WatchOverTimeAttribute.BPF_WatchOverTimeAttribute
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAttribute&        _attribute                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCMathCondition                        _eCondition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fThreshold                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEndTaskOnConditionMet                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_WatchOverTimeAttribute*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_WatchOverTimeAttribute* UAbilityTask_WatchOverTimeAttribute::BPF_WatchOverTimeAttribute(class UGameplayAbility* _owningAbility, const struct FGameplayAttribute& _attribute, ESCMathCondition _eCondition, float _fThreshold, bool _bEndTaskOnConditionMet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_WatchOverTimeAttribute", "BPF_WatchOverTimeAttribute");

	Params::AbilityTask_WatchOverTimeAttribute_BPF_WatchOverTimeAttribute Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._attribute = std::move(_attribute);
	Parms._eCondition = _eCondition;
	Parms._fThreshold = _fThreshold;
	Parms._bEndTaskOnConditionMet = _bEndTaskOnConditionMet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AchievementUnlockCondition.BPE_Init
// (Event, Protected, BlueprintEvent)

void UAchievementUnlockCondition::BPE_Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPE_Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.AchievementUnlockCondition.BPE_OnMatchEnded
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    _bHasWon                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAchievementUnlockCondition::BPE_OnMatchEnded(bool _bHasWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPE_OnMatchEnded");

	Params::AchievementUnlockCondition_BPE_OnMatchEnded Parms{};

	Parms._bHasWon = _bHasWon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.AchievementUnlockCondition.BPE_UnlockAchievement_Debug
// (Event, Public, BlueprintEvent)

void UAchievementUnlockCondition::BPE_UnlockAchievement_Debug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPE_UnlockAchievement_Debug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.AchievementUnlockCondition.BPF_ConditionFailed
// (Final, Native, Protected, BlueprintCallable)

void UAchievementUnlockCondition::BPF_ConditionFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPF_ConditionFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AchievementUnlockCondition.BPF_SetAchievementTag
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _newAchievementTag                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAchievementUnlockCondition::BPF_SetAchievementTag(const struct FGameplayTag& _newAchievementTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPF_SetAchievementTag");

	Params::AchievementUnlockCondition_BPF_SetAchievementTag Parms{};

	Parms._newAchievementTag = std::move(_newAchievementTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AchievementUnlockCondition.BPF_UnlockAchievement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bShutdownCondition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAchievementUnlockCondition::BPF_UnlockAchievement(bool _bShutdownCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPF_UnlockAchievement");

	Params::AchievementUnlockCondition_BPF_UnlockAchievement Parms{};

	Parms._bShutdownCondition = _bShutdownCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AchievementUnlockCondition.BPE_CanBeUnlocked
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UWorld*                     _world                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAchievementUnlockCondition::BPE_CanBeUnlocked(const class UWorld* _world) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementUnlockCondition", "BPE_CanBeUnlocked");

	Params::AchievementUnlockCondition_BPE_CanBeUnlocked Parms{};

	Parms._world = _world;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCViewModel.BPF_GetWidgetViewModelOfType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USCUserWidget*              _widget                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCViewModel>         _viewModelClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCViewModel*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCViewModel* USCViewModel::BPF_GetWidgetViewModelOfType(const class USCUserWidget* _widget, TSubclassOf<class USCViewModel> _viewModelClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCViewModel", "BPF_GetWidgetViewModelOfType");

	Params::SCViewModel_BPF_GetWidgetViewModelOfType Parms{};

	Parms._widget = _widget;
	Parms._viewModelClass = _viewModelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCViewModel.BPF_SetWidgetViewModel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCViewModel*                     _viewModel                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _propertyName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCViewModel::BPF_SetWidgetViewModel(class USCUserWidget* _widget, class USCViewModel* _viewModel, class FName _propertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCViewModel", "BPF_SetWidgetViewModel");

	Params::SCViewModel_BPF_SetWidgetViewModel Parms{};

	Parms._widget = _widget;
	Parms._viewModel = _viewModel;
	Parms._propertyName = _propertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCViewModel.BPF_IsDummyInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCViewModel::BPF_IsDummyInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCViewModel", "BPF_IsDummyInstance");

	Params::SCViewModel_BPF_IsDummyInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ActionMappingViewModel.SetMappingConflicts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UActionMappingViewModel*>&_mappingConflicts                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UActionMappingViewModel::SetMappingConflicts(const TArray<class UActionMappingViewModel*>& _mappingConflicts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionMappingViewModel", "SetMappingConflicts");

	Params::ActionMappingViewModel_SetMappingConflicts Parms{};

	Parms._mappingConflicts = std::move(_mappingConflicts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ActionMappingViewModel.IsConflicting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionMappingViewModel::IsConflicting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionMappingViewModel", "IsConflicting");

	Params::ActionMappingViewModel_IsConflicting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ActionMappingViewModel.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionMappingViewModel::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionMappingViewModel", "IsValid");

	Params::ActionMappingViewModel_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseGameSettings.BPF_IsBetaVersion
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseGameSettings::BPF_IsBetaVersion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBaseGameSettings", "BPF_IsBetaVersion");

	Params::SCBaseGameSettings_BPF_IsBetaVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCoreGameSettings.BPF_ListAllValuesForSCEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESCUserDefinedEnums                     _eEnumProxyValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  _values                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USCCoreGameSettings::BPF_ListAllValuesForSCEnum(ESCUserDefinedEnums _eEnumProxyValue, TArray<class FString>* _values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreGameSettings", "BPF_ListAllValuesForSCEnum");

	Params::SCCoreGameSettings_BPF_ListAllValuesForSCEnum Parms{};

	Parms._eEnumProxyValue = _eEnumProxyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_values != nullptr)
		*_values = std::move(Parms._values);
}


// Function SCCore.ProfileMappingViewModel.BPF_ApplyCurrentRemappingData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_ApplyCurrentRemappingData(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ApplyCurrentRemappingData");

	Params::ProfileMappingViewModel_BPF_ApplyCurrentRemappingData Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_ApplyMappingForCurrentRemappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_ApplyMappingForCurrentRemappingID(class ASCBasePlayerController* _controller, const struct FInputMappingData& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ApplyMappingForCurrentRemappingID");

	Params::ProfileMappingViewModel_BPF_ApplyMappingForCurrentRemappingID Parms{};

	Parms._controller = _controller;
	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_GetCurrentRemappingProfileData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData*        _outMappingProfileData                                 (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_GetCurrentRemappingProfileData(class ASCBasePlayerController* _controller, struct FInputMappingProfileData* _outMappingProfileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_GetCurrentRemappingProfileData");

	Params::ProfileMappingViewModel_BPF_GetCurrentRemappingProfileData Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMappingProfileData != nullptr)
		*_outMappingProfileData = std::move(Parms._outMappingProfileData);
}


// Function SCCore.ProfileMappingViewModel.BPF_GetInvalidRemappingProfiles
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UProfileMappingViewModel*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UProfileMappingViewModel*> UProfileMappingViewModel::BPF_GetInvalidRemappingProfiles(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_GetInvalidRemappingProfiles");

	Params::ProfileMappingViewModel_BPF_GetInvalidRemappingProfiles Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.BPF_GetRemappingCaptureData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMappingID*                      _outMappingID                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FInputMappingData*               _outMappingData                                        (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool*                                   _bOutCaptureAxis                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  _outControllerTypes                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_GetRemappingCaptureData(class ASCBasePlayerController* _controller, struct FMappingID* _outMappingID, struct FInputMappingData* _outMappingData, bool* _bOutCaptureAxis, int32* _outControllerTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_GetRemappingCaptureData");

	Params::ProfileMappingViewModel_BPF_GetRemappingCaptureData Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMappingID != nullptr)
		*_outMappingID = std::move(Parms._outMappingID);

	if (_outMappingData != nullptr)
		*_outMappingData = std::move(Parms._outMappingData);

	if (_bOutCaptureAxis != nullptr)
		*_bOutCaptureAxis = Parms._bOutCaptureAxis;

	if (_outControllerTypes != nullptr)
		*_outControllerTypes = Parms._outControllerTypes;
}


// Function SCCore.ProfileMappingViewModel.BPF_InitRemappingProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_InitRemappingProfiles(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_InitRemappingProfiles");

	Params::ProfileMappingViewModel_BPF_InitRemappingProfiles Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_IsCurrentRemappingProfileValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::BPF_IsCurrentRemappingProfileValid(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_IsCurrentRemappingProfileValid");

	Params::ProfileMappingViewModel_BPF_IsCurrentRemappingProfileValid Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.BPF_IsInputRemappingEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::BPF_IsInputRemappingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_IsInputRemappingEnabled");

	Params::ProfileMappingViewModel_BPF_IsInputRemappingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.BPF_IsMappingMissingFromCurrentRemappingProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::BPF_IsMappingMissingFromCurrentRemappingProfile(class ASCBasePlayerController* _controller, const struct FMappingID& _mappingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_IsMappingMissingFromCurrentRemappingProfile");

	Params::ProfileMappingViewModel_BPF_IsMappingMissingFromCurrentRemappingProfile Parms{};

	Parms._controller = _controller;
	Parms._mappingID = std::move(_mappingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.BPF_ResetCurrentRemappingData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_ResetCurrentRemappingData(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ResetCurrentRemappingData");

	Params::ProfileMappingViewModel_BPF_ResetCurrentRemappingData Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_ResetCurrentRemappingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_ResetCurrentRemappingProfile(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ResetCurrentRemappingProfile");

	Params::ProfileMappingViewModel_BPF_ResetCurrentRemappingProfile Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_ResetRemappingProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInvalidOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_ResetRemappingProfiles(class ASCBasePlayerController* _controller, bool _bInvalidOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ResetRemappingProfiles");

	Params::ProfileMappingViewModel_BPF_ResetRemappingProfiles Parms{};

	Parms._controller = _controller;
	Parms._bInvalidOnly = _bInvalidOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_SaveCurrentRemappingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_SaveCurrentRemappingProfile(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_SaveCurrentRemappingProfile");

	Params::ProfileMappingViewModel_BPF_SaveCurrentRemappingProfile Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_SetCurrentRemappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      _displayName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bIsAxis                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_SetCurrentRemappingID(class ASCBasePlayerController* _controller, const struct FMappingID& _mappingID, const class FText& _displayName, bool _bIsAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_SetCurrentRemappingID");

	Params::ProfileMappingViewModel_BPF_SetCurrentRemappingID Parms{};

	Parms._controller = _controller;
	Parms._mappingID = std::move(_mappingID);
	Parms._displayName = std::move(_displayName);
	Parms._bIsAxis = _bIsAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_SetIsEditingRemapping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsEditing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_SetIsEditingRemapping(class ASCBasePlayerController* _controller, bool _bIsEditing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_SetIsEditingRemapping");

	Params::ProfileMappingViewModel_BPF_SetIsEditingRemapping Parms{};

	Parms._controller = _controller;
	Parms._bIsEditing = _bIsEditing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_UnbindRemappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::BPF_UnbindRemappingID(class ASCBasePlayerController* _controller, const struct FMappingID& _mappingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_UnbindRemappingID");

	Params::ProfileMappingViewModel_BPF_UnbindRemappingID Parms{};

	Parms._controller = _controller;
	Parms._mappingID = std::move(_mappingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.BPF_ValidateCurrentRemappingData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::BPF_ValidateCurrentRemappingData(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ValidateCurrentRemappingData");

	Params::ProfileMappingViewModel_BPF_ValidateCurrentRemappingData Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.BPF_ValidateCurrentRemappingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::BPF_ValidateCurrentRemappingProfile(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProfileMappingViewModel", "BPF_ValidateCurrentRemappingProfile");

	Params::ProfileMappingViewModel_BPF_ValidateCurrentRemappingProfile Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.AddMappingConflicts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UActionMappingViewModel*>&_mappingConflicts                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::AddMappingConflicts(const TArray<class UActionMappingViewModel*>& _mappingConflicts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "AddMappingConflicts");

	Params::ProfileMappingViewModel_AddMappingConflicts Parms{};

	Parms._mappingConflicts = std::move(_mappingConflicts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.SetMappingConflicts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UActionMappingViewModel*>&_mappingConflicts                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::SetMappingConflicts(const TArray<class UActionMappingViewModel*>& _mappingConflicts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "SetMappingConflicts");

	Params::ProfileMappingViewModel_SetMappingConflicts Parms{};

	Parms._mappingConflicts = std::move(_mappingConflicts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.SetMissingMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UActionMappingViewModel*>&_missingMappings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMappingViewModel::SetMissingMappings(const TArray<class UActionMappingViewModel*>& _missingMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "SetMissingMappings");

	Params::ProfileMappingViewModel_SetMissingMappings Parms{};

	Parms._missingMappings = std::move(_missingMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ProfileMappingViewModel.IsConflicting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::IsConflicting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "IsConflicting");

	Params::ProfileMappingViewModel_IsConflicting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.IsIncomplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::IsIncomplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "IsIncomplete");

	Params::ProfileMappingViewModel_IsIncomplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ProfileMappingViewModel.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProfileMappingViewModel::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMappingViewModel", "IsValid");

	Params::ProfileMappingViewModel_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BaseActorTargetCondition.BPF_Evaluate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _target                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseActorTargetCondition::BPF_Evaluate(const class AActor* _actor, const class AActor* _target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseActorTargetCondition", "BPF_Evaluate");

	Params::BaseActorTargetCondition_BPF_Evaluate Parms{};

	Parms._actor = _actor;
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameInstance.ExecAllClientsLoadEmulationProfile
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    _profile                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameInstance::ExecAllClientsLoadEmulationProfile(const class FString& _profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "ExecAllClientsLoadEmulationProfile");

	Params::SCGameInstance_ExecAllClientsLoadEmulationProfile Parms{};

	Parms._profile = std::move(_profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.LockInGameAchievement
// (Final, Exec, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              _achievementToLock                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameInstance::LockInGameAchievement(const struct FGameplayTag& _achievementToLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "LockInGameAchievement");

	Params::SCGameInstance_LockInGameAchievement Parms{};

	Parms._achievementToLock = std::move(_achievementToLock);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.ResetAllInGameAchievements
// (Final, Exec, Native, Private)

void USCGameInstance::ResetAllInGameAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "ResetAllInGameAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.TriggerPGOWriteFile
// (Final, Exec, Native, Public)

void USCGameInstance::TriggerPGOWriteFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "TriggerPGOWriteFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.UnlockAllInGameAchievements
// (Final, Exec, Native, Private)

void USCGameInstance::UnlockAllInGameAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "UnlockAllInGameAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.UnlockInGameAchievement
// (Final, Exec, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              _achievementToUnlock                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameInstance::UnlockInGameAchievement(const struct FGameplayTag& _achievementToUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "UnlockInGameAchievement");

	Params::SCGameInstance_UnlockInGameAchievement Parms{};

	Parms._achievementToUnlock = std::move(_achievementToUnlock);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameInstance.BPF_GetCheatData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _cheatTag                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCheatData*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCheatData* USCGameInstance::BPF_GetCheatData(const struct FGameplayTag& _cheatTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "BPF_GetCheatData");

	Params::SCGameInstance_BPF_GetCheatData Parms{};

	Parms._cheatTag = std::move(_cheatTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameInstance.RequestDumpSaveInLog
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameInstance::RequestDumpSaveInLog(const class FString& _saveName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameInstance", "RequestDumpSaveInLog");

	Params::SCGameInstance_RequestDumpSaveInLog Parms{};

	Parms._saveName = std::move(_saveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ActorRollbackComponent.OnRep_RevisionID
// (Final, Native, Public)

void UActorRollbackComponent::OnRep_RevisionID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorRollbackComponent", "OnRep_RevisionID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPE_OnIsActiveChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    _IsActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventBinder::BPE_OnIsActiveChanged(bool _IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPE_OnIsActiveChanged");

	Params::EventBinder_BPE_OnIsActiveChanged Parms{};

	Parms._IsActive = _IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPE_Reset
// (Native, Event, Protected, BlueprintEvent)

void UEventBinder::BPE_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPE_Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_AddPlayersInvolvedInTargetData
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerState*                     _playerInstigator                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class APlayerState*>&      _otherPlayers                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UEventBinder::BPF_AddPlayersInvolvedInTargetData(class APlayerState* _playerInstigator, const TArray<class APlayerState*>& _otherPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_AddPlayersInvolvedInTargetData");

	Params::EventBinder_BPF_AddPlayersInvolvedInTargetData Parms{};

	Parms._playerInstigator = _playerInstigator;
	Parms._otherPlayers = std::move(_otherPlayers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_AddToggleInTargetData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    _bToggle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventBinder::BPF_AddToggleInTargetData(bool _bToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_AddToggleInTargetData");

	Params::EventBinder_BPF_AddToggleInTargetData Parms{};

	Parms._bToggle = _bToggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_AddValueInTargetData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventBinder::BPF_AddValueInTargetData(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_AddValueInTargetData");

	Params::EventBinder_BPF_AddValueInTargetData Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_Bind
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>&_onTriggeredCallback                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventBinder::BPF_Bind(const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>& _onTriggeredCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_Bind");

	Params::EventBinder_BPF_Bind Parms{};

	Parms._onTriggeredCallback = _onTriggeredCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_BinderTriggered
// (Final, Native, Protected, BlueprintCallable)

void UEventBinder::BPF_BinderTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_BinderTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_ResetTargetData
// (Final, Native, Public, BlueprintCallable)

void UEventBinder::BPF_ResetTargetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_ResetTargetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_UnBind
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>&_onTriggeredCallback                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventBinder::BPF_UnBind(const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>& _onTriggeredCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_UnBind");

	Params::EventBinder_BPF_UnBind Parms{};

	Parms._onTriggeredCallback = _onTriggeredCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.EventBinder.BPF_GetTargetDataProvidedOnBind
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UEventBinder::BPF_GetTargetDataProvidedOnBind() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventBinder", "BPF_GetTargetDataProvidedOnBind");

	Params::EventBinder_BPF_GetTargetDataProvidedOnBind Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPE_OnCameraDataPoped
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class USCAbstractCameraData*      _cameraData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPE_OnCameraDataPoped(const class USCAbstractCameraData* _cameraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPE_OnCameraDataPoped");

	Params::SCCameraComponent_BPE_OnCameraDataPoped Parms{};

	Parms._cameraData = _cameraData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraComponent.BPE_OnCameraDataPushed
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class USCAbstractCameraData*      _cameraData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPE_OnCameraDataPushed(const class USCAbstractCameraData* _cameraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPE_OnCameraDataPushed");

	Params::SCCameraComponent_BPE_OnCameraDataPushed Parms{};

	Parms._cameraData = _cameraData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraComponent.BPE_OnCameraDataUpdate
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class USCCameraData*              _cameraData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPE_OnCameraDataUpdate(const class USCCameraData* _cameraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPE_OnCameraDataUpdate");

	Params::SCCameraComponent_BPE_OnCameraDataUpdate Parms{};

	Parms._cameraData = _cameraData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraComponent.BPE_OnCameraServiceFirstFrame
// (Event, Public, BlueprintEvent)
// Parameters:
// class USCCameraService*                 _service                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPE_OnCameraServiceFirstFrame(class USCCameraService* _service)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPE_OnCameraServiceFirstFrame");

	Params::SCCameraComponent_BPE_OnCameraServiceFirstFrame Parms{};

	Parms._service = _service;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraComponent.BPE_OnCameraServiceLastFrame
// (Event, Public, BlueprintEvent)
// Parameters:
// class USCCameraService*                 _service                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPE_OnCameraServiceLastFrame(class USCCameraService* _service)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPE_OnCameraServiceLastFrame");

	Params::SCCameraComponent_BPE_OnCameraServiceLastFrame Parms{};

	Parms._service = _service;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraComponent.BPF_AddLookAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCCameraLookAtServiceBehavior&_newLookAt                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  _iHandle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddLookAt(const struct FSCCameraLookAtServiceBehavior& _newLookAt, int32* _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddLookAt");

	Params::SCCameraComponent_BPF_AddLookAt Parms{};

	Parms._newLookAt = std::move(_newLookAt);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_iHandle != nullptr)
		*_iHandle = Parms._iHandle;
}


// Function SCCore.SCCameraComponent.BPF_AddPitchOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fPitchRad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddPitchOnPlaceRad(float _fPitchRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddPitchOnPlaceRad");

	Params::SCCameraComponent_BPF_AddPitchOnPlaceRad Parms{};

	Parms._fPitchRad = _fPitchRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddPitchRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fPitchRad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddPitchRad(float _fPitchRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddPitchRad");

	Params::SCCameraComponent_BPF_AddPitchRad Parms{};

	Parms._fPitchRad = _fPitchRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddRollOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fRollRad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddRollOnPlaceRad(float _fRollRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddRollOnPlaceRad");

	Params::SCCameraComponent_BPF_AddRollOnPlaceRad Parms{};

	Parms._fRollRad = _fRollRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddRollRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fRollRad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddRollRad(float _fRollRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddRollRad");

	Params::SCCameraComponent_BPF_AddRollRad Parms{};

	Parms._fRollRad = _fRollRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddRotationDeg");

	Params::SCCameraComponent_BPF_AddRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddYawOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fYawRad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddYawOnPlaceRad(float _fYawRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddYawOnPlaceRad");

	Params::SCCameraComponent_BPF_AddYawOnPlaceRad Parms{};

	Parms._fYawRad = _fYawRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_AddYawRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fYawRad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_AddYawRad(float _fYawRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_AddYawRad");

	Params::SCCameraComponent_BPF_AddYawRad Parms{};

	Parms._fYawRad = _fYawRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_EnsureBlackBoardKeyIsValid
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      _keyName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_EnsureBlackBoardKeyIsValid(const class FName& _keyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_EnsureBlackBoardKeyIsValid");

	Params::SCCameraComponent_BPF_EnsureBlackBoardKeyIsValid Parms{};

	Parms._keyName = _keyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetLookActionVectorValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCCameraComponent::BPF_GetLookActionVectorValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetLookActionVectorValue");

	Params::SCCameraComponent_BPF_GetLookActionVectorValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetLookInputValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCCameraComponent::BPF_GetLookInputValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetLookInputValue");

	Params::SCCameraComponent_BPF_GetLookInputValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_LockUntilGamepadNeultralInput
// (Final, Native, Public, BlueprintCallable)

void USCCameraComponent::BPF_LockUntilGamepadNeultralInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_LockUntilGamepadNeultralInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_OverrideLocationTrackingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESCCameraTrackingMode                   _eLocationMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_OverrideLocationTrackingMode(ESCCameraTrackingMode _eLocationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_OverrideLocationTrackingMode");

	Params::SCCameraComponent_BPF_OverrideLocationTrackingMode Parms{};

	Parms._eLocationMode = _eLocationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_OverrideRotationTrackingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESCCameraTrackingMode                   _eRotationMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_OverrideRotationTrackingMode(ESCCameraTrackingMode _eRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_OverrideRotationTrackingMode");

	Params::SCCameraComponent_BPF_OverrideRotationTrackingMode Parms{};

	Parms._eRotationMode = _eRotationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_PauseLookAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          _contextString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_PauseLookAt(float _fDuration, class FString* _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_PauseLookAt");

	Params::SCCameraComponent_BPF_PauseLookAt Parms{};

	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_contextString != nullptr)
		*_contextString = std::move(Parms._contextString);
}


// Function SCCore.SCCameraComponent.BPF_PauseLookAtWithHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          _contextString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraComponent::BPF_PauseLookAtWithHandle(class FString* _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_PauseLookAtWithHandle");

	Params::SCCameraComponent_BPF_PauseLookAtWithHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_contextString != nullptr)
		*_contextString = std::move(Parms._contextString);

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_PlayCameraShake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraShakeBase>     _shakeClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraShakePlaySpace                   _eShakeSpace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraShakeBase*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraShakeBase* USCCameraComponent::BPF_PlayCameraShake(TSubclassOf<class UCameraShakeBase> _shakeClass, float _fScale, ECameraShakePlaySpace _eShakeSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_PlayCameraShake");

	Params::SCCameraComponent_BPF_PlayCameraShake Parms{};

	Parms._shakeClass = _shakeClass;
	Parms._fScale = _fScale;
	Parms._eShakeSpace = _eShakeSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_PopRemoveDampingOnAlgorithms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_PopRemoveDampingOnAlgorithms(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_PopRemoveDampingOnAlgorithms");

	Params::SCCameraComponent_BPF_PopRemoveDampingOnAlgorithms Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_PushRemoveDampingOnAlgorithms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _context                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraComponent::BPF_PushRemoveDampingOnAlgorithms(const class FString& _context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_PushRemoveDampingOnAlgorithms");

	Params::SCCameraComponent_BPF_PushRemoveDampingOnAlgorithms Parms{};

	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_RedirectCameraData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class USCAbstractCameraData>&_cameraDataToRedirect                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCAbstractCameraData>&_newCameraDataToUse                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_RedirectCameraData(const TSubclassOf<class USCAbstractCameraData>& _cameraDataToRedirect, const TSubclassOf<class USCAbstractCameraData>& _newCameraDataToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_RedirectCameraData");

	Params::SCCameraComponent_BPF_RedirectCameraData Parms{};

	Parms._cameraDataToRedirect = _cameraDataToRedirect;
	Parms._newCameraDataToUse = _newCameraDataToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_RemoveAllLookAt
// (Final, Native, Public, BlueprintCallable)

void USCCameraComponent::BPF_RemoveAllLookAt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_RemoveAllLookAt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_RemoveLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_RemoveLookAt(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_RemoveLookAt");

	Params::SCCameraComponent_BPF_RemoveLookAt Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_ResetCameraDataRedirectorToDefault
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class USCAbstractCameraData>&_cameraDataToReset                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_ResetCameraDataRedirectorToDefault(const TSubclassOf<class USCAbstractCameraData>& _cameraDataToReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_ResetCameraDataRedirectorToDefault");

	Params::SCCameraComponent_BPF_ResetCameraDataRedirectorToDefault Parms{};

	Parms._cameraDataToReset = _cameraDataToReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_ResetLocationTrackingMode
// (Final, Native, Public, BlueprintCallable)

void USCCameraComponent::BPF_ResetLocationTrackingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_ResetLocationTrackingMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_ResetRotationTrackingMode
// (Final, Native, Public, BlueprintCallable)

void USCCameraComponent::BPF_ResetRotationTrackingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_ResetRotationTrackingMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetIsCameraLDMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bCameraLDMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetIsCameraLDMode(bool _bCameraLDMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetIsCameraLDMode");

	Params::SCCameraComponent_BPF_SetIsCameraLDMode Parms{};

	Parms._bCameraLDMode = _bCameraLDMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetIsLookInputLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bIsLocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetIsLookInputLocked(bool _bIsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetIsLookInputLocked");

	Params::SCCameraComponent_BPF_SetIsLookInputLocked Parms{};

	Parms._bIsLocked = _bIsLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetLocalRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetLocalRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetLocalRotationDeg");

	Params::SCCameraComponent_BPF_SetLocalRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetMirrorCursorValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetMirrorCursorValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetMirrorCursorValue");

	Params::SCCameraComponent_BPF_SetMirrorCursorValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetPitchOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fPitchRad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetPitchOnPlaceRad(float _fPitchRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetPitchOnPlaceRad");

	Params::SCCameraComponent_BPF_SetPitchOnPlaceRad Parms{};

	Parms._fPitchRad = _fPitchRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetPitchRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fPitchRad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetPitchRad(float _fPitchRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetPitchRad");

	Params::SCCameraComponent_BPF_SetPitchRad Parms{};

	Parms._fPitchRad = _fPitchRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetRollOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fRollRad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetRollOnPlaceRad(float _fRollRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetRollOnPlaceRad");

	Params::SCCameraComponent_BPF_SetRollOnPlaceRad Parms{};

	Parms._fRollRad = _fRollRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetRollRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fRollRad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetRollRad(float _fRollRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetRollRad");

	Params::SCCameraComponent_BPF_SetRollRad Parms{};

	Parms._fRollRad = _fRollRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetRotationDeg");

	Params::SCCameraComponent_BPF_SetRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetSlowMotionFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fSlowMotionFactor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetSlowMotionFactor(float _fSlowMotionFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetSlowMotionFactor");

	Params::SCCameraComponent_BPF_SetSlowMotionFactor Parms{};

	Parms._fSlowMotionFactor = _fSlowMotionFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetYawOnPlaceRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fYawRad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetYawOnPlaceRad(float _fYawRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetYawOnPlaceRad");

	Params::SCCameraComponent_BPF_SetYawOnPlaceRad Parms{};

	Parms._fYawRad = _fYawRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_SetYawRad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   _fYawRad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_SetYawRad(float _fYawRad, const TSubclassOf<class USCCameraService>& _CameraServiceInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_SetYawRad");

	Params::SCCameraComponent_BPF_SetYawRad Parms{};

	Parms._fYawRad = _fYawRad;
	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_UnPauseLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_UnPauseLookAt(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_UnPauseLookAt");

	Params::SCCameraComponent_BPF_UnPauseLookAt Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_UpdateLookAtParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSCCameraLookAtServiceBehavior&_params                                                (Parm, NativeAccessSpecifierPublic)
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_UpdateLookAtParams(const struct FSCCameraLookAtServiceBehavior& _params, int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_UpdateLookAtParams");

	Params::SCCameraComponent_BPF_UpdateLookAtParams Parms{};

	Parms._params = std::move(_params);
	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraComponent.BPF_ComputeIsMirrorFromCharacterPosOnScreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_ComputeIsMirrorFromCharacterPosOnScreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_ComputeIsMirrorFromCharacterPosOnScreen");

	Params::SCCameraComponent_BPF_ComputeIsMirrorFromCharacterPosOnScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetBlackBoardComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBlackboardComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* USCCameraComponent::BPF_GetBlackBoardComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetBlackBoardComponent");

	Params::SCCameraComponent_BPF_GetBlackBoardComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraCollisionRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetCameraCollisionRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraCollisionRatio");

	Params::SCCameraComponent_BPF_GetCameraCollisionRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraCollisionTargetRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetCameraCollisionTargetRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraCollisionTargetRatio");

	Params::SCCameraComponent_BPF_GetCameraCollisionTargetRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraDataTemplateClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCCameraData>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCCameraData> USCCameraComponent::BPF_GetCameraDataTemplateClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraDataTemplateClass");

	Params::SCCameraComponent_BPF_GetCameraDataTemplateClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraMixerDataInstanciatedClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class USCCameraMixerData>&_instanceClass                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCCameraMixerData>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCCameraMixerData> USCCameraComponent::BPF_GetCameraMixerDataInstanciatedClass(const TSubclassOf<class USCCameraMixerData>& _instanceClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraMixerDataInstanciatedClass");

	Params::SCCameraComponent_BPF_GetCameraMixerDataInstanciatedClass Parms{};

	Parms._instanceClass = _instanceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraService
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCCameraService>     _serviceClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCCameraService*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraService* USCCameraComponent::BPF_GetCameraService(TSubclassOf<class USCCameraService> _serviceClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraService");

	Params::SCCameraComponent_BPF_GetCameraService Parms{};

	Parms._serviceClass = _serviceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraShakeFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetCameraShakeFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraShakeFactor");

	Params::SCCameraComponent_BPF_GetCameraShakeFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCCameraComponent::BPF_GetCameraTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraTransform");

	Params::SCCameraComponent_BPF_GetCameraTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCameraTransitionInstanciatedClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class USCCameraTransitionInfo>&_instanceClass                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCCameraTransitionInfo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCCameraTransitionInfo> USCCameraComponent::BPF_GetCameraTransitionInstanciatedClass(const TSubclassOf<class USCCameraTransitionInfo>& _instanceClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCameraTransitionInstanciatedClass");

	Params::SCCameraComponent_BPF_GetCameraTransitionInstanciatedClass Parms{};

	Parms._instanceClass = _instanceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCurrentCameraData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USCCameraData*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USCCameraData* USCCameraComponent::BPF_GetCurrentCameraData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCurrentCameraData");

	Params::SCCameraComponent_BPF_GetCurrentCameraData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetCurrentCinematicState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCSequenceBlendViewState               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCSequenceBlendViewState USCCameraComponent::BPF_GetCurrentCinematicState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetCurrentCinematicState");

	Params::SCCameraComponent_BPF_GetCurrentCinematicState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetDefaultCameraDataClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCAbstractCameraData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCAbstractCameraData> USCCameraComponent::BPF_GetDefaultCameraDataClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetDefaultCameraDataClass");

	Params::SCCameraComponent_BPF_GetDefaultCameraDataClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetDeltaTimeSlowMotionIndependent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   _fCurrentDt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetDeltaTimeSlowMotionIndependent(float _fCurrentDt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetDeltaTimeSlowMotionIndependent");

	Params::SCCameraComponent_BPF_GetDeltaTimeSlowMotionIndependent Parms{};

	Parms._fCurrentDt = _fCurrentDt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetIsCameraLDMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_GetIsCameraLDMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetIsCameraLDMode");

	Params::SCCameraComponent_BPF_GetIsCameraLDMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetMirrorCursorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetMirrorCursorValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetMirrorCursorValue");

	Params::SCCameraComponent_BPF_GetMirrorCursorValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetNumberOfValidTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraComponent::BPF_GetNumberOfValidTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetNumberOfValidTarget");

	Params::SCCameraComponent_BPF_GetNumberOfValidTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetOwnerCharacterController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* USCCameraComponent::BPF_GetOwnerCharacterController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetOwnerCharacterController");

	Params::SCCameraComponent_BPF_GetOwnerCharacterController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetPitchDeg
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetPitchDeg() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetPitchDeg");

	Params::SCCameraComponent_BPF_GetPitchDeg Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetPitchOnPlaceRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetPitchOnPlaceRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetPitchOnPlaceRad");

	Params::SCCameraComponent_BPF_GetPitchOnPlaceRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetPitchOnPlaceRadForService
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetPitchOnPlaceRadForService(const TSubclassOf<class USCCameraService>& _CameraServiceInstigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetPitchOnPlaceRadForService");

	Params::SCCameraComponent_BPF_GetPitchOnPlaceRadForService Parms{};

	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetPitchRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetPitchRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetPitchRad");

	Params::SCCameraComponent_BPF_GetPitchRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetRollDeg
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetRollDeg() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetRollDeg");

	Params::SCCameraComponent_BPF_GetRollDeg Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetRollOnPlaceRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetRollOnPlaceRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetRollOnPlaceRad");

	Params::SCCameraComponent_BPF_GetRollOnPlaceRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetRollRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetRollRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetRollRad");

	Params::SCCameraComponent_BPF_GetRollRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetScreenPercentSight
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCCameraComponent::BPF_GetScreenPercentSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetScreenPercentSight");

	Params::SCCameraComponent_BPF_GetScreenPercentSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetScreenPositionSight
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCCameraComponent::BPF_GetScreenPositionSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetScreenPositionSight");

	Params::SCCameraComponent_BPF_GetScreenPositionSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetValidTarget
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>*                  _arrayOfTarget                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USCCameraComponent::BPF_GetValidTarget(TArray<class AActor*>* _arrayOfTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetValidTarget");

	Params::SCCameraComponent_BPF_GetValidTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_arrayOfTarget != nullptr)
		*_arrayOfTarget = std::move(Parms._arrayOfTarget);
}


// Function SCCore.SCCameraComponent.BPF_GetWorldPositionSight
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutWorldLocation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutWorldDirection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseForwardAsWorldDirection                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_GetWorldPositionSight(const class APlayerController* _PlayerController, struct FVector* _vOutWorldLocation, struct FVector* _vOutWorldDirection, bool _bUseForwardAsWorldDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetWorldPositionSight");

	Params::SCCameraComponent_BPF_GetWorldPositionSight Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._bUseForwardAsWorldDirection = _bUseForwardAsWorldDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutWorldLocation != nullptr)
		*_vOutWorldLocation = std::move(Parms._vOutWorldLocation);

	if (_vOutWorldDirection != nullptr)
		*_vOutWorldDirection = std::move(Parms._vOutWorldDirection);

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetYawDeg
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetYawDeg() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetYawDeg");

	Params::SCCameraComponent_BPF_GetYawDeg Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetYawOnPlaceRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetYawOnPlaceRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetYawOnPlaceRad");

	Params::SCCameraComponent_BPF_GetYawOnPlaceRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetYawOnPlaceRadForService
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class USCCameraService>&_CameraServiceInstigator                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetYawOnPlaceRadForService(const TSubclassOf<class USCCameraService>& _CameraServiceInstigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetYawOnPlaceRadForService");

	Params::SCCameraComponent_BPF_GetYawOnPlaceRadForService Parms{};

	Parms._CameraServiceInstigator = _CameraServiceInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_GetYawRad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraComponent::BPF_GetYawRad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_GetYawRad");

	Params::SCCameraComponent_BPF_GetYawRad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsAnyLockActiveAndRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsAnyLockActiveAndRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsAnyLockActiveAndRunning");

	Params::SCCameraComponent_BPF_IsAnyLockActiveAndRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsDampingRemovedOnAlgorithm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsDampingRemovedOnAlgorithm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsDampingRemovedOnAlgorithm");

	Params::SCCameraComponent_BPF_IsDampingRemovedOnAlgorithm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsInCinematic
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsInCinematic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsInCinematic");

	Params::SCCameraComponent_BPF_IsInCinematic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsLookAtActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsLookAtActive(int32 _iHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsLookAtActive");

	Params::SCCameraComponent_BPF_IsLookAtActive Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsLookInputLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsLookInputLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsLookInputLocked");

	Params::SCCameraComponent_BPF_IsLookInputLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_IsWorldLocationInFront
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraComponent::BPF_IsWorldLocationInFront(const struct FVector& _vLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_IsWorldLocationInFront");

	Params::SCCameraComponent_BPF_IsWorldLocationInFront Parms{};

	Parms._vLocation = std::move(_vLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.BPF_TransformInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 _vInputVector                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCameraComponent::BPF_TransformInputVector(const struct FVector2D& _vInputVector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "BPF_TransformInputVector");

	Params::SCCameraComponent_BPF_TransformInputVector Parms{};

	Parms._vInputVector = std::move(_vInputVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.GetCameraDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USCCameraDB*                ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USCCameraDB* USCCameraComponent::GetCameraDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "GetCameraDB");

	Params::SCCameraComponent_GetCameraDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraComponent.GetDefaultTransitionInClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCCameraTransitionInfo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCCameraTransitionInfo> USCCameraComponent::GetDefaultTransitionInClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraComponent", "GetDefaultTransitionInClass");

	Params::SCCameraComponent_GetDefaultTransitionInClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ActorTargetScopedBinder.BPE_OnActorTargetInvalidated
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           _invalidatedTarget                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorTargetScopedBinder::BPE_OnActorTargetInvalidated(class AActor* _invalidatedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorTargetScopedBinder", "BPE_OnActorTargetInvalidated");

	Params::ActorTargetScopedBinder_BPE_OnActorTargetInvalidated Parms{};

	Parms._invalidatedTarget = _invalidatedTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.ActorTargetScopedBinder.BPE_OnActorTargetValid
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           _validTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorTargetScopedBinder::BPE_OnActorTargetValid(class AActor* _validTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorTargetScopedBinder", "BPE_OnActorTargetValid");

	Params::ActorTargetScopedBinder_BPE_OnActorTargetValid Parms{};

	Parms._validTarget = _validTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.ActorTargetScopedBinder.OnTargetDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           _destroyedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorTargetScopedBinder::OnTargetDestroyed(class AActor* _destroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorTargetScopedBinder", "OnTargetDestroyed");

	Params::ActorTargetScopedBinder_OnTargetDestroyed Parms{};

	Parms._destroyedActor = _destroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ActorTargetScopedBinder.BPF_GetActorTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AActor* UActorTargetScopedBinder::BPF_GetActorTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorTargetScopedBinder", "BPF_GetActorTarget");

	Params::ActorTargetScopedBinder_BPF_GetActorTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPE_InitService
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USCCameraComponent*               _cameraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPE_InitService(class USCCameraComponent* _cameraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_InitService");

	Params::SCCameraService_BPE_InitService Parms{};

	Parms._cameraComponent = _cameraComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraService.BPE_OnFirstFrame
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USCCameraService::BPE_OnFirstFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_OnFirstFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPE_OnLastFrame
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USCCameraService::BPE_OnLastFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_OnLastFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPE_OnUpdate
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPE_OnUpdate(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_OnUpdate");

	Params::SCCameraService_BPE_OnUpdate Parms{};

	Parms._fDt = _fDt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_AddPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fPitchDeg                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_AddPitch(float _fPitchDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_AddPitch");

	Params::SCCameraService_BPF_AddPitch Parms{};

	Parms._fPitchDeg = _fPitchDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_AddRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fRollDeg                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_AddRoll(float _fRollDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_AddRoll");

	Params::SCCameraService_BPF_AddRoll Parms{};

	Parms._fRollDeg = _fRollDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_AddRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraService::BPF_AddRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_AddRotationDeg");

	Params::SCCameraService_BPF_AddRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_AddYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fYawDeg                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_AddYaw(float _fYawDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_AddYaw");

	Params::SCCameraService_BPF_AddYaw Parms{};

	Parms._fYawDeg = _fYawDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetLocalRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetLocalRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetLocalRotationDeg");

	Params::SCCameraService_BPF_SetLocalRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fPitchDeg                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetPitch(float _fPitchDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetPitch");

	Params::SCCameraService_BPF_SetPitch Parms{};

	Parms._fPitchDeg = _fPitchDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetPitchOnPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fPitchDeg                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetPitchOnPlace(float _fPitchDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetPitchOnPlace");

	Params::SCCameraService_BPF_SetPitchOnPlace Parms{};

	Parms._fPitchDeg = _fPitchDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fRollDeg                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetRoll(float _fRollDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetRoll");

	Params::SCCameraService_BPF_SetRoll Parms{};

	Parms._fRollDeg = _fRollDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetRollOnPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fRollDeg                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetRollOnPlace(float _fRollDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetRollOnPlace");

	Params::SCCameraService_BPF_SetRollOnPlace Parms{};

	Parms._fRollDeg = _fRollDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetRotationDeg
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotatorDeg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetRotationDeg(const struct FRotator& _rotatorDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetRotationDeg");

	Params::SCCameraService_BPF_SetRotationDeg Parms{};

	Parms._rotatorDeg = std::move(_rotatorDeg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fYawDeg                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetYaw(float _fYawDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetYaw");

	Params::SCCameraService_BPF_SetYaw Parms{};

	Parms._fYawDeg = _fYawDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPF_SetYawOnPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fYawDeg                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_SetYawOnPlace(float _fYawDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_SetYawOnPlace");

	Params::SCCameraService_BPF_SetYawOnPlace Parms{};

	Parms._fYawDeg = _fYawDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraService.BPE_CheckConditionWantsToRun
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraService::BPE_CheckConditionWantsToRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_CheckConditionWantsToRun");

	Params::SCCameraService_BPE_CheckConditionWantsToRun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPE_GetDependencies
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<TSubclassOf<class USCCameraService>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class USCCameraService>> USCCameraService::BPE_GetDependencies() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPE_GetDependencies");

	Params::SCCameraService_BPE_GetDependencies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* USCCameraService::BPF_GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetCameraComponent");

	Params::SCCameraService_BPF_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetCurrentCameraData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USCCameraData*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USCCameraData* USCCameraService::BPF_GetCurrentCameraData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetCurrentCameraData");

	Params::SCCameraService_BPF_GetCurrentCameraData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetPitch");

	Params::SCCameraService_BPF_GetPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetPitchOnPlace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetPitchOnPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetPitchOnPlace");

	Params::SCCameraService_BPF_GetPitchOnPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetRoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetRoll");

	Params::SCCameraService_BPF_GetRoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetRollOnPlace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetRollOnPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetRollOnPlace");

	Params::SCCameraService_BPF_GetRollOnPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetYaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetYaw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetYaw");

	Params::SCCameraService_BPF_GetYaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_GetYawOnPlace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraService::BPF_GetYawOnPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_GetYawOnPlace");

	Params::SCCameraService_BPF_GetYawOnPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraService::BPF_IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_IsActive");

	Params::SCCameraService_BPF_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraService::BPF_IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_IsInitialized");

	Params::SCCameraService_BPF_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraService.BPF_LogStatusDebugMessage
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FName                             _title                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _additionalMessage                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraService::BPF_LogStatusDebugMessage(class FName _title, const class FString& _additionalMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraService", "BPF_LogStatusDebugMessage");

	Params::SCCameraService_BPF_LogStatusDebugMessage Parms{};

	Parms._title = _title;
	Parms._additionalMessage = std::move(_additionalMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AdaptiveSnapMontagePlayerHelper.BPF_FindAdaptiveSnapMontagePlayerContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_inContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAdaptiveSnapMontagePlayerContext*_outContext                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAdaptiveSnapMontagePlayerHelper::BPF_FindAdaptiveSnapMontagePlayerContext(const struct FGameplayAbilityTargetDataHandle& _inContext, struct FAdaptiveSnapMontagePlayerContext* _outContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AdaptiveSnapMontagePlayerHelper", "BPF_FindAdaptiveSnapMontagePlayerContext");

	Params::AdaptiveSnapMontagePlayerHelper_BPF_FindAdaptiveSnapMontagePlayerContext Parms{};

	Parms._inContext = std::move(_inContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outContext != nullptr)
		*_outContext = std::move(Parms._outContext);

	return Parms.ReturnValue;
}


// Function SCCore.AdaptiveSnapMontagePlayerHelper.BPF_MakeAdaptiveSnapMontagePlayerContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_inContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMotionWarpingMontagePlayerConfiguration*_configuration                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UAdaptiveSnapMontagePlayerHelper::BPF_MakeAdaptiveSnapMontagePlayerContext(const struct FGameplayAbilityTargetDataHandle& _inContext, class UMotionWarpingMontagePlayerConfiguration* _configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AdaptiveSnapMontagePlayerHelper", "BPF_MakeAdaptiveSnapMontagePlayerContext");

	Params::AdaptiveSnapMontagePlayerHelper_BPF_MakeAdaptiveSnapMontagePlayerContext Parms{};

	Parms._inContext = std::move(_inContext);
	Parms._configuration = _configuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBlueprintLog.BPFLog
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _targetSelf                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _log                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDisplayLevel                           _eDisplayLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bViewportDisplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _viewportColor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBlueprintLog::BPFLog(const class UObject* _targetSelf, const class FString& _log, EDisplayLevel _eDisplayLevel, bool _bViewportDisplay, const struct FLinearColor& _viewportColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBlueprintLog", "BPFLog");

	Params::SCBlueprintLog_BPFLog Parms{};

	Parms._targetSelf = _targetSelf;
	Parms._log = std::move(_log);
	Parms._eDisplayLevel = _eDisplayLevel;
	Parms._bViewportDisplay = _bViewportDisplay;
	Parms._viewportColor = std::move(_viewportColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBlueprintLog.BPFLogCategory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _text                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _categoryName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDisplayLevel                           _eDisplayLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBlueprintLog::BPFLogCategory(const class FString& _text, class FName _categoryName, EDisplayLevel _eDisplayLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBlueprintLog", "BPFLogCategory");

	Params::SCBlueprintLog_BPFLogCategory Parms{};

	Parms._text = std::move(_text);
	Parms._categoryName = _categoryName;
	Parms._eDisplayLevel = _eDisplayLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraBaseLockService.BPE_IsLockAlgoAvailable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraBaseLockService::BPE_IsLockAlgoAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraBaseLockService", "BPE_IsLockAlgoAvailable");

	Params::SCCameraBaseLockService_BPE_IsLockAlgoAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraBaseLockService.BPE_IsLockServiceActiveAndRunning
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraBaseLockService::BPE_IsLockServiceActiveAndRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraBaseLockService", "BPE_IsLockServiceActiveAndRunning");

	Params::SCCameraBaseLockService_BPE_IsLockServiceActiveAndRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraBearerInterface.BPE_GetActorRefTransform
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ISCCameraBearerInterface::BPE_GetActorRefTransform(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCCameraBearerInterface", "BPE_GetActorRefTransform");

	Params::SCCameraBearerInterface_BPE_GetActorRefTransform Parms{};

	Parms._fDt = _fDt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraHolderInterface.BPE_SetupCameraComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USCCameraComponent*               _cameraComp                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISCCameraHolderInterface::BPE_SetupCameraComponent(class USCCameraComponent* _cameraComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCCameraHolderInterface", "BPE_SetupCameraComponent");

	Params::SCCameraHolderInterface_BPE_SetupCameraComponent Parms{};

	Parms._cameraComp = _cameraComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraHolderInterface.BPF_GetCameraComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* ISCCameraHolderInterface::BPF_GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCCameraHolderInterface", "BPF_GetCameraComponent");

	Params::SCCameraHolderInterface_BPF_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbstractCameraData.BPE_OnPulled
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class USCCameraComponent*         _cameraRef                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbstractCameraData::BPE_OnPulled(const class USCCameraComponent* _cameraRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbstractCameraData", "BPE_OnPulled");

	Params::SCAbstractCameraData_BPE_OnPulled Parms{};

	Parms._cameraRef = _cameraRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCAbstractCameraData.BPE_OnReleased
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class USCCameraComponent*         _cameraRef                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbstractCameraData::BPE_OnReleased(const class USCCameraComponent* _cameraRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbstractCameraData", "BPE_OnReleased");

	Params::SCAbstractCameraData_BPE_OnReleased Parms{};

	Parms._cameraRef = _cameraRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraMixerData.BPE_Init
// (Event, Protected, BlueprintEvent)

void USCCameraMixerData::BPE_Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPE_Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCCameraMixerData.BPE_Shutdown
// (Event, Protected, BlueprintEvent)

void USCCameraMixerData::BPE_Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPE_Shutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCCameraMixerData.BPE_UpdateBlendRatio
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bNoDamping                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMixerData::BPE_UpdateBlendRatio(float _fDt, bool _bNoDamping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPE_UpdateBlendRatio");

	Params::SCCameraMixerData_BPE_UpdateBlendRatio Parms{};

	Parms._fDt = _fDt;
	Parms._bNoDamping = _bNoDamping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMixerData.BPF_SetBlendRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fNewRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMixerData::BPF_SetBlendRatio(float _fNewRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPF_SetBlendRatio");

	Params::SCCameraMixerData_BPF_SetBlendRatio Parms{};

	Parms._fNewRatio = _fNewRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMixerData.BPF_GetBlendRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraMixerData::BPF_GetBlendRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPF_GetBlendRatio");

	Params::SCCameraMixerData_BPF_GetBlendRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerData.BPF_GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* USCCameraMixerData::BPF_GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPF_GetCameraComponent");

	Params::SCCameraMixerData_BPF_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerData.BPF_GetEndCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCAbstractCameraData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCAbstractCameraData> USCCameraMixerData::BPF_GetEndCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPF_GetEndCamera");

	Params::SCCameraMixerData_BPF_GetEndCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerData.BPF_GetStartCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCAbstractCameraData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCAbstractCameraData> USCCameraMixerData::BPF_GetStartCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerData", "BPF_GetStartCamera");

	Params::SCCameraMixerData_BPF_GetStartCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerDataBool.BPE_GetBool
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    _bNoDamping                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMixerDataBool::BPE_GetBool(bool _bNoDamping) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerDataBool", "BPE_GetBool");

	Params::SCCameraMixerDataBool_BPE_GetBool Parms{};

	Parms._bNoDamping = _bNoDamping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerDataBool.BPF_Blend
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// float                                   _fTarget                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDelay                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eBlendType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMixerDataBool::BPF_Blend(float _fTarget, float _fDelay, ESCBlendType _eBlendType, class UCurveFloat* _blendCurve) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerDataBool", "BPF_Blend");

	Params::SCCameraMixerDataBool_BPF_Blend Parms{};

	Parms._fTarget = _fTarget;
	Parms._fDelay = _fDelay;
	Parms._eBlendType = _eBlendType;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMixerDataBool.GetOldValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMixerDataBool::GetOldValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerDataBool", "GetOldValue");

	Params::SCCameraMixerDataBool_GetOldValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLockService.BPF_OverrideLockBehavior
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCCameraLookAtServiceBehaviorTime&_timeConfig                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSCCameraLookAtServiceBehaviorConfig&_behaviorConfig                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCCameraLockService::BPF_OverrideLockBehavior(const struct FSCCameraLookAtServiceBehaviorTime& _timeConfig, const struct FSCCameraLookAtServiceBehaviorConfig& _behaviorConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLockService", "BPF_OverrideLockBehavior");

	Params::SCCameraLockService_BPF_OverrideLockBehavior Parms{};

	Parms._timeConfig = std::move(_timeConfig);
	Parms._behaviorConfig = std::move(_behaviorConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLockService.BPF_OverrideLockManualCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fNewCooldown                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLockService::BPF_OverrideLockManualCooldown(float _fNewCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLockService", "BPF_OverrideLockManualCooldown");

	Params::SCCameraLockService_BPF_OverrideLockManualCooldown Parms{};

	Parms._fNewCooldown = _fNewCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLockService.BPF_ResetLockBehaviorToDefault
// (Final, Native, Public, BlueprintCallable)

void USCCameraLockService::BPF_ResetLockBehaviorToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLockService", "BPF_ResetLockBehaviorToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLockService.BPF_ResetLockManualCooldownToDefault
// (Final, Native, Public, BlueprintCallable)

void USCCameraLockService::BPF_ResetLockManualCooldownToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLockService", "BPF_ResetLockManualCooldownToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_FreezeMirrorUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _contextString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraMirrorCursorManagementService::BPF_FreezeMirrorUpdate(const class FString& _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_FreezeMirrorUpdate");

	Params::SCCameraMirrorCursorManagementService_BPF_FreezeMirrorUpdate Parms{};

	Parms._contextString = std::move(_contextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_FreezeNewMirrorConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _contextString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDelay                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraMirrorCursorManagementService::BPF_FreezeNewMirrorConfig(const class FString& _contextString, float _fDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_FreezeNewMirrorConfig");

	Params::SCCameraMirrorCursorManagementService_BPF_FreezeNewMirrorConfig Parms{};

	Parms._contextString = std::move(_contextString);
	Parms._fDelay = _fDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_LaunchUpdateMirror
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCCameraMirrorManagementConfig&_config                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCameraMirrorCursorManagementService::BPF_LaunchUpdateMirror(const struct FSCCameraMirrorManagementConfig& _config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_LaunchUpdateMirror");

	Params::SCCameraMirrorCursorManagementService_BPF_LaunchUpdateMirror Parms{};

	Parms._config = std::move(_config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_UnFreezeMirrorUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMirrorCursorManagementService::BPF_UnFreezeMirrorUpdate(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_UnFreezeMirrorUpdate");

	Params::SCCameraMirrorCursorManagementService_BPF_UnFreezeMirrorUpdate Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_UnFreezeNewMirrorConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMirrorCursorManagementService::BPF_UnFreezeNewMirrorConfig(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_UnFreezeNewMirrorConfig");

	Params::SCCameraMirrorCursorManagementService_BPF_UnFreezeNewMirrorConfig Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_UpdateCurrentSpringSpeedValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMirrorCursorManagementService::BPF_UpdateCurrentSpringSpeedValue(float _fNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_UpdateCurrentSpringSpeedValue");

	Params::SCCameraMirrorCursorManagementService_BPF_UpdateCurrentSpringSpeedValue Parms{};

	Parms._fNewValue = _fNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_UpdateCurrentTargettedValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraMirrorCursorManagementService::BPF_UpdateCurrentTargettedValue(float _fNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_UpdateCurrentTargettedValue");

	Params::SCCameraMirrorCursorManagementService_BPF_UpdateCurrentTargettedValue Parms{};

	Parms._fNewValue = _fNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_GetCurrentConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSCCameraMirrorManagementConfigReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSCCameraMirrorManagementConfig USCCameraMirrorCursorManagementService::BPF_GetCurrentConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_GetCurrentConfig");

	Params::SCCameraMirrorCursorManagementService_BPF_GetCurrentConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_GetTargettedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraMirrorCursorManagementService::BPF_GetTargettedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_GetTargettedValue");

	Params::SCCameraMirrorCursorManagementService_BPF_GetTargettedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_IsCurrentValueMirror
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMirrorCursorManagementService::BPF_IsCurrentValueMirror() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_IsCurrentValueMirror");

	Params::SCCameraMirrorCursorManagementService_BPF_IsCurrentValueMirror Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_IsNewMirrorFrozen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMirrorCursorManagementService::BPF_IsNewMirrorFrozen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_IsNewMirrorFrozen");

	Params::SCCameraMirrorCursorManagementService_BPF_IsNewMirrorFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_IsTargettedValueMirror
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMirrorCursorManagementService::BPF_IsTargettedValueMirror() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_IsTargettedValueMirror");

	Params::SCCameraMirrorCursorManagementService_BPF_IsTargettedValueMirror Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMirrorCursorManagementService.BPF_IsUpdateMirrorFrozen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraMirrorCursorManagementService::BPF_IsUpdateMirrorFrozen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMirrorCursorManagementService", "BPF_IsUpdateMirrorFrozen");

	Params::SCCameraMirrorCursorManagementService_BPF_IsUpdateMirrorFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePickerContainer.GetSlotEditorDesc
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FAnimSequencePickerSlotInstance&_condition                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAnimSequencePickerContainer::GetSlotEditorDesc(const struct FAnimSequencePickerSlotInstance& _condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimSequencePickerContainer", "GetSlotEditorDesc");

	Params::AnimSequencePickerContainer_GetSlotEditorDesc Parms{};

	Parms._condition = std::move(_condition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePickerContainerReference.GetSlotEditorDesc
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FAnimSequencePickerSlotInstance&_condition                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAnimSequencePickerContainerReference::GetSlotEditorDesc(const struct FAnimSequencePickerSlotInstance& _condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimSequencePickerContainerReference", "GetSlotEditorDesc");

	Params::AnimSequencePickerContainerReference_GetSlotEditorDesc Parms{};

	Parms._condition = std::move(_condition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePickerHelpers.BPF_MakeAnimSequencePickerInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UAnimSequencePicker>  _animSequencePicker                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimSequencePickerInstance*     _instance                                              (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAnimSequencePickerHelpers::BPF_MakeAnimSequencePickerInstance(TSubclassOf<class UAnimSequencePicker> _animSequencePicker, struct FAnimSequencePickerInstance* _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePickerHelpers", "BPF_MakeAnimSequencePickerInstance");

	Params::AnimSequencePickerHelpers_BPF_MakeAnimSequencePickerInstance Parms{};

	Parms._animSequencePicker = _animSequencePicker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_instance != nullptr)
		*_instance = std::move(Parms._instance);
}


// Function SCCore.AnimSequencePickerHelpers.BPF_PickAnimSequence
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimSequencePickerInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _montageConfiguration                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos*          _outSequenceInfos                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    _bPrintDebug                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          _debugObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimSequencePickerHelpers::BPF_PickAnimSequence(const struct FAnimSequencePickerInstance& _instance, const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _playerContext, class UBasicMontagePlayerConfiguration* _montageConfiguration, struct FAnimSequencePlayInfos* _outSequenceInfos, bool _bPrintDebug, class UObject* _debugObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePickerHelpers", "BPF_PickAnimSequence");

	Params::AnimSequencePickerHelpers_BPF_PickAnimSequence Parms{};

	Parms._instance = std::move(_instance);
	Parms._actor = _actor;
	Parms._playerContext = std::move(_playerContext);
	Parms._montageConfiguration = _montageConfiguration;
	Parms._bPrintDebug = _bPrintDebug;
	Parms._debugObject = _debugObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSequenceInfos != nullptr)
		*_outSequenceInfos = std::move(Parms._outSequenceInfos);
}


// Function SCCore.AnimSequencePickerHelpers.BPF_PickSlotAnimSequence
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UAnimSequencePickerSlotContainer>_picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (Parm, NativeAccessSpecifierPublic)
// class FName                             _slot                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicMontagePlayerConfiguration* _montageConfiguration                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos*          _outSequenceInfos                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    _bPrintDebug                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          _debugObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimSequencePickerHelpers::BPF_PickSlotAnimSequence(TSubclassOf<class UAnimSequencePickerSlotContainer> _picker, const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _playerContext, class FName _slot, class UBasicMontagePlayerConfiguration* _montageConfiguration, struct FAnimSequencePlayInfos* _outSequenceInfos, bool _bPrintDebug, class UObject* _debugObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePickerHelpers", "BPF_PickSlotAnimSequence");

	Params::AnimSequencePickerHelpers_BPF_PickSlotAnimSequence Parms{};

	Parms._picker = _picker;
	Parms._actor = _actor;
	Parms._playerContext = std::move(_playerContext);
	Parms._slot = _slot;
	Parms._montageConfiguration = _montageConfiguration;
	Parms._bPrintDebug = _bPrintDebug;
	Parms._debugObject = _debugObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSequenceInfos != nullptr)
		*_outSequenceInfos = std::move(Parms._outSequenceInfos);
}


// Function SCCore.AnimSequencePlayInfosHelpers.BPF_GetSnapInfoFromAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequencePlayInfos&    _playInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequenceSnapInfos*          _outSnapInfos                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimSequencePlayInfosHelpers::BPF_GetSnapInfoFromAnimSequencePlayInfos(const struct FAnimSequencePlayInfos& _playInfos, struct FAnimSequenceSnapInfos* _outSnapInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePlayInfosHelpers", "BPF_GetSnapInfoFromAnimSequencePlayInfos");

	Params::AnimSequencePlayInfosHelpers_BPF_GetSnapInfoFromAnimSequencePlayInfos Parms{};

	Parms._playInfos = std::move(_playInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSnapInfos != nullptr)
		*_outSnapInfos = std::move(Parms._outSnapInfos);

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePlayInfosHelpers.BPF_GetSnapPredictionFromAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequencePlayInfos&    _playInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequenceSnapPrediction*     _outSnapPrediction                                     (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimSequencePlayInfosHelpers::BPF_GetSnapPredictionFromAnimSequencePlayInfos(const struct FAnimSequencePlayInfos& _playInfos, struct FAnimSequenceSnapPrediction* _outSnapPrediction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePlayInfosHelpers", "BPF_GetSnapPredictionFromAnimSequencePlayInfos");

	Params::AnimSequencePlayInfosHelpers_BPF_GetSnapPredictionFromAnimSequencePlayInfos Parms{};

	Parms._playInfos = std::move(_playInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSnapPrediction != nullptr)
		*_outSnapPrediction = std::move(Parms._outSnapPrediction);

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePlayInfosHelpers.BPF_GetStartDirectionFromAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequencePlayInfos&    _playInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector*                         _outStartDirection                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimSequencePlayInfosHelpers::BPF_GetStartDirectionFromAnimSequencePlayInfos(const struct FAnimSequencePlayInfos& _playInfos, struct FVector* _outStartDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePlayInfosHelpers", "BPF_GetStartDirectionFromAnimSequencePlayInfos");

	Params::AnimSequencePlayInfosHelpers_BPF_GetStartDirectionFromAnimSequencePlayInfos Parms{};

	Parms._playInfos = std::move(_playInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outStartDirection != nullptr)
		*_outStartDirection = std::move(Parms._outStartDirection);

	return Parms.ReturnValue;
}


// Function SCCore.AnimSequencePlayInfosHelpers.BPF_SetAnimSequencePlayInfosStartDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vStartDirection                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos&          _playInfos                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAnimSequencePlayInfosHelpers::BPF_SetAnimSequencePlayInfosStartDirection(const struct FVector& _vStartDirection, struct FAnimSequencePlayInfos& _playInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSequencePlayInfosHelpers", "BPF_SetAnimSequencePlayInfosStartDirection");

	Params::AnimSequencePlayInfosHelpers_BPF_SetAnimSequencePlayInfosStartDirection Parms{};

	Parms._vStartDirection = std::move(_vStartDirection);
	Parms._playInfos = std::move(_playInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_playInfos = std::move(Parms._playInfos);
}


// Function SCCore.SCCameraManualService.BPF_GetDurationSinceLastInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraManualService::BPF_GetDurationSinceLastInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraManualService", "BPF_GetDurationSinceLastInput");

	Params::SCCameraManualService_BPF_GetDurationSinceLastInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncImage.BPF_Clear
// (Final, Native, Public, BlueprintCallable)

void UAsyncImage::BPF_Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncImage", "BPF_Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncImage.BPF_LoadMaterialAssetAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>_asset                                                 (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncImage::BPF_LoadMaterialAssetAsync(TSoftObjectPtr<class UMaterialInterface> _asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncImage", "BPF_LoadMaterialAssetAsync");

	Params::AsyncImage_BPF_LoadMaterialAssetAsync Parms{};

	Parms._asset = _asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncImage.BPF_LoadTextureAssetAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        _asset                                                 (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMatchSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iQueueID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForce                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncImage::BPF_LoadTextureAssetAsync(TSoftObjectPtr<class UTexture2D> _asset, bool _bMatchSize, int32 _iQueueID, bool _bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncImage", "BPF_LoadTextureAssetAsync");

	Params::AsyncImage_BPF_LoadTextureAssetAsync Parms{};

	Parms._asset = _asset;
	Parms._bMatchSize = _bMatchSize;
	Parms._iQueueID = _iQueueID;
	Parms._bForce = _bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncImage.BPF_SetMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               _asset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncImage::BPF_SetMaterial(class UMaterialInterface* _asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncImage", "BPF_SetMaterial");

	Params::AsyncImage_BPF_SetMaterial Parms{};

	Parms._asset = _asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncImage.BPF_SetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       _asset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMatchSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncImage::BPF_SetTexture(class UTexture2D* _asset, bool _bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncImage", "BPF_SetTexture");

	Params::AsyncImage_BPF_SetTexture Parms{};

	Parms._asset = _asset;
	Parms._bMatchSize = _bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTaskBlend.BPF_AsyncAngleBlend
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  _fInOutValue                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTarget                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eBlendType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskBlend**                 _task                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUpdateRefValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskBlend*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskBlend* UAsyncTaskBlend::BPF_AsyncAngleBlend(class UObject* _owner, float& _fInOutValue, float _fDuration, float _fTarget, ESCBlendType _eBlendType, class UCurveFloat* _blendCurve, class UAsyncTaskBlend** _task, bool _bUpdateRefValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskBlend", "BPF_AsyncAngleBlend");

	Params::AsyncTaskBlend_BPF_AsyncAngleBlend Parms{};

	Parms._owner = _owner;
	Parms._fInOutValue = _fInOutValue;
	Parms._fDuration = _fDuration;
	Parms._fTarget = _fTarget;
	Parms._eBlendType = _eBlendType;
	Parms._blendCurve = _blendCurve;
	Parms._bUpdateRefValue = _bUpdateRefValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_fInOutValue = Parms._fInOutValue;

	if (_task != nullptr)
		*_task = Parms._task;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTaskBlend.BPF_Stop
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UAsyncTaskBlend*                  _blend                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncTaskBlend::BPF_Stop(class UAsyncTaskBlend* _blend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskBlend", "BPF_Stop");

	Params::AsyncTaskBlend_BPF_Stop Parms{};

	Parms._blend = _blend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MenuAsyncActionBase.BPF_Cancel
// (Final, Native, Public, BlueprintCallable)

void UMenuAsyncActionBase::BPF_Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuAsyncActionBase", "BPF_Cancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MenuAsyncActionBase.OnCurrentMenuChanged
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _ePrevMenu                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCMenuWidget>        _eNewMenu                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuAsyncActionBase::OnCurrentMenuChanged(TSubclassOf<class USCMenuWidget> _ePrevMenu, TSubclassOf<class USCMenuWidget> _eNewMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuAsyncActionBase", "OnCurrentMenuChanged");

	Params::MenuAsyncActionBase_OnCurrentMenuChanged Parms{};

	Parms._ePrevMenu = _ePrevMenu;
	Parms._eNewMenu = _eNewMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTaskPlayAnimation.BPF_PlayTransitionAnimationAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _menu                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 _inAnimation                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    _ePlayMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskPlayAnimation*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskPlayAnimation* UAsyncTaskPlayAnimation::BPF_PlayTransitionAnimationAsync(class UObject* _menu, class UWidgetAnimation* _inAnimation, EUMGSequencePlayMode _ePlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskPlayAnimation", "BPF_PlayTransitionAnimationAsync");

	Params::AsyncTaskPlayAnimation_BPF_PlayTransitionAnimationAsync Parms{};

	Parms._menu = _menu;
	Parms._inAnimation = _inAnimation;
	Parms._ePlayMode = _ePlayMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTaskPlayAnimation.OnTransitionFinished
// (Final, Native, Public)
// Parameters:
// class USCMenuWidget*                    _menu                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncTaskPlayAnimation::OnTransitionFinished(class USCMenuWidget* _menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTaskPlayAnimation", "OnTransitionFinished");

	Params::AsyncTaskPlayAnimation_OnTransitionFinished Parms{};

	Parms._menu = _menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTaskTagChanged.ListenForTagsChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          _abilitySystemComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _tags                                                  (Parm, NativeAccessSpecifierPublic)
// class UAsyncTaskTagChanged*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskTagChanged* UAsyncTaskTagChanged::ListenForTagsChange(class UAbilitySystemComponent* _abilitySystemComponent, const struct FGameplayTagContainer& _tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskTagChanged", "ListenForTagsChange");

	Params::AsyncTaskTagChanged_ListenForTagsChange Parms{};

	Parms._abilitySystemComponent = _abilitySystemComponent;
	Parms._tags = std::move(_tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTaskTagChanged.EndTask
// (Final, Native, Public, BlueprintCallable)

void UAsyncTaskTagChanged::EndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTaskTagChanged", "EndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTaskTick.BPF_Tick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAsyncTaskTick*                   _existingTask                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          _menu                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fFrequency                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskTick*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskTick* UAsyncTaskTick::BPF_Tick(class UAsyncTaskTick* _existingTask, class UObject* _menu, float _fFrequency, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskTick", "BPF_Tick");

	Params::AsyncTaskTick_BPF_Tick Parms{};

	Parms._existingTask = _existingTask;
	Parms._menu = _menu;
	Parms._fFrequency = _fFrequency;
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTaskTick.BPF_Stop
// (Final, Native, Public, BlueprintCallable)

void UAsyncTaskTick::BPF_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTaskTick", "BPF_Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTaskWait.BPF_Wait
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _menu                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskWait*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskWait* UAsyncTaskWait::BPF_Wait(class UObject* _menu, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTaskWait", "BPF_Wait");

	Params::AsyncTaskWait_BPF_Wait Parms{};

	Parms._menu = _menu;
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTask_WatchInput.BPF_WatchInputActivation
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTask_WatchInput*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTask_WatchInput* UAsyncTask_WatchInput::BPF_WatchInputActivation(class ASCBasePlayerController* _PlayerController, class USCInputAction* _inputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncTask_WatchInput", "BPF_WatchInputActivation");

	Params::AsyncTask_WatchInput_BPF_WatchInputActivation Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._inputAction = _inputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AsyncTask_WatchInput.EndTask
// (Final, Native, Private, BlueprintCallable)

void UAsyncTask_WatchInput::EndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTask_WatchInput", "EndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AsyncTask_WatchInput.OnActionActivateOrDeactivate
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class USCInputAction*             _inputAction                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputActionState&         _inputActionState                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAsyncTask_WatchInput::OnActionActivateOrDeactivate(const class USCInputAction* _inputAction, const struct FInputActionState& _inputActionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTask_WatchInput", "OnActionActivateOrDeactivate");

	Params::AsyncTask_WatchInput_OnActionActivateOrDeactivate Parms{};

	Parms._inputAction = _inputAction;
	Parms._inputActionState = std::move(_inputActionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_GetGlobalViewModelInstance
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMVVMViewModelBase>   _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _contextName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMVVMViewModelBase*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMVVMViewModelBase* USCUserWidget::BPF_GetGlobalViewModelInstance(const class UObject* _worldContextObject, TSubclassOf<class UMVVMViewModelBase> _class, class FName _contextName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserWidget", "BPF_GetGlobalViewModelInstance");

	Params::SCUserWidget_BPF_GetGlobalViewModelInstance Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._class = _class;
	Parms._contextName = _contextName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPE_BindToDelegates
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    _bPawnOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_BindToDelegates(bool _bPawnOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_BindToDelegates");

	Params::SCUserWidget_BPE_BindToDelegates Parms{};

	Parms._bPawnOnly = _bPawnOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_CreateData
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UWidgetData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetData* USCUserWidget::BPE_CreateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_CreateData");

	Params::SCUserWidget_BPE_CreateData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPE_NotifyWidgetEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_dataHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_NotifyWidgetEvent(const struct FGameplayTag& _tag, const struct FGameplayAbilityTargetDataHandle& _dataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_NotifyWidgetEvent");

	Params::SCUserWidget_BPE_NotifyWidgetEvent Parms{};

	Parms._tag = std::move(_tag);
	Parms._dataHandle = std::move(_dataHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnActionPressed
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class USCInputAction*             _action                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputActionState&         _listenerState                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_OnActionPressed(const class USCInputAction* _action, const struct FInputActionState& _listenerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnActionPressed");

	Params::SCUserWidget_BPE_OnActionPressed Parms{};

	Parms._action = _action;
	Parms._listenerState = std::move(_listenerState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnCinematicFinished
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class ASCLevelSequenceActor*      _sequenceActor                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_OnCinematicFinished(const class ASCLevelSequenceActor* _sequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnCinematicFinished");

	Params::SCUserWidget_BPE_OnCinematicFinished Parms{};

	Parms._sequenceActor = _sequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnCinematicStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class ASCLevelSequenceActor*      _sequenceActor                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_OnCinematicStarted(const class ASCLevelSequenceActor* _sequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnCinematicStarted");

	Params::SCUserWidget_BPE_OnCinematicStarted Parms{};

	Parms._sequenceActor = _sequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnCultureChanged
// (Native, Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnCultureChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnCultureChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPE_OnDataUpdated
// (Native, Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPE_OnDeselected
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnDeselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnDeselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnGetFromPool
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnGetFromPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnGetFromPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnHidden
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnReturnToPool
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnReturnToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnReturnToPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnSelected
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnSynchronizeProperties
// (Event, Public, BlueprintEvent)

void USCUserWidget::BPE_OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_OnUIInputModeChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EUIInputModes                           _eMode                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInit                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_OnUIInputModeChanged(EUIInputModes _eMode, bool _bInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnUIInputModeChanged");

	Params::SCUserWidget_BPE_OnUIInputModeChanged Parms{};

	Parms._eMode = _eMode;
	Parms._bInit = _bInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnViewModelPropertySet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USCViewModel*                     _viewModel                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPE_OnViewModelPropertySet(class USCViewModel* _viewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnViewModelPropertySet");

	Params::SCUserWidget_BPE_OnViewModelPropertySet Parms{};

	Parms._viewModel = _viewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCUserWidget.BPE_OnVisible
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_OnVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_OnVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPE_UnbindFromDelegates
// (Event, Protected, BlueprintEvent)

void USCUserWidget::BPE_UnbindFromDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_UnbindFromDelegates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCUserWidget.BPF_ComputeMenuActionContexts
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    _Recursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_ComputeMenuActionContexts(bool _Recursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_ComputeMenuActionContexts");

	Params::SCUserWidget_BPF_ComputeMenuActionContexts Parms{};

	Parms._Recursive = _Recursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidgetData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetData* USCUserWidget::BPF_GetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetData");

	Params::SCUserWidget_BPF_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetIsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_GetIsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetIsSelected");

	Params::SCUserWidget_BPF_GetIsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetUISettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCUISettings*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCUISettings* USCUserWidget::BPF_GetUISettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetUISettings");

	Params::SCUserWidget_BPF_GetUISettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_ListenInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inAction                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eWatchTrigger                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPassive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bConsume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)>_callback                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_ListenInputAction(class USCInputAction* _inAction, EInputWatchTrigger _eWatchTrigger, bool _bPassive, bool _bConsume, TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)> _callback, int32 _iPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_ListenInputAction");

	Params::SCUserWidget_BPF_ListenInputAction Parms{};

	Parms._inAction = _inAction;
	Parms._eWatchTrigger = _eWatchTrigger;
	Parms._bPassive = _bPassive;
	Parms._bConsume = _bConsume;
	Parms._callback = _callback;
	Parms._iPriority = _iPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_NotifyDataUpdated
// (Final, Native, Public, BlueprintCallable)

void USCUserWidget::BPF_NotifyDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_NotifyDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_NotifyDataUpdatedToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     _root                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_NotifyDataUpdatedToChildren(class UPanelWidget* _root)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_NotifyDataUpdatedToChildren");

	Params::SCUserWidget_BPF_NotifyDataUpdatedToChildren Parms{};

	Parms._root = _root;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_NotifyWidgetEvent
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_dataHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_NotifyWidgetEvent(const struct FGameplayTag& _tag, const struct FGameplayAbilityTargetDataHandle& _dataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_NotifyWidgetEvent");

	Params::SCUserWidget_BPF_NotifyWidgetEvent Parms{};

	Parms._tag = std::move(_tag);
	Parms._dataHandle = std::move(_dataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_PlayAnimationFromCurrentTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 _inAnimation                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iNumLoopsToPlay                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    _ePlayMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_PlayAnimationFromCurrentTime(class UWidgetAnimation* _inAnimation, int32 _iNumLoopsToPlay, EUMGSequencePlayMode _ePlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_PlayAnimationFromCurrentTime");

	Params::SCUserWidget_BPF_PlayAnimationFromCurrentTime Parms{};

	Parms._inAnimation = _inAnimation;
	Parms._iNumLoopsToPlay = _iNumLoopsToPlay;
	Parms._ePlayMode = _ePlayMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_RefreshMenuActionContext
// (Final, Native, Public, BlueprintCallable)

void USCUserWidget::BPF_RefreshMenuActionContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_RefreshMenuActionContext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_RefreshParentMenuFocus
// (Final, Native, Public, BlueprintCallable)

void USCUserWidget::BPF_RefreshParentMenuFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_RefreshParentMenuFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_RegisterMenuAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCMenuAction*                    _menuAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_RegisterMenuAction(class USCInputAction* _inputAction, class USCMenuAction* _menuAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_RegisterMenuAction");

	Params::SCUserWidget_BPF_RegisterMenuAction Parms{};

	Parms._inputAction = _inputAction;
	Parms._menuAction = _menuAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetData*                      _data                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_SetData(class UWidgetData* _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_SetData");

	Params::SCUserWidget_BPF_SetData Parms{};

	Parms._data = _data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_SetSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForce                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_SetSelected(bool _bSelected, bool _bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_SetSelected");

	Params::SCUserWidget_BPF_SetSelected Parms{};

	Parms._bSelected = _bSelected;
	Parms._bForce = _bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPF_StopListeningInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inAction                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eWatchTrigger                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)>_callback                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserWidget::BPF_StopListeningInputAction(class USCInputAction* _inAction, EInputWatchTrigger _eWatchTrigger, TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)> _callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_StopListeningInputAction");

	Params::SCUserWidget_BPF_StopListeningInputAction Parms{};

	Parms._inAction = _inAction;
	Parms._eWatchTrigger = _eWatchTrigger;
	Parms._callback = _callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.OnDataUpdated
// (Native, Protected)

void USCUserWidget::OnDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "OnDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUserWidget.BPE_GetMenuActionNameOverride
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class USCInputAction*             _action                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USCUserWidget::BPE_GetMenuActionNameOverride(const class USCInputAction* _action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_GetMenuActionNameOverride");

	Params::SCUserWidget_BPE_GetMenuActionNameOverride Parms{};

	Parms._action = _action;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPE_ShouldDisableMenuAction
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class USCInputAction*             _action                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPE_ShouldDisableMenuAction(const class USCInputAction* _action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_ShouldDisableMenuAction");

	Params::SCUserWidget_BPE_ShouldDisableMenuAction Parms{};

	Parms._action = _action;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPE_ShouldHideMenuAction
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class USCInputAction*             _action                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPE_ShouldHideMenuAction(const class USCInputAction* _action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_ShouldHideMenuAction");

	Params::SCUserWidget_BPE_ShouldHideMenuAction Parms{};

	Parms._action = _action;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPE_ShouldRefreshMenuActionContextOnFocusChange
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPE_ShouldRefreshMenuActionContextOnFocusChange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPE_ShouldRefreshMenuActionContextOnFocusChange");

	Params::SCUserWidget_BPE_ShouldRefreshMenuActionContextOnFocusChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_CheckControllerHasAnyFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_CheckControllerHasAnyFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_CheckControllerHasAnyFocus");

	Params::SCUserWidget_BPF_CheckControllerHasAnyFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCAbilitySystemComponent* USCUserWidget::BPF_GetAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetAbilitySystemComponent");

	Params::SCUserWidget_BPF_GetAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASCCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASCCharacter* USCUserWidget::BPF_GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetCharacter");

	Params::SCUserWidget_BPF_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetComponentByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCWidgetComponent>   _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCWidgetComponent*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCWidgetComponent* USCUserWidget::BPF_GetComponentByClass(TSubclassOf<class USCWidgetComponent> _class) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetComponentByClass");

	Params::SCUserWidget_BPF_GetComponentByClass Parms{};

	Parms._class = _class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetCurrentWorld
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* USCUserWidget::BPF_GetCurrentWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetCurrentWorld");

	Params::SCUserWidget_BPF_GetCurrentWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetInputActionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USCInputAction*             _inAction                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionState                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInputActionState USCUserWidget::BPF_GetInputActionState(const class USCInputAction* _inAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetInputActionState");

	Params::SCUserWidget_BPF_GetInputActionState Parms{};

	Parms._inAction = _inAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetLocalPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCUserWidget::BPF_GetLocalPlayerIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetLocalPlayerIndex");

	Params::SCUserWidget_BPF_GetLocalPlayerIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetParentLayerWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCommonActivatableWidgetContainerBase*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommonActivatableWidgetContainerBase* USCUserWidget::BPF_GetParentLayerWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetParentLayerWidget");

	Params::SCUserWidget_BPF_GetParentLayerWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetParentRootMenuWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCUserWidget::BPF_GetParentRootMenuWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetParentRootMenuWidget");

	Params::SCUserWidget_BPF_GetParentRootMenuWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetParentRootWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCUserWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCUserWidget* USCUserWidget::BPF_GetParentRootWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetParentRootWidget");

	Params::SCUserWidget_BPF_GetParentRootWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASCBasePlayerController*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASCBasePlayerController* USCUserWidget::BPF_GetPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetPlayerController");

	Params::SCUserWidget_BPF_GetPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_GetUIInputMode
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIInputModes                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIInputModes USCUserWidget::BPF_GetUIInputMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_GetUIInputMode");

	Params::SCUserWidget_BPF_GetUIInputMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_IsCursorNavigationEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_IsCursorNavigationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_IsCursorNavigationEnabled");

	Params::SCUserWidget_BPF_IsCursorNavigationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_IsInVisibleLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_IsInVisibleLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_IsInVisibleLayer");

	Params::SCUserWidget_BPF_IsInVisibleLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_IsLayerCurrentActiveWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_IsLayerCurrentActiveWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_IsLayerCurrentActiveWidget");

	Params::SCUserWidget_BPF_IsLayerCurrentActiveWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserWidget.BPF_IsVisibleInTree
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserWidget::BPF_IsVisibleInTree() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserWidget", "BPF_IsVisibleInTree");

	Params::SCUserWidget_BPF_IsVisibleInTree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.HUDUserWidget.BPE_VisibilityChangedFromMenu
// (Event, Public, BlueprintEvent)
// Parameters:
// ESlateVisibility                        _eNewVibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDUserWidget::BPE_VisibilityChangedFromMenu(ESlateVisibility _eNewVibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDUserWidget", "BPE_VisibilityChangedFromMenu");

	Params::HUDUserWidget_BPE_VisibilityChangedFromMenu Parms{};

	Parms._eNewVibility = _eNewVibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.HUDUserWidget.BPF_UpdateHUDOffset
// (Final, Native, Public, BlueprintCallable)

void UHUDUserWidget::BPF_UpdateHUDOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDUserWidget", "BPF_UpdateHUDOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BlueprintActorCondition.BPE_Evaluate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintActorCondition::BPE_Evaluate(const class AActor* _actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintActorCondition", "BPE_Evaluate");

	Params::BlueprintActorCondition_BPE_Evaluate Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BaseActorConditionHelpers.BPF_Evaluate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBaseActorConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bDefaultResult                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseActorConditionHelpers::BPF_Evaluate(const struct FBaseActorConditionInstance& _instance, class AActor* _actor, bool _bDefaultResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BaseActorConditionHelpers", "BPF_Evaluate");

	Params::BaseActorConditionHelpers_BPF_Evaluate Parms{};

	Parms._instance = std::move(_instance);
	Parms._actor = _actor;
	Parms._bDefaultResult = _bDefaultResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BaseActorConditionHelpers.BPF_GetInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBaseActorConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBaseActorConditionHelpers::BPF_GetInstance(const struct FBaseActorConditionInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BaseActorConditionHelpers", "BPF_GetInstance");

	Params::BaseActorConditionHelpers_BPF_GetInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_ActorCondition.BPF_EvaluateOverTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBaseActorConditionInstance&_condition                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bInitialStateValid                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ActorCondition*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ActorCondition* UAbilityTask_ActorCondition::BPF_EvaluateOverTime(class UGameplayAbility* _owningAbility, const struct FBaseActorConditionInstance& _condition, bool _bInitialStateValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ActorCondition", "BPF_EvaluateOverTime");

	Params::AbilityTask_ActorCondition_BPF_EvaluateOverTime Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._condition = std::move(_condition);
	Parms._bInitialStateValid = _bInitialStateValid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BaseTargetActorConditionHelpers.BPF_Evaluate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBaseActorTargetConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bDefaultResult                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseTargetActorConditionHelpers::BPF_Evaluate(const struct FBaseActorTargetConditionInstance& _instance, class AActor* _actor, class AActor* _target, bool _bDefaultResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BaseTargetActorConditionHelpers", "BPF_Evaluate");

	Params::BaseTargetActorConditionHelpers_BPF_Evaluate Parms{};

	Parms._instance = std::move(_instance);
	Parms._actor = _actor;
	Parms._target = _target;
	Parms._bDefaultResult = _bDefaultResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BaseTargetActorConditionHelpers.BPF_GetInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBaseActorTargetConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBaseTargetActorConditionHelpers::BPF_GetInstance(const struct FBaseActorTargetConditionInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BaseTargetActorConditionHelpers", "BPF_GetInstance");

	Params::BaseTargetActorConditionHelpers_BPF_GetInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_WaitGameplayTagAdded.BPF_TaskWaitAnyGameplayTagAdded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_container                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _taskOwner                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _tags                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    _bWaitForEndOfFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bTestInitialPresenceOfTags                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_WaitGameplayTagAdded*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_WaitGameplayTagAdded* UGameplayTask_WaitGameplayTagAdded::BPF_TaskWaitAnyGameplayTagAdded(TScriptInterface<class IGameplayTaskOwnerInterface> _container, class UAbilitySystemComponent* _taskOwner, const struct FGameplayTagContainer& _tags, bool _bWaitForEndOfFrame, bool _bTestInitialPresenceOfTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_WaitGameplayTagAdded", "BPF_TaskWaitAnyGameplayTagAdded");

	Params::GameplayTask_WaitGameplayTagAdded_BPF_TaskWaitAnyGameplayTagAdded Parms{};

	Parms._container = _container;
	Parms._taskOwner = _taskOwner;
	Parms._tags = std::move(_tags);
	Parms._bWaitForEndOfFrame = _bWaitForEndOfFrame;
	Parms._bTestInitialPresenceOfTags = _bTestInitialPresenceOfTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_WaitGameplayTagAdded.BPF_TaskWaitGameplayTagAdded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_container                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _taskOwner                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWaitForEndOfFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bTestInitialPresenceOfTags                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_WaitGameplayTagAdded*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_WaitGameplayTagAdded* UGameplayTask_WaitGameplayTagAdded::BPF_TaskWaitGameplayTagAdded(TScriptInterface<class IGameplayTaskOwnerInterface> _container, class UAbilitySystemComponent* _taskOwner, const struct FGameplayTag& _tag, bool _bWaitForEndOfFrame, bool _bTestInitialPresenceOfTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_WaitGameplayTagAdded", "BPF_TaskWaitGameplayTagAdded");

	Params::GameplayTask_WaitGameplayTagAdded_BPF_TaskWaitGameplayTagAdded Parms{};

	Parms._container = _container;
	Parms._taskOwner = _taskOwner;
	Parms._tag = std::move(_tag);
	Parms._bWaitForEndOfFrame = _bWaitForEndOfFrame;
	Parms._bTestInitialPresenceOfTags = _bTestInitialPresenceOfTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BlueprintTargetActorCondition.BPE_Evaluate
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _target                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintTargetActorCondition::BPE_Evaluate(const class AActor* _actor, const class AActor* _target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintTargetActorCondition", "BPE_Evaluate");

	Params::BlueprintTargetActorCondition_BPE_Evaluate Parms{};

	Parms._actor = _actor;
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.EventBinderHelper.BPF_CreateAndBind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          _outer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEventBinderInstance&      _template                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>&_onTriggeredCallback                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_targetDataHandle                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// class UEventBinder*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEventBinder* UEventBinderHelper::BPF_CreateAndBind(class UObject* _outer, const struct FEventBinderInstance& _template, const TDelegate<void(const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)>& _onTriggeredCallback, const struct FGameplayAbilityTargetDataHandle& _targetDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EventBinderHelper", "BPF_CreateAndBind");

	Params::EventBinderHelper_BPF_CreateAndBind Parms{};

	Parms._outer = _outer;
	Parms._template = std::move(_template);
	Parms._onTriggeredCallback = _onTriggeredCallback;
	Parms._targetDataHandle = std::move(_targetDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDataConditionWithWeightEvaluation.BPF_EvaluateWeight
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float*                                  _fOutWeight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetDataConditionWithWeightEvaluation::BPF_EvaluateWeight(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _handle, float* _fOutWeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetDataConditionWithWeightEvaluation", "BPF_EvaluateWeight");

	Params::TargetDataConditionWithWeightEvaluation_BPF_EvaluateWeight Parms{};

	Parms._actor = _actor;
	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutWeight != nullptr)
		*_fOutWeight = Parms._fOutWeight;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDataConditionHelpers.BPF_Evaluate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FTargetDataConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bDefaultResult                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetDataConditionHelpers::BPF_Evaluate(const struct FTargetDataConditionInstance& _instance, class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _handle, bool _bDefaultResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataConditionHelpers", "BPF_Evaluate");

	Params::TargetDataConditionHelpers_BPF_Evaluate Parms{};

	Parms._instance = std::move(_instance);
	Parms._actor = _actor;
	Parms._handle = std::move(_handle);
	Parms._bDefaultResult = _bDefaultResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDataConditionHelpers.BPF_GetInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTargetDataConditionInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UTargetDataConditionHelpers::BPF_GetInstance(const struct FTargetDataConditionInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataConditionHelpers", "BPF_GetInstance");

	Params::TargetDataConditionHelpers_BPF_GetInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ApplyAnimationMirrorFromTargetData.IsUsingManifest
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UApplyAnimationMirrorFromTargetData::IsUsingManifest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ApplyAnimationMirrorFromTargetData", "IsUsingManifest");

	Params::ApplyAnimationMirrorFromTargetData_IsUsingManifest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseAnimationMetadata.ShouldShowEndNotify
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _infos                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseAnimationMetadata::ShouldShowEndNotify(const struct FMandatoryNotifyInfos& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBaseAnimationMetadata", "ShouldShowEndNotify");

	Params::SCBaseAnimationMetadata_ShouldShowEndNotify Parms{};

	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseAnimationMetadata.ShouldShowEndRelativeToNotifyEnd
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _infos                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseAnimationMetadata::ShouldShowEndRelativeToNotifyEnd(const struct FMandatoryNotifyInfos& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBaseAnimationMetadata", "ShouldShowEndRelativeToNotifyEnd");

	Params::SCBaseAnimationMetadata_ShouldShowEndRelativeToNotifyEnd Parms{};

	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseAnimationMetadata.ShouldShowNotifyEndTime
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _infos                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseAnimationMetadata::ShouldShowNotifyEndTime(const struct FMandatoryNotifyInfos& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBaseAnimationMetadata", "ShouldShowNotifyEndTime");

	Params::SCBaseAnimationMetadata_ShouldShowNotifyEndTime Parms{};

	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseAnimationMetadata.ShouldShowStartNotify
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _infos                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseAnimationMetadata::ShouldShowStartNotify(const struct FMandatoryNotifyInfos& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBaseAnimationMetadata", "ShouldShowStartNotify");

	Params::SCBaseAnimationMetadata_ShouldShowStartNotify Parms{};

	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBaseAnimationMetadata.ShouldShowStartRelativeToNotifyEnd
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _infos                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCBaseAnimationMetadata::ShouldShowStartRelativeToNotifyEnd(const struct FMandatoryNotifyInfos& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCBaseAnimationMetadata", "ShouldShowStartRelativeToNotifyEnd");

	Params::SCBaseAnimationMetadata_ShouldShowStartRelativeToNotifyEnd Parms{};

	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationMetadata.GetEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FMandatoryNotifyInfos&     _reaction                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCAnimationMetadata::GetEditorDesc(const struct FMandatoryNotifyInfos& _reaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationMetadata", "GetEditorDesc");

	Params::SCAnimationMetadata_GetEditorDesc Parms{};

	Parms._reaction = std::move(_reaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationMetadata.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* USCAnimationMetadata::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimationMetadata", "GetCustomDataTableStruct");

	Params::SCAnimationMetadata_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDataManifest.BPF_InitTargetDataFromManifest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           _manifestClass                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_in                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_out                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UTargetDataManifest::BPF_InitTargetDataFromManifest(class UClass* _manifestClass, int32 _iID, const struct FGameplayAbilityTargetDataHandle& _in, struct FGameplayAbilityTargetDataHandle* _out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataManifest", "BPF_InitTargetDataFromManifest");

	Params::TargetDataManifest_BPF_InitTargetDataFromManifest Parms{};

	Parms._manifestClass = _manifestClass;
	Parms._iID = _iID;
	Parms._in = std::move(_in);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_out != nullptr)
		*_out = std::move(Parms._out);
}


// Function SCCore.TargetDataManifest.GetManifestTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              _manifest                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_in                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_out                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UTargetDataManifest::GetManifestTargetData(TSubclassOf<class UObject> _manifest, const struct FGameplayAbilityTargetDataHandle& _in, struct FGameplayAbilityTargetDataHandle* _out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataManifest", "GetManifestTargetData");

	Params::TargetDataManifest_GetManifestTargetData Parms{};

	Parms._manifest = _manifest;
	Parms._in = std::move(_in);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_out != nullptr)
		*_out = std::move(Parms._out);
}


// Function SCCore.TargetDataManifest.GetOutputTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              _object                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_in                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_out                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UTargetDataManifest::GetOutputTargetData(TSubclassOf<class UObject> _object, const struct FGameplayAbilityTargetDataHandle& _in, struct FGameplayAbilityTargetDataHandle* _out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataManifest", "GetOutputTargetData");

	Params::TargetDataManifest_GetOutputTargetData Parms{};

	Parms._object = _object;
	Parms._in = std::move(_in);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_out != nullptr)
		*_out = std::move(Parms._out);
}


// Function SCCore.TargetDataManifest.MakeManifestTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              _manifest                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_in                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_out                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetDataManifest::MakeManifestTargetData(TSubclassOf<class UObject> _manifest, const struct FGameplayAbilityTargetDataHandle& _in, struct FGameplayAbilityTargetDataHandle* _out, const struct FGameplayAbilityTargetDataHandle& _context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDataManifest", "MakeManifestTargetData");

	Params::TargetDataManifest_MakeManifestTargetData Parms{};

	Parms._manifest = _manifest;
	Parms._in = std::move(_in);
	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_out != nullptr)
		*_out = std::move(Parms._out);
}


// Function SCCore.AsyncTextureBinding.GetValue
// (Final, Native, Public, Const)
// Parameters:
// struct FAsyncTextureStruct              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAsyncTextureStruct UAsyncTextureBinding::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTextureBinding", "GetValue");

	Params::AsyncTextureBinding_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetingHelper.GetEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FTargetDatasourceInstance& _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetingHelper::GetEditorDesc(const struct FTargetDatasourceInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingHelper", "GetEditorDesc");

	Params::TargetingHelper_GetEditorDesc Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetingHelper.GetGenericTargetProviderEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FLatentTargetProvider&     _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int64                                   _iPropertyPtr                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetingHelper::GetGenericTargetProviderEditorDesc(const struct FLatentTargetProvider& _instance, int64 _iPropertyPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingHelper", "GetGenericTargetProviderEditorDesc");

	Params::TargetingHelper_GetGenericTargetProviderEditorDesc Parms{};

	Parms._instance = std::move(_instance);
	Parms._iPropertyPtr = _iPropertyPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetingHelper.GetOnDemandTargetProviderEditorDesc
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FOnDemandTargetProvider&   _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int64                                   _iPropertyPtr                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetingHelper::GetOnDemandTargetProviderEditorDesc(const struct FOnDemandTargetProvider& _instance, int64 _iPropertyPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingHelper", "GetOnDemandTargetProviderEditorDesc");

	Params::TargetingHelper_GetOnDemandTargetProviderEditorDesc Parms{};

	Parms._instance = std::move(_instance);
	Parms._iPropertyPtr = _iPropertyPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableMaterialWidget.BPF_SetMaterialInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         _materialInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableMaterialWidget::BPF_SetMaterialInstance(class UMaterialInstanceDynamic* _materialInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableMaterialWidget", "BPF_SetMaterialInstance");

	Params::BindableMaterialWidget_BPF_SetMaterialInstance Parms{};

	Parms._materialInstance = _materialInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindablePropertyBase.BPF_SetOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindablePropertyBase::BPF_SetOwner(class UObject* _owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyBase", "BPF_SetOwner");

	Params::BindablePropertyBase_BPF_SetOwner Parms{};

	Parms._owner = _owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindablePropertyBase.BPF_IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBindablePropertyBase::BPF_IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyBase", "BPF_IsValid");

	Params::BindablePropertyBase_BPF_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableFloatProperty.BPF_SetRef
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float&                                  _fValue                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableFloatProperty::BPF_SetRef(float& _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFloatProperty", "BPF_SetRef");

	Params::BindableFloatProperty_BPF_SetRef Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_fValue = Parms._fValue;
}


// Function SCCore.BindableFloatProperty.BPF_SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableFloatProperty::BPF_SetValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFloatProperty", "BPF_SetValue");

	Params::BindableFloatProperty_BPF_SetValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableFloatProperty.BPF_GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBindableFloatProperty::BPF_GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFloatProperty", "BPF_GetValue");

	Params::BindableFloatProperty_BPF_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableEnumProperty.BPF_SetRef
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8&                                  _uiValue                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableEnumProperty::BPF_SetRef(uint8& _uiValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableEnumProperty", "BPF_SetRef");

	Params::BindableEnumProperty_BPF_SetRef Parms{};

	Parms._uiValue = _uiValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_uiValue = Parms._uiValue;
}


// Function SCCore.BindableEnumProperty.BPF_SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   _uiValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableEnumProperty::BPF_SetValue(uint8 _uiValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableEnumProperty", "BPF_SetValue");

	Params::BindableEnumProperty_BPF_SetValue Parms{};

	Parms._uiValue = _uiValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableEnumProperty.BPF_GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UBindableEnumProperty::BPF_GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableEnumProperty", "BPF_GetValue");

	Params::BindableEnumProperty_BPF_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableBoolProperty.BPF_SetRef
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool&                                   _bValue                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableBoolProperty::BPF_SetRef(bool& _bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableBoolProperty", "BPF_SetRef");

	Params::BindableBoolProperty_BPF_SetRef Parms{};

	Parms._bValue = _bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_bValue = Parms._bValue;
}


// Function SCCore.BindableBoolProperty.BPF_SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableBoolProperty::BPF_SetValue(bool _bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableBoolProperty", "BPF_SetValue");

	Params::BindableBoolProperty_BPF_SetValue Parms{};

	Parms._bValue = _bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableBoolProperty.BPF_GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBindableBoolProperty::BPF_GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableBoolProperty", "BPF_GetValue");

	Params::BindableBoolProperty_BPF_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableStringProperty.BPF_SetRef
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString&                          _Value                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableStringProperty::BPF_SetRef(class FString& _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableStringProperty", "BPF_SetRef");

	Params::BindableStringProperty_BPF_SetRef Parms{};

	Parms._Value = std::move(_Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_Value = std::move(Parms._Value);
}


// Function SCCore.BindableStringProperty.BPF_SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _Value                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableStringProperty::BPF_SetValue(const class FString& _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableStringProperty", "BPF_SetValue");

	Params::BindableStringProperty_BPF_SetValue Parms{};

	Parms._Value = std::move(_Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableStringProperty.BPF_GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBindableStringProperty::BPF_GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableStringProperty", "BPF_GetValue");

	Params::BindableStringProperty_BPF_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableIntProperty.BPF_SetRef
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32&                                  _iValue                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableIntProperty::BPF_SetRef(int32& _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableIntProperty", "BPF_SetRef");

	Params::BindableIntProperty_BPF_SetRef Parms{};

	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_iValue = Parms._iValue;
}


// Function SCCore.BindableIntProperty.BPF_SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableIntProperty::BPF_SetValue(int32 _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableIntProperty", "BPF_SetValue");

	Params::BindableIntProperty_BPF_SetValue Parms{};

	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableIntProperty.BPF_GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBindableIntProperty::BPF_GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableIntProperty", "BPF_GetValue");

	Params::BindableIntProperty_BPF_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableFlagProperty.BPF_AddFlags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iFlags                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableFlagProperty::BPF_AddFlags(int32 _iFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFlagProperty", "BPF_AddFlags");

	Params::BindableFlagProperty_BPF_AddFlags Parms{};

	Parms._iFlags = _iFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableFlagProperty.BPF_RemoveFlags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iFlags                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindableFlagProperty::BPF_RemoveFlags(int32 _iFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFlagProperty", "BPF_RemoveFlags");

	Params::BindableFlagProperty_BPF_RemoveFlags Parms{};

	Parms._iFlags = _iFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindableFlagProperty.BPF_HasAllFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iFlags                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBindableFlagProperty::BPF_HasAllFlags(int32 _iFlags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFlagProperty", "BPF_HasAllFlags");

	Params::BindableFlagProperty_BPF_HasAllFlags Parms{};

	Parms._iFlags = _iFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindableFlagProperty.BPF_HasAnyFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iFlags                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBindableFlagProperty::BPF_HasAnyFlags(int32 _iFlags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindableFlagProperty", "BPF_HasAnyFlags");

	Params::BindableFlagProperty_BPF_HasAnyFlags Parms{};

	Parms._iFlags = _iFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BindablePropertyUserWidget.BPE_OnSelfBinding
// (Event, Protected, BlueprintEvent)

void UBindablePropertyUserWidget::BPE_OnSelfBinding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyUserWidget", "BPE_OnSelfBinding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.BindablePropertyUserWidget.BPF_CreateProperty
// (Final, Native, Protected, BlueprintCallable)

void UBindablePropertyUserWidget::BPF_CreateProperty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyUserWidget", "BPF_CreateProperty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindablePropertyUserWidget.BPF_OnInputUpdate
// (Final, Native, Protected, BlueprintCallable)

void UBindablePropertyUserWidget::BPF_OnInputUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyUserWidget", "BPF_OnInputUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindablePropertyUserWidget.BPF_RefreshDisplay
// (Final, Native, Protected, BlueprintCallable)

void UBindablePropertyUserWidget::BPF_RefreshDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyUserWidget", "BPF_RefreshDisplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BindablePropertyUserWidget.OnPropertyUpdated
// (Final, Native, Protected)
// Parameters:
// class UBindablePropertyBase*            _property                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindablePropertyUserWidget::OnPropertyUpdated(class UBindablePropertyBase* _property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindablePropertyUserWidget", "OnPropertyUpdated");

	Params::BindablePropertyUserWidget_OnPropertyUpdated Parms{};

	Parms._property = _property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BinderConditionComponent.BPE_OnBinderTriggered
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_gameplayAbilityTargetDataHandle                       (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _binderConditionID                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderConditionComponent::BPE_OnBinderTriggered(const struct FGameplayAbilityTargetDataHandle& _gameplayAbilityTargetDataHandle, const struct FGameplayTag& _binderConditionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderConditionComponent", "BPE_OnBinderTriggered");

	Params::BinderConditionComponent_BPE_OnBinderTriggered Parms{};

	Parms._gameplayAbilityTargetDataHandle = std::move(_gameplayAbilityTargetDataHandle);
	Parms._binderConditionID = std::move(_binderConditionID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.BinderConditionComponent.BPF_SetDeferredTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _deferredTargetID                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _binderTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderConditionComponent::BPF_SetDeferredTarget(const struct FGameplayTag& _deferredTargetID, class AActor* _binderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderConditionComponent", "BPF_SetDeferredTarget");

	Params::BinderConditionComponent_BPF_SetDeferredTarget Parms{};

	Parms._deferredTargetID = std::move(_deferredTargetID);
	Parms._binderTarget = _binderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BinderConditionComponent.OnBinderConditionTriggered
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_gameplayAbilityTargetDataHandle                       (Parm, NativeAccessSpecifierPublic)
// int32                                   _iBinderConditionID                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderConditionComponent::OnBinderConditionTriggered(const struct FGameplayAbilityTargetDataHandle& _gameplayAbilityTargetDataHandle, int32 _iBinderConditionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderConditionComponent", "OnBinderConditionTriggered");

	Params::BinderConditionComponent_OnBinderConditionTriggered Parms{};

	Parms._gameplayAbilityTargetDataHandle = std::move(_gameplayAbilityTargetDataHandle);
	Parms._iBinderConditionID = _iBinderConditionID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BinderConditionComponent.BPF_GetBinderWithConditionInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _binderConditionID                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBinderWithCondition*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBinderWithCondition* UBinderConditionComponent::BPF_GetBinderWithConditionInstance(const struct FGameplayTag& _binderConditionID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderConditionComponent", "BPF_GetBinderWithConditionInstance");

	Params::BinderConditionComponent_BPF_GetBinderWithConditionInstance Parms{};

	Parms._binderConditionID = std::move(_binderConditionID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BinderWithCondition.BPF_SetBinderSimpleTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinderWithCondition*             _binderCondition                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderWithCondition::BPF_SetBinderSimpleTarget(class UBinderWithCondition* _binderCondition, class AActor* _target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BinderWithCondition", "BPF_SetBinderSimpleTarget");

	Params::BinderWithCondition_BPF_SetBinderSimpleTarget Parms{};

	Parms._binderCondition = _binderCondition;
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BinderWithCondition.BPF_SetConditionSimpleTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinderWithCondition*             _binderCondition                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderWithCondition::BPF_SetConditionSimpleTarget(class UBinderWithCondition* _binderCondition, class AActor* _target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BinderWithCondition", "BPF_SetConditionSimpleTarget");

	Params::BinderWithCondition_BPF_SetConditionSimpleTarget Parms{};

	Parms._binderCondition = _binderCondition;
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BinderWithCondition.OnBinderTriggered
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_eventData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UBinderWithCondition::OnBinderTriggered(struct FGameplayAbilityTargetDataHandle* _eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderWithCondition", "OnBinderTriggered");

	Params::BinderWithCondition_OnBinderTriggered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eventData != nullptr)
		*_eventData = std::move(Parms._eventData);
}


// Function SCCore.BinderWithCondition.OnTargetDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBinderWithCondition::OnTargetDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BinderWithCondition", "OnTargetDestroyed");

	Params::BinderWithCondition_OnTargetDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BlendableWidget.BPF_BindMaterialParameterToBlendAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialParameterCollection*     _collection                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _parameterName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBlendableWidget::BPF_BindMaterialParameterToBlendAlpha(class UMaterialParameterCollection* _collection, class FName _parameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlendableWidget", "BPF_BindMaterialParameterToBlendAlpha");

	Params::BlendableWidget_BPF_BindMaterialParameterToBlendAlpha Parms{};

	Parms._collection = _collection;
	Parms._parameterName = _parameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BlendableWidget.BPF_StartTimerBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlendableWidget::BPF_StartTimerBlend(bool _bReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlendableWidget", "BPF_StartTimerBlend");

	Params::BlendableWidget_BPF_StartTimerBlend Parms{};

	Parms._bReverse = _bReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.BlendableWidget.BPF_GetBlendedColor
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBlendableWidget::BPF_GetBlendedColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlendableWidget", "BPF_GetBlendedColor");

	Params::BlendableWidget_BPF_GetBlendedColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BlendableWidget.BPF_GetBlendedFloat
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlendableWidget::BPF_GetBlendedFloat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlendableWidget", "BPF_GetBlendedFloat");

	Params::BlendableWidget_BPF_GetBlendedFloat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CaptureInputAction.BPF_CaptureInput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UInputMappingWidgetData*    _data                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _item                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _baseInputData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   _iSlodID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCaptureAxis                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMouseAxisThreshold                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iControllerTypes                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bCancelOnInvalidControllerType                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bBreakDependency                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInverseMouseVerticalAxis                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCaptureInputAction*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCaptureInputAction* UCaptureInputAction::BPF_CaptureInput(const class UInputMappingWidgetData* _data, const struct FMappingID& _item, const struct FInputMappingData& _baseInputData, int32 _iSlodID, bool _bCaptureAxis, float _fMouseAxisThreshold, int32 _iControllerTypes, bool _bCancelOnInvalidControllerType, bool _bBreakDependency, bool _bInverseMouseVerticalAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CaptureInputAction", "BPF_CaptureInput");

	Params::CaptureInputAction_BPF_CaptureInput Parms{};

	Parms._data = _data;
	Parms._item = std::move(_item);
	Parms._baseInputData = std::move(_baseInputData);
	Parms._iSlodID = _iSlodID;
	Parms._bCaptureAxis = _bCaptureAxis;
	Parms._fMouseAxisThreshold = _fMouseAxisThreshold;
	Parms._iControllerTypes = _iControllerTypes;
	Parms._bCancelOnInvalidControllerType = _bCancelOnInvalidControllerType;
	Parms._bBreakDependency = _bBreakDependency;
	Parms._bInverseMouseVerticalAxis = _bInverseMouseVerticalAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CDOLink.SetDataClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           _dataAsset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCDOLink::SetDataClass(class UClass* _dataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CDOLink", "SetDataClass");

	Params::CDOLink_SetDataClass Parms{};

	Parms._dataAsset = _dataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CDOLink.GetDataClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UCDOLink::GetDataClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CDOLink", "GetDataClass");

	Params::CDOLink_GetDataClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameStateScopedEventBinder.BPE_DisableFromGameState
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGameStateBase*                   _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStateScopedEventBinder::BPE_DisableFromGameState(class AGameStateBase* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateScopedEventBinder", "BPE_DisableFromGameState");

	Params::GameStateScopedEventBinder_BPE_DisableFromGameState Parms{};

	Parms._gameState = _gameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameStateScopedEventBinder.BPE_OnGameStateValid
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGameStateBase*                   _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStateScopedEventBinder::BPE_OnGameStateValid(class AGameStateBase* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateScopedEventBinder", "BPE_OnGameStateValid");

	Params::GameStateScopedEventBinder_BPE_OnGameStateValid Parms{};

	Parms._gameState = _gameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameStateScopedEventBinder.OnGameStateValid
// (Native, Protected)
// Parameters:
// class AGameStateBase*                   _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStateScopedEventBinder::OnGameStateValid(class AGameStateBase* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateScopedEventBinder", "OnGameStateValid");

	Params::GameStateScopedEventBinder_OnGameStateValid Parms{};

	Parms._gameState = _gameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PlayerStateScopedEventBinder.OnPlayerStateRemoved
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     _playerState                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerStateScopedEventBinder::OnPlayerStateRemoved(class APlayerState* _playerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateScopedEventBinder", "OnPlayerStateRemoved");

	Params::PlayerStateScopedEventBinder_OnPlayerStateRemoved Parms{};

	Parms._playerState = _playerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PlayerStateScopedEventBinder.OnPlayerStateValid
// (Native, Protected)
// Parameters:
// class APlayerState*                     _playerState                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerStateScopedEventBinder::OnPlayerStateValid(class APlayerState* _playerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateScopedEventBinder", "OnPlayerStateValid");

	Params::PlayerStateScopedEventBinder_OnPlayerStateValid Parms{};

	Parms._playerState = _playerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CharacterScopedEventBinder.OnCharacterValid
// (Native, Protected)
// Parameters:
// class APlayerState*                     _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _newPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _oldPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterScopedEventBinder::OnCharacterValid(class APlayerState* _player, class APawn* _newPawn, class APawn* _oldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterScopedEventBinder", "OnCharacterValid");

	Params::CharacterScopedEventBinder_OnCharacterValid Parms{};

	Parms._player = _player;
	Parms._newPawn = _newPawn;
	Parms._oldPawn = _oldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CharacterGameplayAttributeBinder.OnGameplayAttributeChanged
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayAttribute&        _attribute                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fOldValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterGameplayAttributeBinder::OnGameplayAttributeChanged(const struct FGameplayAttribute& _attribute, float _fOldValue, float _fNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterGameplayAttributeBinder", "OnGameplayAttributeChanged");

	Params::CharacterGameplayAttributeBinder_OnGameplayAttributeChanged Parms{};

	Parms._attribute = std::move(_attribute);
	Parms._fOldValue = _fOldValue;
	Parms._fNewValue = _fNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CharacterRollbackComponent.OnMontageStarted
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterRollbackComponent::OnMontageStarted(class UAnimMontage* _montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterRollbackComponent", "OnMontageStarted");

	Params::CharacterRollbackComponent_OnMontageStarted Parms{};

	Parms._montage = _montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatData.BPE_CanApplyCheat
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UGameInstance*                    _gameInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCheatData::BPE_CanApplyCheat(class UGameInstance* _gameInstance, class APlayerController* _PlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CheatData", "BPE_CanApplyCheat");

	Params::CheatData_BPE_CanApplyCheat Parms{};

	Parms._gameInstance = _gameInstance;
	Parms._PlayerController = _PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.CheatData.BPE_OnCheatActivated
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatData::BPE_OnCheatActivated(class APlayerController* _PlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CheatData", "BPE_OnCheatActivated");

	Params::CheatData_BPE_OnCheatActivated Parms{};

	Parms._PlayerController = _PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.CheatData.BPE_OnCheatDeactivated
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatData::BPE_OnCheatDeactivated(class APlayerController* _PlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CheatData", "BPE_OnCheatDeactivated");

	Params::CheatData_BPE_OnCheatDeactivated Parms{};

	Parms._PlayerController = _PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.TriangleStatsWidget.BPF_SetDownLeftValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTriangleStatsWidget::BPF_SetDownLeftValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TriangleStatsWidget", "BPF_SetDownLeftValue");

	Params::TriangleStatsWidget_BPF_SetDownLeftValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TriangleStatsWidget.BPF_SetDownRightValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTriangleStatsWidget::BPF_SetDownRightValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TriangleStatsWidget", "BPF_SetDownRightValue");

	Params::TriangleStatsWidget_BPF_SetDownRightValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TriangleStatsWidget.BPF_SetUpValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTriangleStatsWidget::BPF_SetUpValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TriangleStatsWidget", "BPF_SetUpValue");

	Params::TriangleStatsWidget_BPF_SetUpValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ViewModelsPool.ActorBoundUnspawn
// (Final, Native, Private)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          _eEndPlayReason                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UViewModelsPool::ActorBoundUnspawn(class AActor* _actor, EEndPlayReason _eEndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewModelsPool", "ActorBoundUnspawn");

	Params::ViewModelsPool_ActorBoundUnspawn Parms{};

	Parms._actor = _actor;
	Parms._eEndPlayReason = _eEndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ViewModelsPool.BPF_GetOrCreateActorInstancedViewModelChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           _actorDataAndBoundOfViewModel                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCViewModel*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCViewModel* UViewModelsPool::BPF_GetOrCreateActorInstancedViewModelChecked(class AActor* _actorDataAndBoundOfViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewModelsPool", "BPF_GetOrCreateActorInstancedViewModelChecked");

	Params::ViewModelsPool_BPF_GetOrCreateActorInstancedViewModelChecked Parms{};

	Parms._actorDataAndBoundOfViewModel = _actorDataAndBoundOfViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ViewModelsPool.BPF_GetOrCreateViewModelChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _boundObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _actorDataOfViewModel                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCViewModel*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCViewModel* UViewModelsPool::BPF_GetOrCreateViewModelChecked(class UObject* _boundObject, class AActor* _actorDataOfViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewModelsPool", "BPF_GetOrCreateViewModelChecked");

	Params::ViewModelsPool_BPF_GetOrCreateViewModelChecked Parms{};

	Parms._boundObject = _boundObject;
	Parms._actorDataOfViewModel = _actorDataOfViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCButtonUserWidget.BPE_OnClicked
// (Event, Protected, BlueprintEvent)

void USCButtonUserWidget::BPE_OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCButtonUserWidget", "BPE_OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCButtonUserWidget.BPE_OnRightClicked
// (Event, Protected, BlueprintEvent)

void USCButtonUserWidget::BPE_OnRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCButtonUserWidget", "BPE_OnRightClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCButtonUserWidget.BPF_GetFlowOutputTransitionName
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USCButtonUserWidget::BPF_GetFlowOutputTransitionName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCButtonUserWidget", "BPF_GetFlowOutputTransitionName");

	Params::SCButtonUserWidget_BPF_GetFlowOutputTransitionName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCButtonUserWidget.BPF_GetHoldProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCButtonUserWidget::BPF_GetHoldProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCButtonUserWidget", "BPF_GetHoldProgress");

	Params::SCButtonUserWidget_BPF_GetHoldProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerButtonWidget.BPF_GetInputNode
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputMappingNode*               Node                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_GetInputNode(struct FInputMappingNode* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_GetInputNode");

	Params::ControllerButtonWidget_BPF_GetInputNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Node != nullptr)
		*Node = std::move(Parms.Node);
}


// Function SCCore.ControllerButtonWidget.BPF_GetKeyDisplayName
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey&                      _key                                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLongDisplayName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UControllerButtonWidget::BPF_GetKeyDisplayName(const struct FKey& _key, bool _bLongDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_GetKeyDisplayName");

	Params::ControllerButtonWidget_BPF_GetKeyDisplayName Parms{};

	Parms._key = std::move(_key);
	Parms._bLongDisplayName = _bLongDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerButtonWidget.BPF_GetUIKeyInfos
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   _bOutFoundIcon                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingNode*               _outNode                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>*       _icon                                                  (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey*                            _key                                                   (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            _replacementText                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool*                                   _bShowText                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          _outSeparator                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_GetUIKeyInfos(bool* _bOutFoundIcon, struct FInputMappingNode* _outNode, TSoftObjectPtr<class UTexture2D>* _icon, struct FKey* _key, class FText* _replacementText, bool* _bShowText, class FString* _outSeparator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_GetUIKeyInfos");

	Params::ControllerButtonWidget_BPF_GetUIKeyInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutFoundIcon != nullptr)
		*_bOutFoundIcon = Parms._bOutFoundIcon;

	if (_outNode != nullptr)
		*_outNode = std::move(Parms._outNode);

	if (_icon != nullptr)
		*_icon = Parms._icon;

	if (_key != nullptr)
		*_key = std::move(Parms._key);

	if (_replacementText != nullptr)
		*_replacementText = std::move(Parms._replacementText);

	if (_bShowText != nullptr)
		*_bShowText = Parms._bShowText;

	if (_outSeparator != nullptr)
		*_outSeparator = std::move(Parms._outSeparator);
}


// Function SCCore.ControllerButtonWidget.BPF_IsKeyboardInput
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControllerButtonWidget::BPF_IsKeyboardInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_IsKeyboardInput");

	Params::ControllerButtonWidget_BPF_IsKeyboardInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerButtonWidget.BPF_OverrideWithKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FKey>&              _inKeys                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    _bRefresh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_OverrideWithKeys(bool _bOverride, const TArray<struct FKey>& _inKeys, bool _bRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_OverrideWithKeys");

	Params::ControllerButtonWidget_BPF_OverrideWithKeys Parms{};

	Parms._bOverride = _bOverride;
	Parms._inKeys = std::move(_inKeys);
	Parms._bRefresh = _bRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerButtonWidget.BPF_SetAxisType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerIconAxisTypes                _eAxisType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRefresh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_SetAxisType(EControllerIconAxisTypes _eAxisType, bool _bRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_SetAxisType");

	Params::ControllerButtonWidget_BPF_SetAxisType Parms{};

	Parms._eAxisType = _eAxisType;
	Parms._bRefresh = _bRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerButtonWidget.BPF_SetIconStyle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FControllerIconStyle&      _eIconStyle                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRefresh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_SetIconStyle(const struct FControllerIconStyle& _eIconStyle, bool _bRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_SetIconStyle");

	Params::ControllerButtonWidget_BPF_SetIconStyle Parms{};

	Parms._eIconStyle = std::move(_eIconStyle);
	Parms._bRefresh = _bRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerButtonWidget.BPF_SetInputSlotIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iSlotIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_SetInputSlotIndex(int32 _iSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_SetInputSlotIndex");

	Params::ControllerButtonWidget_BPF_SetInputSlotIndex Parms{};

	Parms._iSlotIndex = _iSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerButtonWidget.BPF_SetMappingID
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bRefresh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_SetMappingID(const struct FMappingID& _mappingID, bool _bRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_SetMappingID");

	Params::ControllerButtonWidget_BPF_SetMappingID Parms{};

	Parms._mappingID = std::move(_mappingID);
	Parms._bRefresh = _bRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerButtonWidget.BPF_SetMappingIDAndRefresh
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UControllerButtonWidget::BPF_SetMappingIDAndRefresh(const struct FMappingID& _mappingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerButtonWidget", "BPF_SetMappingIDAndRefresh");

	Params::ControllerButtonWidget_BPF_SetMappingIDAndRefresh Parms{};

	Parms._mappingID = std::move(_mappingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.ControllerIconsDB.BPF_GetControllerAxisIconDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FControllerAxisIcons&      _slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UControllerIconsDB::BPF_GetControllerAxisIconDesc(const struct FControllerAxisIcons& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControllerIconsDB", "BPF_GetControllerAxisIconDesc");

	Params::ControllerIconsDB_BPF_GetControllerAxisIconDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerIconsDB.BPF_GetControllerIconsDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FControllerIcons&          _icons                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UControllerIconsDB::BPF_GetControllerIconsDesc(const struct FControllerIcons& _icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControllerIconsDB", "BPF_GetControllerIconsDesc");

	Params::ControllerIconsDB_BPF_GetControllerIconsDesc Parms{};

	Parms._icons = std::move(_icons);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerIconsDB.BPF_GetControllerKeyIconDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FControllerKeyIcons&       _slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UControllerIconsDB::BPF_GetControllerKeyIconDesc(const struct FControllerKeyIcons& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControllerIconsDB", "BPF_GetControllerKeyIconDesc");

	Params::ControllerIconsDB_BPF_GetControllerKeyIconDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ControllerIconsDB.GetControllerIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _controllerType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FControllerIcons           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FControllerIcons UControllerIconsDB::GetControllerIcons(class FName _controllerType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControllerIconsDB", "GetControllerIcons");

	Params::ControllerIconsDB_GetControllerIcons Parms{};

	Parms._controllerType = _controllerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MirrorNodeLibrary.ConvertToMirror
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult*     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMirrorReference                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMirrorReference UMirrorNodeLibrary::ConvertToMirror(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MirrorNodeLibrary", "ConvertToMirror");

	Params::MirrorNodeLibrary_ConvertToMirror Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function SCCore.MirrorNodeLibrary.ConvertToMirrorPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMirrorReference*                MirrorReference                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMirrorNodeLibrary::ConvertToMirrorPure(const struct FAnimNodeReference& Node, struct FMirrorReference* MirrorReference, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MirrorNodeLibrary", "ConvertToMirrorPure");

	Params::MirrorNodeLibrary_ConvertToMirrorPure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MirrorReference != nullptr)
		*MirrorReference = std::move(Parms.MirrorReference);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SCCore.MirrorNodeLibrary.SetMirror
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMirrorReference&          MirrorReference                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bInMirror                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMirrorReference                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMirrorReference UMirrorNodeLibrary::SetMirror(const struct FMirrorReference& MirrorReference, bool bInMirror)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MirrorNodeLibrary", "SetMirror");

	Params::MirrorNodeLibrary_SetMirror Parms{};

	Parms.MirrorReference = std::move(MirrorReference);
	Parms.bInMirror = bInMirror;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CustomWidgetNavigation.BPF_IsAnalogNavigationEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCustomWidgetNavigation::BPF_IsAnalogNavigationEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomWidgetNavigation", "BPF_IsAnalogNavigationEnabled");

	Params::CustomWidgetNavigation_BPF_IsAnalogNavigationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CustomWidgetNavigation.BPF_ApplyNavigationConfig
// (Final, Native, Public, BlueprintCallable)

void UCustomWidgetNavigation::BPF_ApplyNavigationConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomWidgetNavigation", "BPF_ApplyNavigationConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CustomWidgetNavigation.BPF_RestoreNavigationConfig
// (Final, Native, Public, BlueprintCallable)

void UCustomWidgetNavigation::BPF_RestoreNavigationConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomWidgetNavigation", "BPF_RestoreNavigationConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.WidgetPoolComponent.BPF_GetWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _userEnum                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCUserWidget* UWidgetPoolComponent::BPF_GetWidget(const struct FSCUserDefinedEnumHandler& _userEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetPoolComponent", "BPF_GetWidget");

	Params::WidgetPoolComponent_BPF_GetWidget Parms{};

	Parms._userEnum = std::move(_userEnum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.WidgetPoolComponent.BPF_ReleaseWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _userEnum                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    _userWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetPoolComponent::BPF_ReleaseWidget(const struct FSCUserDefinedEnumHandler& _userEnum, class USCUserWidget* _userWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetPoolComponent", "BPF_ReleaseWidget");

	Params::WidgetPoolComponent_BPF_ReleaseWidget Parms{};

	Parms._userEnum = std::move(_userEnum);
	Parms._userWidget = _userWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GroupInputConditionProxy.BPF_GetDesc
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// const struct FGroupInputConditionProxyPair&_slot                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGroupInputConditionProxy::BPF_GetDesc(const struct FGroupInputConditionProxyPair& _slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GroupInputConditionProxy", "BPF_GetDesc");

	Params::GroupInputConditionProxy_BPF_GetDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPE_SetGameOption
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOption::BPE_SetGameOption(class ASCBasePlayerController* _controller, float _fValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPE_SetGameOption");

	Params::GameOption_BPE_SetGameOption Parms{};

	Parms._controller = _controller;
	Parms._fValue = _fValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.GameOption.BPF_GetDefaultValueAsFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGameOption::BPF_GetDefaultValueAsFloat(const class UObject* _worldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_GetDefaultValueAsFloat");

	Params::GameOption_BPF_GetDefaultValueAsFloat Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPF_GetSavedValueAsBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameOption::BPF_GetSavedValueAsBool(const class UObject* _worldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_GetSavedValueAsBool");

	Params::GameOption_BPF_GetSavedValueAsBool Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPF_GetSavedValueAsFloat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGameOption::BPF_GetSavedValueAsFloat(const class UObject* _worldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_GetSavedValueAsFloat");

	Params::GameOption_BPF_GetSavedValueAsFloat Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPF_IsAppliedSaveOption
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameOption::BPF_IsAppliedSaveOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_IsAppliedSaveOption");

	Params::GameOption_BPF_IsAppliedSaveOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPF_IsVideoRelatedOption
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameOption::BPF_IsVideoRelatedOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_IsVideoRelatedOption");

	Params::GameOption_BPF_IsVideoRelatedOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption.BPF_SetGameOption
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOption::BPF_SetGameOption(class ASCBasePlayerController* _controller, float _fValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_SetGameOption");

	Params::GameOption_BPF_SetGameOption Parms{};

	Parms._controller = _controller;
	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameOption.BPF_SetGameOptionInPending
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOption::BPF_SetGameOptionInPending(const class UObject* _worldContextObject, float _fValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption", "BPF_SetGameOptionInPending");

	Params::GameOption_BPF_SetGameOptionInPending Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboScrollList.BPE_InitFromStrings
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FString>&            _list                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   _iSelectedItem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCComboScrollList::BPE_InitFromStrings(const TArray<class FString>& _list, int32 _iSelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboScrollList", "BPE_InitFromStrings");

	Params::SCComboScrollList_BPE_InitFromStrings Parms{};

	Parms._list = std::move(_list);
	Parms._iSelectedItem = _iSelectedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingDataShowSlot
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingData&         _slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMappingEditorHelpers::BPF_GetInputMappingDataShowSlot(const struct FInputMappingData& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingDataShowSlot");

	Params::MappingEditorHelpers_BPF_GetInputMappingDataShowSlot Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingDataSlotDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingData&         _data                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingDataSlotDesc(const struct FInputMappingData& _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingDataSlotDesc");

	Params::MappingEditorHelpers_BPF_GetInputMappingDataSlotDesc Parms{};

	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingGroupColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FInputMappingGroup&        _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMappingEditorHelpers::BPF_GetInputMappingGroupColor(const struct FInputMappingGroup& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingGroupColor");

	Params::MappingEditorHelpers_BPF_GetInputMappingGroupColor Parms{};

	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingGroupDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingGroup&        _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingGroupDesc(const struct FInputMappingGroup& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingGroupDesc");

	Params::MappingEditorHelpers_BPF_GetInputMappingGroupDesc Parms{};

	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingGroupTitle
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingGroup&        _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingGroupTitle(const struct FInputMappingGroup& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingGroupTitle");

	Params::MappingEditorHelpers_BPF_GetInputMappingGroupTitle Parms{};

	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingKeySlotContainerDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlotContainer&_slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingKeySlotContainerDesc(const struct FInputMappingKeySlotContainer& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingKeySlotContainerDesc");

	Params::MappingEditorHelpers_BPF_GetInputMappingKeySlotContainerDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingKeySlotContainerTitle
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlotContainer&_slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingKeySlotContainerTitle(const struct FInputMappingKeySlotContainer& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingKeySlotContainerTitle");

	Params::MappingEditorHelpers_BPF_GetInputMappingKeySlotContainerTitle Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingKeySlotDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlot&      _slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputMappingKeySlotDesc(const struct FInputMappingKeySlot& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingKeySlotDesc");

	Params::MappingEditorHelpers_BPF_GetInputMappingKeySlotDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingShowData
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlotContainer&_slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMappingEditorHelpers::BPF_GetInputMappingShowData(const struct FInputMappingKeySlotContainer& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingShowData");

	Params::MappingEditorHelpers_BPF_GetInputMappingShowData Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingShowPresetSlot
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlotContainer&_slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMappingEditorHelpers::BPF_GetInputMappingShowPresetSlot(const struct FInputMappingKeySlotContainer& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingShowPresetSlot");

	Params::MappingEditorHelpers_BPF_GetInputMappingShowPresetSlot Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputMappingShowSlot
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputMappingKeySlotContainer&_slot                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMappingEditorHelpers::BPF_GetInputMappingShowSlot(const struct FInputMappingKeySlotContainer& _slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputMappingShowSlot");

	Params::MappingEditorHelpers_BPF_GetInputMappingShowSlot Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MappingEditorHelpers.BPF_GetInputPriorityGroupDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FInputPriorityGroup&       _group                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMappingEditorHelpers::BPF_GetInputPriorityGroupDesc(const struct FInputPriorityGroup& _group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MappingEditorHelpers", "BPF_GetInputPriorityGroupDesc");

	Params::MappingEditorHelpers_BPF_GetInputPriorityGroupDesc Parms{};

	Parms._group = std::move(_group);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCComboBoxButton.BPE_SelectionChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)

void USCComboBoxButton::BPE_SelectionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "BPE_SelectionChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCComboBoxButton.BPF_InitList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            _items                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USCComboBoxButton::BPF_InitList(const TArray<class FString>& _items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "BPF_InitList");

	Params::SCComboBoxButton_BPF_InitList Parms{};

	Parms._items = std::move(_items);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboBoxButton.Onclick
// (Final, Native, Private)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCComboBoxButton::Onclick(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "Onclick");

	Params::SCComboBoxButton_Onclick Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboBoxButton.OnItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCComboBoxButton::OnItemSelected(int32 _iIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "OnItemSelected");

	Params::SCComboBoxButton_OnItemSelected Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboBoxButton.OnListClosed
// (Final, Native, Private)

void USCComboBoxButton::OnListClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "OnListClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboBoxButton.OnRightClick
// (Final, Native, Private)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCComboBoxButton::OnRightClick(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "OnRightClick");

	Params::SCComboBoxButton_OnRightClick Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCComboBoxButton.BPF_IsOpened
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCComboBoxButton::BPF_IsOpened() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCComboBoxButton", "BPF_IsOpened");

	Params::SCComboBoxButton_BPF_IsOpened Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BlueprintSingleTargetGameplayAbilityTargeting.BPF_FindSingleTarget
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// const class USCAbilitySystemComponent*  _component                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UBlueprintSingleTargetGameplayAbilityTargeting::BPF_FindSingleTarget(const class USCAbilitySystemComponent* _component) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintSingleTargetGameplayAbilityTargeting", "BPF_FindSingleTarget");

	Params::BlueprintSingleTargetGameplayAbilityTargeting_BPF_FindSingleTarget Parms{};

	Parms._component = _component;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCInputAction.GetAllInputActions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class USCInputAction*>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class USCInputAction*> USCInputAction::GetAllInputActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInputAction", "GetAllInputActions");

	Params::SCInputAction_GetAllInputActions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption_Resolution.BPF_GetResolutionsAvailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  _currentResIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FIntPoint>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FIntPoint> UGameOption_Resolution::BPF_GetResolutionsAvailable(int32* _currentResIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameOption_Resolution", "BPF_GetResolutionsAvailable");

	Params::GameOption_Resolution_BPF_GetResolutionsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_currentResIndex != nullptr)
		*_currentResIndex = Parms._currentResIndex;

	return Parms.ReturnValue;
}


// Function SCCore.GameOption_Resolution.SetResolution
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FIntPoint&                 _fValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOption_Resolution::SetResolution(const struct FIntPoint& _fValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption_Resolution", "SetResolution");

	Params::GameOption_Resolution_SetResolution Parms{};

	Parms._fValue = std::move(_fValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameOption_MaxFPS.GetIsCappedFPS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameOption_MaxFPS::GetIsCappedFPS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOption_MaxFPS", "GetIsCappedFPS");

	Params::GameOption_MaxFPS_GetIsCappedFPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.GetCurrentRemappingViewModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UProfileMappingViewModel*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProfileMappingViewModel* UGlobalMenuContextViewModel::GetCurrentRemappingViewModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "GetCurrentRemappingViewModel");

	Params::GlobalMenuContextViewModel_GetCurrentRemappingViewModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsConsole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsConsole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsConsole");

	Params::GlobalMenuContextViewModel_IsConsole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsPC");

	Params::GlobalMenuContextViewModel_IsPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsPS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsPS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsPS");

	Params::GlobalMenuContextViewModel_IsPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsUsingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsUsingGamepad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsUsingGamepad");

	Params::GlobalMenuContextViewModel_IsUsingGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsUsingKeyboard
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsUsingKeyboard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsUsingKeyboard");

	Params::GlobalMenuContextViewModel_IsUsingKeyboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsUsingPSController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsUsingPSController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsUsingPSController");

	Params::GlobalMenuContextViewModel_IsUsingPSController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsUsingXboxController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsUsingXboxController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsUsingXboxController");

	Params::GlobalMenuContextViewModel_IsUsingXboxController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GlobalMenuContextViewModel.IsXbox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalMenuContextViewModel::IsXbox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalMenuContextViewModel", "IsXbox");

	Params::GlobalMenuContextViewModel_IsXbox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MenuAsyncActionBaseHelper.BPF_CancelAsyncAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMenuAsyncActionBase*             _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuAsyncActionBaseHelper::BPF_CancelAsyncAction(class UMenuAsyncActionBase* _action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MenuAsyncActionBaseHelper", "BPF_CancelAsyncAction");

	Params::MenuAsyncActionBaseHelper_BPF_CancelAsyncAction Parms{};

	Parms._action = _action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MenuItem.BPE_OnCancelChangeWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UMenuItem::BPE_OnCancelChangeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuItem", "BPE_OnCancelChangeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MenuItem.BPE_OnCancelPressed
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMenuItem::BPE_OnCancelPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuItem", "BPE_OnCancelPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.MenuItem.BPE_OnChangeNextWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          _widgetToHide                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          _previousWidget                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          _widgetToFocusOnCancel                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuItem::BPE_OnChangeNextWidget(class UWidget* _widgetToHide, class UWidget* _previousWidget, class UWidget* _widgetToFocusOnCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuItem", "BPE_OnChangeNextWidget");

	Params::MenuItem_BPE_OnChangeNextWidget Parms{};

	Parms._widgetToHide = _widgetToHide;
	Parms._previousWidget = _previousWidget;
	Parms._widgetToFocusOnCancel = _widgetToFocusOnCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameplayTask_HandleAbility.BPF_HandleAbility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_container                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _taskOwner                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCGameplayAbility>   _abilityToActivate                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (Parm, NativeAccessSpecifierPublic)
// class UGameplayTask_HandleAbility*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_HandleAbility* UGameplayTask_HandleAbility::BPF_HandleAbility(TScriptInterface<class IGameplayTaskOwnerInterface> _container, class UAbilitySystemComponent* _taskOwner, TSubclassOf<class USCGameplayAbility> _abilityToActivate, const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_HandleAbility", "BPF_HandleAbility");

	Params::GameplayTask_HandleAbility_BPF_HandleAbility Parms{};

	Parms._container = _container;
	Parms._taskOwner = _taskOwner;
	Parms._abilityToActivate = _abilityToActivate;
	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_HandleAbility.OnAbilityEnded
// (Final, Native, Public)
// Parameters:
// class UGameplayAbility*                 _endedAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayTask_HandleAbility::OnAbilityEnded(class UGameplayAbility* _endedAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayTask_HandleAbility", "OnAbilityEnded");

	Params::GameplayTask_HandleAbility_OnAbilityEnded Parms{};

	Parms._endedAbility = _endedAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameplayTask_HandleAbility.OnAbilityEventReceived
// (Final, Native, Public)
// Parameters:
// class FName                             _eventName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayTask_HandleAbility::OnAbilityEventReceived(class FName _eventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayTask_HandleAbility", "OnAbilityEventReceived");

	Params::GameplayTask_HandleAbility_OnAbilityEventReceived Parms{};

	Parms._eventName = _eventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameplayTask_HandleAbility.OnAbilityPreActivate
// (Final, Native, Public)
// Parameters:
// class UGameplayAbility*                 _startedAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayTask_HandleAbility::OnAbilityPreActivate(class UGameplayAbility* _startedAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayTask_HandleAbility", "OnAbilityPreActivate");

	Params::GameplayTask_HandleAbility_OnAbilityPreActivate Parms{};

	Parms._startedAbility = _startedAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.GameplayTask_Tick.BPF_TaskTick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_taskOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_Tick*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_Tick* UGameplayTask_Tick::BPF_TaskTick(TScriptInterface<class IGameplayTaskOwnerInterface> _taskOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_Tick", "BPF_TaskTick");

	Params::GameplayTask_Tick_BPF_TaskTick Parms{};

	Parms._taskOwner = _taskOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_WaitForCondition.BPF_TaskWaitForCondition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>TaskOwner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _conditionToCheck                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_WaitForCondition*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_WaitForCondition* UGameplayTask_WaitForCondition::BPF_TaskWaitForCondition(TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner, TDelegate<void()> _conditionToCheck, const uint8 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_WaitForCondition", "BPF_TaskWaitForCondition");

	Params::GameplayTask_WaitForCondition_BPF_TaskWaitForCondition Parms{};

	Parms.TaskOwner = TaskOwner;
	Parms._conditionToCheck = _conditionToCheck;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveObject.BPE_FillSaveWithDefaultValues
// (Native, Event, Public, BlueprintEvent)

void USCSaveObject::BPE_FillSaveWithDefaultValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObject", "BPE_FillSaveWithDefaultValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveObject.BPE_GetDetailsInfoForSaveFile
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveObject::BPE_GetDetailsInfoForSaveFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObject", "BPE_GetDetailsInfoForSaveFile");

	Params::SCSaveObject_BPE_GetDetailsInfoForSaveFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveObject.BPE_GetIconForSaveFile
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* USCSaveObject::BPE_GetIconForSaveFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObject", "BPE_GetIconForSaveFile");

	Params::SCSaveObject_BPE_GetIconForSaveFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveObject.BPE_GetSubtitlesInfoForSaveFile
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveObject::BPE_GetSubtitlesInfoForSaveFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObject", "BPE_GetSubtitlesInfoForSaveFile");

	Params::SCSaveObject_BPE_GetSubtitlesInfoForSaveFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_WaitGameplayTagRemoved.BPF_TaskWaitAnyGameplayTagRemoved
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_container                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _taskOwner                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _tags                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    _bWaitForEndOfFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bTestInitialPresenceOfTags                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_WaitGameplayTagRemoved*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_WaitGameplayTagRemoved* UGameplayTask_WaitGameplayTagRemoved::BPF_TaskWaitAnyGameplayTagRemoved(TScriptInterface<class IGameplayTaskOwnerInterface> _container, class UAbilitySystemComponent* _taskOwner, const struct FGameplayTagContainer& _tags, bool _bWaitForEndOfFrame, bool _bTestInitialPresenceOfTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_WaitGameplayTagRemoved", "BPF_TaskWaitAnyGameplayTagRemoved");

	Params::GameplayTask_WaitGameplayTagRemoved_BPF_TaskWaitAnyGameplayTagRemoved Parms{};

	Parms._container = _container;
	Parms._taskOwner = _taskOwner;
	Parms._tags = std::move(_tags);
	Parms._bWaitForEndOfFrame = _bWaitForEndOfFrame;
	Parms._bTestInitialPresenceOfTags = _bTestInitialPresenceOfTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayTask_WaitGameplayTagRemoved.BPF_TaskWaitGameplayTagRemoved
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGameplayTaskOwnerInterface>_container                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _taskOwner                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWaitForEndOfFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bTestInitialPresenceOfTags                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_WaitGameplayTagRemoved*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_WaitGameplayTagRemoved* UGameplayTask_WaitGameplayTagRemoved::BPF_TaskWaitGameplayTagRemoved(TScriptInterface<class IGameplayTaskOwnerInterface> _container, class UAbilitySystemComponent* _taskOwner, const struct FGameplayTag& _tag, bool _bWaitForEndOfFrame, bool _bTestInitialPresenceOfTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_WaitGameplayTagRemoved", "BPF_TaskWaitGameplayTagRemoved");

	Params::GameplayTask_WaitGameplayTagRemoved_BPF_TaskWaitGameplayTagRemoved Parms{};

	Parms._container = _container;
	Parms._taskOwner = _taskOwner;
	Parms._tag = std::move(_tag);
	Parms._bWaitForEndOfFrame = _bWaitForEndOfFrame;
	Parms._bTestInitialPresenceOfTags = _bTestInitialPresenceOfTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SkelMeshLogger.BPF_GetSkeletalMeshToLogs
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class USkeletalMeshComponent*>*  _outMeshComps                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USkeletalMesh*>*           _outMeshes                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ISkelMeshLogger::BPF_GetSkeletalMeshToLogs(TArray<class USkeletalMeshComponent*>* _outMeshComps, TArray<class USkeletalMesh*>* _outMeshes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkelMeshLogger", "BPF_GetSkeletalMeshToLogs");

	Params::SkelMeshLogger_BPF_GetSkeletalMeshToLogs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMeshComps != nullptr)
		*_outMeshComps = std::move(Parms._outMeshComps);

	if (_outMeshes != nullptr)
		*_outMeshes = std::move(Parms._outMeshes);
}


// Function SCCore.SCWorldSubsystem.BPE_OnEditorTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWorldSubsystem::BPE_OnEditorTick(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldSubsystem", "BPE_OnEditorTick");

	Params::SCWorldSubsystem_BPE_OnEditorTick Parms{};

	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BindMPCParamToCharacterSocketLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       _character                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _socketName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMaterialCollectionSubsystem::BPF_BindMPCParamToCharacterSocketLocation(class ACharacter* _character, class FName _socketName, class UMaterialParameterCollection* Collection, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BindMPCParamToCharacterSocketLocation");

	Params::SCMaterialCollectionSubsystem_BPF_BindMPCParamToCharacterSocketLocation Parms{};

	Parms._character = _character;
	Parms._socketName = _socketName;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterCurve
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCurveBase*                 _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterCurve(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const class UCurveBase* _curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterCurve");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterCurve Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._curve = _curve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterCurveFinishable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCurveBase*                 _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterCurveFinishable(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const class UCurveBase* _curve, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterCurveFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterCurveFinishable Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._curve = _curve;
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearColor(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FLinearColor& _fromValue, const struct FLinearColor& _toValue, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearColor");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearColor Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearColorFinishable
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearColorFinishable(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FLinearColor& _fromValue, const struct FLinearColor& _toValue, float _fDuration, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearColorFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearColorFinishable Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fFromValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fToValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearFloat(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, float _fFromValue, float _fToValue, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearFloat");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearFloat Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fFromValue = _fFromValue;
	Parms._fToValue = _fToValue;
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearFloatFinishable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fFromValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fToValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearFloatFinishable(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, float _fFromValue, float _fToValue, float _fDuration, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearFloatFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearFloatFinishable Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fFromValue = _fFromValue;
	Parms._fToValue = _fToValue;
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearVector(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FVector& _fromValue, const struct FVector& _toValue, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearVector");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearVector Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_Blend_MPC_ParameterLinearVectorFinishable
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_Blend_MPC_ParameterLinearVectorFinishable(class UObject* _owner, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FVector& _fromValue, const struct FVector& _toValue, float _fDuration, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_Blend_MPC_ParameterLinearVectorFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_Blend_MPC_ParameterLinearVectorFinishable Parms{};

	Parms._owner = _owner;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterCurve
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCurveBase*                 _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterCurve(class UMeshComponent* _owner, class FName _name, const class UCurveBase* _curve, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterCurve");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterCurve Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._curve = _curve;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterCurveFinishable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCurveBase*                 _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterCurveFinishable(class UMeshComponent* _owner, class FName _name, const class UCurveBase* _curve, TDelegate<void()> _onFinished, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterCurveFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterCurveFinishable Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._curve = _curve;
	Parms._onFinished = _onFinished;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearColor(class UMeshComponent* _owner, class FName _name, const struct FLinearColor& _fromValue, const struct FLinearColor& _toValue, float _fDuration, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearColor");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearColor Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearColorFinishable
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearColorFinishable(class UMeshComponent* _owner, class FName _name, const struct FLinearColor& _fromValue, const struct FLinearColor& _toValue, float _fDuration, TDelegate<void()> _onFinished, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearColorFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearColorFinishable Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fFromValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fToValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearFloat(class UMeshComponent* _owner, class FName _name, float _fFromValue, float _fToValue, float _fDuration, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearFloat");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearFloat Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fFromValue = _fFromValue;
	Parms._fToValue = _fToValue;
	Parms._fDuration = _fDuration;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearFloatFinishable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fFromValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fToValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearFloatFinishable(class UMeshComponent* _owner, class FName _name, float _fFromValue, float _fToValue, float _fDuration, TDelegate<void()> _onFinished, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearFloatFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearFloatFinishable Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fFromValue = _fFromValue;
	Parms._fToValue = _fToValue;
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearVector(class UMeshComponent* _owner, class FName _name, const struct FVector& _fromValue, const struct FVector& _toValue, float _fDuration, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearVector");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearVector Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_BlendMaterialParameterLinearVectorFinishable
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _fromValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _toValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iMaterialIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_BlendMaterialParameterLinearVectorFinishable(class UMeshComponent* _owner, class FName _name, const struct FVector& _fromValue, const struct FVector& _toValue, float _fDuration, TDelegate<void()> _onFinished, int32 _iMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_BlendMaterialParameterLinearVectorFinishable");

	Params::SCMaterialCollectionSubsystem_BPF_BlendMaterialParameterLinearVectorFinishable Parms{};

	Parms._owner = _owner;
	Parms._name = _name;
	Parms._fromValue = std::move(_fromValue);
	Parms._toValue = std::move(_toValue);
	Parms._fDuration = _fDuration;
	Parms._onFinished = _onFinished;
	Parms._iMaterialIndex = _iMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_DeleteParameterBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_DeleteParameterBinding(const class UObject* _worldContext, int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_DeleteParameterBinding");

	Params::SCMaterialCollectionSubsystem_BPF_DeleteParameterBinding Parms{};

	Parms._worldContext = _worldContext;
	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_SetMPCScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPropagateToSubworlds                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_SetMPCScalarParameterValue(const class UObject* _worldContext, class UMaterialParameterCollection* Collection, class FName ParameterName, float _fValue, bool _bPropagateToSubworlds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_SetMPCScalarParameterValue");

	Params::SCMaterialCollectionSubsystem_BPF_SetMPCScalarParameterValue Parms{};

	Parms._worldContext = _worldContext;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._fValue = _fValue;
	Parms._bPropagateToSubworlds = _bPropagateToSubworlds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_SetMPCVectorParameterValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialParameterCollection*     Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPropagateToSubworlds                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_SetMPCVectorParameterValue(const class UObject* _worldContext, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FVector& _vValue, bool _bPropagateToSubworlds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_SetMPCVectorParameterValue");

	Params::SCMaterialCollectionSubsystem_BPF_SetMPCVectorParameterValue Parms{};

	Parms._worldContext = _worldContext;
	Parms.Collection = Collection;
	Parms.ParameterName = ParameterName;
	Parms._vValue = std::move(_vValue);
	Parms._bPropagateToSubworlds = _bPropagateToSubworlds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialCollectionSubsystem.BPF_SetRawIntegerParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         _material                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _parameterName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialCollectionSubsystem::BPF_SetRawIntegerParameterValue(class UMaterialInstanceDynamic* _material, class FName _parameterName, int32 _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialCollectionSubsystem", "BPF_SetRawIntegerParameterValue");

	Params::SCMaterialCollectionSubsystem_BPF_SetRawIntegerParameterValue Parms{};

	Parms._material = _material;
	Parms._parameterName = _parameterName;
	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWidgetComponent.BPE_NotifyWidgetEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_dataHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCWidgetComponent::BPE_NotifyWidgetEvent(const struct FGameplayTag& _tag, const struct FGameplayAbilityTargetDataHandle& _dataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetComponent", "BPE_NotifyWidgetEvent");

	Params::SCWidgetComponent_BPE_NotifyWidgetEvent Parms{};

	Parms._tag = std::move(_tag);
	Parms._dataHandle = std::move(_dataHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_ApplyBinaryOperation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle&_targetDataHandle                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _name                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCMathConditionExpression              _eOperator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayAbilityTargetingHelpers::BPF_ApplyBinaryOperation(struct FGameplayAbilityTargetDataHandle& _targetDataHandle, bool _bValue, const struct FGameplayTag& _name, ESCMathConditionExpression _eOperator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_ApplyBinaryOperation");

	Params::GameplayAbilityTargetingHelpers_BPF_ApplyBinaryOperation Parms{};

	Parms._targetDataHandle = std::move(_targetDataHandle);
	Parms._bValue = _bValue;
	Parms._name = std::move(_name);
	Parms._eOperator = _eOperator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetDataHandle = std::move(Parms._targetDataHandle);
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_FindSingleTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGameplayAbilityTargetingHelpers::BPF_FindSingleTarget(const struct FGameplayAbilityTargetDataHandle& _handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_FindSingleTarget");

	Params::GameplayAbilityTargetingHelpers_BPF_FindSingleTarget Parms{};

	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_GetNamedEnumValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNamedEnumTargetData&      _enum                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UEnum*                      _enumObject                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGameplayAbilityTargetingHelpers::BPF_GetNamedEnumValue(const struct FNamedEnumTargetData& _enum, const class UEnum* _enumObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_GetNamedEnumValue");

	Params::GameplayAbilityTargetingHelpers_BPF_GetNamedEnumValue Parms{};

	Parms._enum = std::move(_enum);
	Parms._enumObject = _enumObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_MakeActorLocationTargetDataFromActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActorLocationTargetData*        _result                                                (Parm, OutParm, NativeAccessSpecifierPublic)

void UGameplayAbilityTargetingHelpers::BPF_MakeActorLocationTargetDataFromActor(class AActor* _actor, class AActor* _target, struct FActorLocationTargetData* _result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_MakeActorLocationTargetDataFromActor");

	Params::GameplayAbilityTargetingHelpers_BPF_MakeActorLocationTargetDataFromActor Parms{};

	Parms._actor = _actor;
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_result != nullptr)
		*_result = std::move(Parms._result);
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_MakeNamedEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   _enum                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnum*                            _enumObject                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNamedEnumTargetData             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FNamedEnumTargetData UGameplayAbilityTargetingHelpers::BPF_MakeNamedEnum(uint8 _enum, class UEnum* _enumObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_MakeNamedEnum");

	Params::GameplayAbilityTargetingHelpers_BPF_MakeNamedEnum Parms{};

	Parms._enum = _enum;
	Parms._enumObject = _enumObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_MakeNamedVectorNetQuantTargetData
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vector                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNamedVectorQuantTargetData      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FNamedVectorQuantTargetData UGameplayAbilityTargetingHelpers::BPF_MakeNamedVectorNetQuantTargetData(const struct FGameplayTag& _tag, const struct FVector& _vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_MakeNamedVectorNetQuantTargetData");

	Params::GameplayAbilityTargetingHelpers_BPF_MakeNamedVectorNetQuantTargetData Parms{};

	Parms._tag = std::move(_tag);
	Parms._vector = std::move(_vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_SetNamedBoolTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin*                     _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _name                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsureIfMissing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayAbilityTargetingHelpers::BPF_SetNamedBoolTargetData(EAbilityExecOrigin _eIn, EAbilityExecOrigin* _eOut, class USCGameplayAbility* _ability, const struct FGameplayAbilityTargetDataHandle& _playerContext, const struct FGameplayTag& _name, bool _bValue, bool _bEnsureIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_SetNamedBoolTargetData");

	Params::GameplayAbilityTargetingHelpers_BPF_SetNamedBoolTargetData Parms{};

	Parms._eIn = _eIn;
	Parms._ability = _ability;
	Parms._playerContext = std::move(_playerContext);
	Parms._name = std::move(_name);
	Parms._bValue = _bValue;
	Parms._bEnsureIfMissing = _bEnsureIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_SetNamedFloatTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin*                     _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _name                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsureIfMissing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGameplayAbilityTargetingHelpers::BPF_SetNamedFloatTargetData(EAbilityExecOrigin _eIn, EAbilityExecOrigin* _eOut, class USCGameplayAbility* _ability, const struct FGameplayAbilityTargetDataHandle& _playerContext, const struct FGameplayTag& _name, float _fValue, bool _bEnsureIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_SetNamedFloatTargetData");

	Params::GameplayAbilityTargetingHelpers_BPF_SetNamedFloatTargetData Parms{};

	Parms._eIn = _eIn;
	Parms._ability = _ability;
	Parms._playerContext = std::move(_playerContext);
	Parms._name = std::move(_name);
	Parms._fValue = _fValue;
	Parms._bEnsureIfMissing = _bEnsureIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.GameplayAbilityTargetingHelpers.BPF_SetNamedIntegerTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin*                     _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_playerContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _name                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsureIfMissing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGameplayAbilityTargetingHelpers::BPF_SetNamedIntegerTargetData(EAbilityExecOrigin _eIn, EAbilityExecOrigin* _eOut, class USCGameplayAbility* _ability, const struct FGameplayAbilityTargetDataHandle& _playerContext, const struct FGameplayTag& _name, int32 _iValue, bool _bEnsureIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayAbilityTargetingHelpers", "BPF_SetNamedIntegerTargetData");

	Params::GameplayAbilityTargetingHelpers_BPF_SetNamedIntegerTargetData Parms{};

	Parms._eIn = _eIn;
	Parms._ability = _ability;
	Parms._playerContext = std::move(_playerContext);
	Parms._name = std::move(_name);
	Parms._iValue = _iValue;
	Parms._bEnsureIfMissing = _bEnsureIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuWidget.BPE_OnMenuTransitionIn
// (Event, Protected, BlueprintEvent)
// Parameters:
// EMenuTransitions                        _eTransition                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCMenuWidget>        _ePrevMenu                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuWidget::BPE_OnMenuTransitionIn(EMenuTransitions _eTransition, TSubclassOf<class USCMenuWidget> _ePrevMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPE_OnMenuTransitionIn");

	Params::SCMenuWidget_BPE_OnMenuTransitionIn Parms{};

	Parms._eTransition = _eTransition;
	Parms._ePrevMenu = _ePrevMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCMenuWidget.BPE_OnMenuTransitionOut
// (Event, Protected, BlueprintEvent)
// Parameters:
// EMenuTransitions                        _eTransition                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCMenuWidget>        _eNewMenu                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuWidget::BPE_OnMenuTransitionOut(EMenuTransitions _eTransition, TSubclassOf<class USCMenuWidget> _eNewMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPE_OnMenuTransitionOut");

	Params::SCMenuWidget_BPE_OnMenuTransitionOut Parms{};

	Parms._eTransition = _eTransition;
	Parms._eNewMenu = _eNewMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCMenuWidget.BPF_DisableInputs
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)

void USCMenuWidget::BPF_DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_DisableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuWidget.BPF_EnableInputs
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)

void USCMenuWidget::BPF_EnableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_EnableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuWidget.BPF_ResetLastFocusedChild
// (Final, Native, Public, BlueprintCallable)

void USCMenuWidget::BPF_ResetLastFocusedChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_ResetLastFocusedChild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuWidget.BPF_AreInputsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMenuWidget::BPF_AreInputsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_AreInputsEnabled");

	Params::SCMenuWidget_BPF_AreInputsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuWidget.BPF_GetZOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMenuWidget::BPF_GetZOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_GetZOrder");

	Params::SCMenuWidget_BPF_GetZOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuWidget.BPF_IsCurrentMenu
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMenuWidget::BPF_IsCurrentMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuWidget", "BPF_IsCurrentMenu");

	Params::SCMenuWidget_BPF_IsCurrentMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphNode.BPE_EnteringState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          _stateMachineOwner                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      _previousStateId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCFlowGraphNode::BPE_EnteringState(class UObject* _stateMachineOwner, const class FName& _previousStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPE_EnteringState");

	Params::SCFlowGraphNode_BPE_EnteringState Parms{};

	Parms._stateMachineOwner = _stateMachineOwner;
	Parms._previousStateId = _previousStateId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCFlowGraphNode.BPE_ExitingState
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          _stateMachineOwner                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCFlowGraphNode::BPE_ExitingState(class UObject* _stateMachineOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPE_ExitingState");

	Params::SCFlowGraphNode_BPE_ExitingState Parms{};

	Parms._stateMachineOwner = _stateMachineOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCFlowGraphNode.BPF_ExitState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _exitName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCFlowGraphNode::BPF_ExitState(const struct FGameplayTag& _exitName, const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_ExitState");

	Params::SCFlowGraphNode_BPF_ExitState Parms{};

	Parms._exitName = std::move(_exitName);
	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraphNode.BPF_StartSubFlowGraph
// (Final, Native, Public, BlueprintCallable)

void USCFlowGraphNode::BPF_StartSubFlowGraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_StartSubFlowGraph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraphNode.OnActiveExitConditionTriggered
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_eventData                                             (Parm, NativeAccessSpecifierPublic)
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCFlowGraphNode::OnActiveExitConditionTriggered(const struct FGameplayAbilityTargetDataHandle& _eventData, class FName _transitionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "OnActiveExitConditionTriggered");

	Params::SCFlowGraphNode_OnActiveExitConditionTriggered Parms{};

	Parms._eventData = std::move(_eventData);
	Parms._transitionName = _transitionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraphNode.OnExitSubGraph
// (Native, Protected)
// Parameters:
// const struct FGameplayTag&              _exitName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCFlowGraphNode::OnExitSubGraph(const struct FGameplayTag& _exitName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "OnExitSubGraph");

	Params::SCFlowGraphNode_OnExitSubGraph Parms{};

	Parms._exitName = std::move(_exitName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraphNode.BPE_GetDebutLog
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCFlowGraphNode::BPE_GetDebutLog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPE_GetDebutLog");

	Params::SCFlowGraphNode_BPE_GetDebutLog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphNode.BPF_GetGraph
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCFlowGraph*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCFlowGraph* USCFlowGraphNode::BPF_GetGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_GetGraph");

	Params::SCFlowGraphNode_BPF_GetGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphNode.BPF_GetGraphOwner
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USCFlowGraphNode::BPF_GetGraphOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_GetGraphOwner");

	Params::SCFlowGraphNode_BPF_GetGraphOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphNode.BPF_GetProvidedTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_outTargetData                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void USCFlowGraphNode::BPF_GetProvidedTargetData(struct FGameplayAbilityTargetDataHandle* _outTargetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_GetProvidedTargetData");

	Params::SCFlowGraphNode_BPF_GetProvidedTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outTargetData != nullptr)
		*_outTargetData = std::move(Parms._outTargetData);
}


// Function SCCore.SCFlowGraphNode.BPF_GetSubGraph
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCFlowGraph*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCFlowGraph* USCFlowGraphNode::BPF_GetSubGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "BPF_GetSubGraph");

	Params::SCFlowGraphNode_BPF_GetSubGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphNode.GetOutputTransitionNames
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USCFlowGraphNode::GetOutputTransitionNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphNode", "GetOutputTransitionNames");

	Params::SCFlowGraphNode_GetOutputTransitionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFootIkRaycast.DoRaycast
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult*                      _outHitResult                                          (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USCFootIkAnimInstance*            _footAnimInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vStart                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vEnd                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCFootIkRaycast::DoRaycast(struct FHitResult* _outHitResult, class USCFootIkAnimInstance* _footAnimInstance, const struct FVector& _vStart, const struct FVector& _vEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFootIkRaycast", "DoRaycast");

	Params::SCFootIkRaycast_DoRaycast Parms{};

	Parms._footAnimInstance = _footAnimInstance;
	Parms._vStart = std::move(_vStart);
	Parms._vEnd = std::move(_vEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outHitResult != nullptr)
		*_outHitResult = std::move(Parms._outHitResult);

	return Parms.ReturnValue;
}


// Function SCCore.ConditionalTargetDatasource.GetConditionalTargetDatasourceDataEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FConditionalTargetDatasourceData&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConditionalTargetDatasource::GetConditionalTargetDatasourceDataEditorDesc(const struct FConditionalTargetDatasourceData& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConditionalTargetDatasource", "GetConditionalTargetDatasourceDataEditorDesc");

	Params::ConditionalTargetDatasource_GetConditionalTargetDatasourceDataEditorDesc Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ConditionalTargetDatasource.GetConditionalTargetDatasourceDataNodalEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FConditionalTargetDatasourceData&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConditionalTargetDatasource::GetConditionalTargetDatasourceDataNodalEditorDesc(const struct FConditionalTargetDatasourceData& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConditionalTargetDatasource", "GetConditionalTargetDatasourceDataNodalEditorDesc");

	Params::ConditionalTargetDatasource_GetConditionalTargetDatasourceDataNodalEditorDesc Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ConditionalTargetDatasource.GetFallbackName
// (Final, Native, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConditionalTargetDatasource::GetFallbackName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConditionalTargetDatasource", "GetFallbackName");

	Params::ConditionalTargetDatasource_GetFallbackName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.ReachableOnTimeTargetDatasource.BPF_EvaluateTargetSpeed
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETargetReachableOnTimeWithLocoCondition_ResultReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETargetReachableOnTimeWithLocoCondition_Result UReachableOnTimeTargetDatasource::BPF_EvaluateTargetSpeed(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _handle, bool _bLog) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReachableOnTimeTargetDatasource", "BPF_EvaluateTargetSpeed");

	Params::ReachableOnTimeTargetDatasource_BPF_EvaluateTargetSpeed Parms{};

	Parms._actor = _actor;
	Parms._handle = std::move(_handle);
	Parms._bLog = _bLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolableActorsContainer.BPF_AddActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _poolName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRenameWithPoolName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASCPoolableActorsContainer::BPF_AddActor(TSubclassOf<class AActor> _class, class FName _poolName, bool _bRenameWithPoolName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPoolableActorsContainer", "BPF_AddActor");

	Params::SCPoolableActorsContainer_BPF_AddActor Parms{};

	Parms._class = _class;
	Parms._poolName = _poolName;
	Parms._bRenameWithPoolName = _bRenameWithPoolName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolableActorsContainer.BPF_AddActors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iCount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>*                  _outCreatedActors                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             _poolName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCPoolableActorsContainer::BPF_AddActors(TSubclassOf<class AActor> _class, int32 _iCount, TArray<class AActor*>* _outCreatedActors, class FName _poolName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPoolableActorsContainer", "BPF_AddActors");

	Params::SCPoolableActorsContainer_BPF_AddActors Parms{};

	Parms._class = _class;
	Parms._iCount = _iCount;
	Parms._poolName = _poolName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outCreatedActors != nullptr)
		*_outCreatedActors = std::move(Parms._outCreatedActors);
}


// Function SCCore.SCPoolableActorsContainer.BPF_AddCharacterImpostor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             _poolName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRenameWithPoolName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCCharacterImpostor*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASCCharacterImpostor* ASCPoolableActorsContainer::BPF_AddCharacterImpostor(class FName _poolName, bool _bRenameWithPoolName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPoolableActorsContainer", "BPF_AddCharacterImpostor");

	Params::SCPoolableActorsContainer_BPF_AddCharacterImpostor Parms{};

	Parms._poolName = _poolName;
	Parms._bRenameWithPoolName = _bRenameWithPoolName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolableActorsContainer.BPF_GetActorsCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASCPoolableActorsContainer::BPF_GetActorsCount(TSubclassOf<class AActor> _class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPoolableActorsContainer", "BPF_GetActorsCount");

	Params::SCPoolableActorsContainer_BPF_GetActorsCount Parms{};

	Parms._class = _class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_Equal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _enum1                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCUserDefinedEnumHandler& _enum2                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserDefinedEnumHandlerHelper::BPF_Equal(const struct FSCUserDefinedEnumHandler& _enum1, const struct FSCUserDefinedEnumHandler& _enum2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_Equal");

	Params::SCUserDefinedEnumHandlerHelper_BPF_Equal Parms{};

	Parms._enum1 = std::move(_enum1);
	Parms._enum2 = std::move(_enum2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_GetEnumDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _enum                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USCUserDefinedEnumHandlerHelper::BPF_GetEnumDisplayName(const struct FSCUserDefinedEnumHandler& _enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_GetEnumDisplayName");

	Params::SCUserDefinedEnumHandlerHelper_BPF_GetEnumDisplayName Parms{};

	Parms._enum = std::move(_enum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_GetEnumNameValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _enum                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USCUserDefinedEnumHandlerHelper::BPF_GetEnumNameValue(const struct FSCUserDefinedEnumHandler& _enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_GetEnumNameValue");

	Params::SCUserDefinedEnumHandlerHelper_BPF_GetEnumNameValue Parms{};

	Parms._enum = std::move(_enum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_GetEnumValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _enum                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      _enumObject                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USCUserDefinedEnumHandlerHelper::BPF_GetEnumValue(const struct FSCUserDefinedEnumHandler& _enum, const class UEnum* _enumObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_GetEnumValue");

	Params::SCUserDefinedEnumHandlerHelper_BPF_GetEnumValue Parms{};

	Parms._enum = std::move(_enum);
	Parms._enumObject = _enumObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_IsEnumValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _enum                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserDefinedEnumHandlerHelper::BPF_IsEnumValid(const struct FSCUserDefinedEnumHandler& _enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_IsEnumValid");

	Params::SCUserDefinedEnumHandlerHelper_BPF_IsEnumValid Parms{};

	Parms._enum = std::move(_enum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_SetEnumValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCUserDefinedEnumHandler&       _enum                                                  (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiEnumValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserDefinedEnumHandlerHelper::BPF_SetEnumValue(struct FSCUserDefinedEnumHandler& _enum, uint8 _uiEnumValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_SetEnumValue");

	Params::SCUserDefinedEnumHandlerHelper_BPF_SetEnumValue Parms{};

	Parms._enum = std::move(_enum);
	Parms._uiEnumValue = _uiEnumValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_enum = std::move(Parms._enum);
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.ConvertEnumToCustomSCUserEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                            _enum                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _Value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCUserDefinedEnumHandler*       _outNetOrderStruct                                     (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUserDefinedEnumHandlerHelper::ConvertEnumToCustomSCUserEnum(class UEnum* _enum, uint8 _Value, struct FSCUserDefinedEnumHandler* _outNetOrderStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUserDefinedEnumHandlerHelper", "ConvertEnumToCustomSCUserEnum");

	Params::SCUserDefinedEnumHandlerHelper_ConvertEnumToCustomSCUserEnum Parms{};

	Parms._enum = _enum;
	Parms._Value = _Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outNetOrderStruct != nullptr)
		*_outNetOrderStruct = std::move(Parms._outNetOrderStruct);
}


// Function SCCore.SCUserDefinedEnumHandlerHelper.BPF_FindUserDefinedAvailableKey
// (Final, Native, Public)
// Parameters:
// int64                                   _structPtr                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUserDefinedEnumHandlerHelper::BPF_FindUserDefinedAvailableKey(int64 _structPtr, int32 _iIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUserDefinedEnumHandlerHelper", "BPF_FindUserDefinedAvailableKey");

	Params::SCUserDefinedEnumHandlerHelper_BPF_FindUserDefinedAvailableKey Parms{};

	Parms._structPtr = _structPtr;
	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCVideoPointLightComponent.OnMediaOpen
// (Final, Native, Public)
// Parameters:
// const class FString&                    _openedUrl                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVideoPointLightComponent::OnMediaOpen(const class FString& _openedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVideoPointLightComponent", "OnMediaOpen");

	Params::SCVideoPointLightComponent_OnMediaOpen Parms{};

	Parms._openedUrl = std::move(_openedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeActor.BPF_GetVolumeComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCVolumeComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCVolumeComponent* ASCVolumeActor::BPF_GetVolumeComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeActor", "BPF_GetVolumeComponent");

	Params::SCVolumeActor_BPF_GetVolumeComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCVolumePortalActor.BPF_GetPortalVolumeComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCVolumePortalComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCVolumePortalComponent* ASCVolumePortalActor::BPF_GetPortalVolumeComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumePortalActor", "BPF_GetPortalVolumeComponent");

	Params::SCVolumePortalActor_BPF_GetPortalVolumeComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputHelpers.BPF_ComputeDurationUsingInput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FReplicatedInputActionInfos&_inputInfos                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UCurveFloat*                _fillFactorByAnalogPressValueCurve                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  _fInOutDuration                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  _fInOutInputHoldDuration                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputHelpers::BPF_ComputeDurationUsingInput(const struct FReplicatedInputActionInfos& _inputInfos, const class UCurveFloat* _fillFactorByAnalogPressValueCurve, float& _fInOutDuration, float& _fInOutInputHoldDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputHelpers", "BPF_ComputeDurationUsingInput");

	Params::InputHelpers_BPF_ComputeDurationUsingInput Parms{};

	Parms._inputInfos = std::move(_inputInfos);
	Parms._fillFactorByAnalogPressValueCurve = _fillFactorByAnalogPressValueCurve;
	Parms._fInOutDuration = _fInOutDuration;
	Parms._fInOutInputHoldDuration = _fInOutInputHoldDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_fInOutDuration = Parms._fInOutDuration;
	_fInOutInputHoldDuration = Parms._fInOutInputHoldDuration;
}


// Function SCCore.InputHelpers.BPF_ComputeDurationUsingInputState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInputActionState&         _inputState                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UCurveFloat*                _fillFactorByAnalogPressValueCurve                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  _fInOutDuration                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  _fInOutInputHoldDuration                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputHelpers::BPF_ComputeDurationUsingInputState(const struct FInputActionState& _inputState, const class UCurveFloat* _fillFactorByAnalogPressValueCurve, float& _fInOutDuration, float& _fInOutInputHoldDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputHelpers", "BPF_ComputeDurationUsingInputState");

	Params::InputHelpers_BPF_ComputeDurationUsingInputState Parms{};

	Parms._inputState = std::move(_inputState);
	Parms._fillFactorByAnalogPressValueCurve = _fillFactorByAnalogPressValueCurve;
	Parms._fInOutDuration = _fInOutDuration;
	Parms._fInOutInputHoldDuration = _fInOutInputHoldDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_fInOutDuration = Parms._fInOutDuration;
	_fInOutInputHoldDuration = Parms._fInOutInputHoldDuration;
}


// Function SCCore.InputHelpers.BPF_GetInputActionPressedDurationNormalized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _eInputAction                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInputHelpers::BPF_GetInputActionPressedDurationNormalized(class ASCBasePlayerController* _PlayerController, class USCInputAction* _eInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputHelpers", "BPF_GetInputActionPressedDurationNormalized");

	Params::InputHelpers_BPF_GetInputActionPressedDurationNormalized Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._eInputAction = _eInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputHelpers.BPF_TransformInputVectorUsingOrientation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 _vInputVector                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     _qOrientation                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UInputHelpers::BPF_TransformInputVectorUsingOrientation(const struct FVector2D& _vInputVector, const struct FQuat& _qOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputHelpers", "BPF_TransformInputVectorUsingOrientation");

	Params::InputHelpers_BPF_TransformInputVectorUsingOrientation Parms{};

	Parms._vInputVector = std::move(_vInputVector);
	Parms._qOrientation = std::move(_qOrientation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCurveHelpers.BPF_ComputeVectorCurveTotalLength
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCurveVector*               _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fPercentagePerStep                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCurveHelpers::BPF_ComputeVectorCurveTotalLength(const class UCurveVector* _curve, const float _fPercentagePerStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCurveHelpers", "BPF_ComputeVectorCurveTotalLength");

	Params::SCCurveHelpers_BPF_ComputeVectorCurveTotalLength Parms{};

	Parms._curve = _curve;
	Parms._fPercentagePerStep = _fPercentagePerStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCurveHelpers.BPF_EvaluateFloatCurveAtPercentage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCurveFloat*                _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fPercentage                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCurveHelpers::BPF_EvaluateFloatCurveAtPercentage(const class UCurveFloat* _curve, const float _fPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCurveHelpers", "BPF_EvaluateFloatCurveAtPercentage");

	Params::SCCurveHelpers_BPF_EvaluateFloatCurveAtPercentage Parms{};

	Parms._curve = _curve;
	Parms._fPercentage = _fPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCurveHelpers.BPF_EvaluateVectorCurveAtPercentage
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCurveVector*               _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fPercentage                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCurveHelpers::BPF_EvaluateVectorCurveAtPercentage(const class UCurveVector* _curve, const float _fPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCurveHelpers", "BPF_EvaluateVectorCurveAtPercentage");

	Params::SCCurveHelpers_BPF_EvaluateVectorCurveAtPercentage Parms{};

	Parms._curve = _curve;
	Parms._fPercentage = _fPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCurveHelpers.SearchReciprocalValueInCurve
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCurveFloat*                _curve                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fY                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCurveHelpers::SearchReciprocalValueInCurve(const class UCurveFloat* _curve, const float _fY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCurveHelpers", "SearchReciprocalValueInCurve");

	Params::SCCurveHelpers_SearchReciprocalValueInCurve Parms{};

	Parms._curve = _curve;
	Parms._fY = _fY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStatControllerBase.Deactivate
// (Native, Public)

void USCStatControllerBase::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatControllerBase", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatControllerBase.Reset
// (Native, Public)
// Parameters:
// bool                                    _bResetHistoric                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatControllerBase::Reset(bool _bResetHistoric, bool _bResetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatControllerBase", "Reset");

	Params::SCStatControllerBase_Reset Parms{};

	Parms._bResetHistoric = _bResetHistoric;
	Parms._bResetValue = _bResetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatControllerBase.SetIsActive
// (Native, Public)
// Parameters:
// bool                                    _bIsActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatControllerBase::SetIsActive(bool _bIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatControllerBase", "SetIsActive");

	Params::SCStatControllerBase_SetIsActive Parms{};

	Parms._bIsActive = _bIsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatControllerComposite.OnChildValueChanged
// (Native, Public, HasOutParams)
// Parameters:
// const struct FSCStatId&                 _childStatId                                           (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _childValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatControllerComposite::OnChildValueChanged(const struct FSCStatId& _childStatId, float _childValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatControllerComposite", "OnChildValueChanged");

	Params::SCStatControllerComposite_OnChildValueChanged Parms{};

	Parms._childStatId = std::move(_childStatId);
	Parms._childValue = _childValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.WidgetData.BPF_NotifyDataUpdated
// (Final, Native, Public, BlueprintCallable)

void UWidgetData::BPF_NotifyDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetData", "BPF_NotifyDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_ApplyCurrentInputMapping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_ApplyCurrentInputMapping(class ASCBasePlayerController* _controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_ApplyCurrentInputMapping");

	Params::InputMappingHelpers_BPF_ApplyCurrentInputMapping Parms{};

	Parms._controller = _controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_ApplyInputRemapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_ApplyInputRemapping(class ASCBasePlayerController* _controller, const struct FInputMappingProfileData& _mappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_ApplyInputRemapping");

	Params::InputMappingHelpers_BPF_ApplyInputRemapping Parms{};

	Parms._controller = _controller;
	Parms._mappingContext = std::move(_mappingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_BreakDependencyWithPreset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInputMappingProfileData&  _inOutMappingContext                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FInputMappingData                ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FInputMappingData UInputMappingHelpers::BPF_BreakDependencyWithPreset(const struct FInputMappingProfileData& _inOutMappingContext, const struct FInputMappingData& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_BreakDependencyWithPreset");

	Params::InputMappingHelpers_BPF_BreakDependencyWithPreset Parms{};

	Parms._inOutMappingContext = std::move(_inOutMappingContext);
	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_BreakMappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   _bOutUsePreset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction**                  _eOutAction                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputPresetsEnumHandler*        _eOutPreset                                            (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_BreakMappingID(const struct FMappingID& _mappingID, bool* _bOutUsePreset, class USCInputAction** _eOutAction, struct FInputPresetsEnumHandler* _eOutPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_BreakMappingID");

	Params::InputMappingHelpers_BPF_BreakMappingID Parms{};

	Parms._mappingID = std::move(_mappingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutUsePreset != nullptr)
		*_bOutUsePreset = Parms._bOutUsePreset;

	if (_eOutAction != nullptr)
		*_eOutAction = Parms._eOutAction;

	if (_eOutPreset != nullptr)
		*_eOutPreset = std::move(Parms._eOutPreset);
}


// Function SCCore.InputMappingHelpers.BPF_BuildContextFromProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData*        _outMappingContext                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileEnumHandler&_profile                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_BuildContextFromProfile(const class UObject* _worldCtxt, struct FInputMappingProfileData* _outMappingContext, const struct FInputMappingProfileEnumHandler& _profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_BuildContextFromProfile");

	Params::InputMappingHelpers_BPF_BuildContextFromProfile Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._profile = std::move(_profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMappingContext != nullptr)
		*_outMappingContext = std::move(Parms._outMappingContext);
}


// Function SCCore.InputMappingHelpers.BPF_CreateMappingFromSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInputMappingProfileData&  _inMappingContext                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _item                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FInputMappingKeySlotContainer>&_slots                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputMappingData*               _outMapping                                            (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bBreakDependencies                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_CreateMappingFromSlots(const struct FInputMappingProfileData& _inMappingContext, const struct FMappingID& _item, const TArray<struct FInputMappingKeySlotContainer>& _slots, struct FInputMappingData* _outMapping, bool _bBreakDependencies, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_CreateMappingFromSlots");

	Params::InputMappingHelpers_BPF_CreateMappingFromSlots Parms{};

	Parms._inMappingContext = std::move(_inMappingContext);
	Parms._item = std::move(_item);
	Parms._slots = std::move(_slots);
	Parms._bBreakDependencies = _bBreakDependencies;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMapping != nullptr)
		*_outMapping = std::move(Parms._outMapping);

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetActionFirstContext
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCInputAction*                   _eAction                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputContext*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCInputContext* UInputMappingHelpers::BPF_GetActionFirstContext(class USCInputAction* _eAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetActionFirstContext");

	Params::InputMappingHelpers_BPF_GetActionFirstContext Parms{};

	Parms._eAction = _eAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetAuthorizedCombinationCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInt32Range                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInt32Range UInputMappingHelpers::BPF_GetAuthorizedCombinationCount(const struct FMappingID& _mappingID, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetAuthorizedCombinationCount");

	Params::InputMappingHelpers_BPF_GetAuthorizedCombinationCount Parms{};

	Parms._mappingID = std::move(_mappingID);
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetAvailableInputDatas
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _mappingID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mappingData                                           (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UInputConditionData>>*_outAvailableInputData                                 (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetAvailableInputDatas(const struct FInputMappingProfileData& _mappingContext, bool _bGamePad, const struct FMappingID& _mappingID, const struct FInputMappingData& _mappingData, TArray<TSubclassOf<class UInputConditionData>>* _outAvailableInputData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetAvailableInputDatas");

	Params::InputMappingHelpers_BPF_GetAvailableInputDatas Parms{};

	Parms._mappingContext = std::move(_mappingContext);
	Parms._bGamePad = _bGamePad;
	Parms._mappingID = std::move(_mappingID);
	Parms._mappingData = std::move(_mappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outAvailableInputData != nullptr)
		*_outAvailableInputData = std::move(Parms._outAvailableInputData);
}


// Function SCCore.InputMappingHelpers.BPF_GetCurrentMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData*        _outMappingContext                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetCurrentMapping(const class UObject* _worldCtxt, struct FInputMappingProfileData* _outMappingContext, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetCurrentMapping");

	Params::InputMappingHelpers_BPF_GetCurrentMapping Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMappingContext != nullptr)
		*_outMappingContext = std::move(Parms._outMappingContext);
}


// Function SCCore.InputMappingHelpers.BPF_GetCurrentMappingProfile
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileEnumHandler  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInputMappingProfileEnumHandler UInputMappingHelpers::BPF_GetCurrentMappingProfile(const class UObject* _worldCtxt, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetCurrentMappingProfile");

	Params::InputMappingHelpers_BPF_GetCurrentMappingProfile Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetDefaultCustomMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputMappingProfileData*        _mappingContext                                        (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithModifier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetDefaultCustomMapping(struct FInputMappingProfileData* _mappingContext, bool _bGamePad, bool _bWithModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetDefaultCustomMapping");

	Params::InputMappingHelpers_BPF_GetDefaultCustomMapping Parms{};

	Parms._bGamePad = _bGamePad;
	Parms._bWithModifier = _bWithModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_mappingContext != nullptr)
		*_mappingContext = std::move(Parms._mappingContext);
}


// Function SCCore.InputMappingHelpers.BPF_GetDefaultInputMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMappingID&                _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputMappingData*               _outMapping                                            (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithModifier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetDefaultInputMapping(class ASCBasePlayerController* _controller, const struct FMappingID& _ID, struct FInputMappingData* _outMapping, bool _bGamePad, bool _bWithModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetDefaultInputMapping");

	Params::InputMappingHelpers_BPF_GetDefaultInputMapping Parms{};

	Parms._controller = _controller;
	Parms._ID = std::move(_ID);
	Parms._bGamePad = _bGamePad;
	Parms._bWithModifier = _bWithModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMapping != nullptr)
		*_outMapping = std::move(Parms._outMapping);
}


// Function SCCore.InputMappingHelpers.BPF_GetDefaultMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class ASCBasePlayerController*    _controller                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData*        _mappingContext                                        (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetDefaultMapping(const class ASCBasePlayerController* _controller, struct FInputMappingProfileData* _mappingContext, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetDefaultMapping");

	Params::InputMappingHelpers_BPF_GetDefaultMapping Parms{};

	Parms._controller = _controller;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_mappingContext != nullptr)
		*_mappingContext = std::move(Parms._mappingContext);
}


// Function SCCore.InputMappingHelpers.BPF_GetHoldToggleEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_GetHoldToggleEnabled(const class UObject* _worldCtxt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetHoldToggleEnabled");

	Params::InputMappingHelpers_BPF_GetHoldToggleEnabled Parms{};

	Parms._worldCtxt = _worldCtxt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetKeyboardLayout
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EInputDeviceLayout                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInputDeviceLayout UInputMappingHelpers::BPF_GetKeyboardLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetKeyboardLayout");

	Params::InputMappingHelpers_BPF_GetKeyboardLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputMappingData*               _outMapping                                            (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetMapping(const struct FInputMappingProfileData& _mappingContext, const struct FMappingID& _ID, struct FInputMappingData* _outMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetMapping");

	Params::InputMappingHelpers_BPF_GetMapping Parms{};

	Parms._mappingContext = std::move(_mappingContext);
	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMapping != nullptr)
		*_outMapping = std::move(Parms._outMapping);
}


// Function SCCore.InputMappingHelpers.BPF_GetMappingProfileDB
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingProfileEnumHandler&_profileID                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingProfileDB*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputMappingProfileDB* UInputMappingHelpers::BPF_GetMappingProfileDB(const struct FInputMappingProfileEnumHandler& _profileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetMappingProfileDB");

	Params::InputMappingHelpers_BPF_GetMappingProfileDB Parms{};

	Parms._profileID = std::move(_profileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_GetMappingProfiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<struct FInputMappingProfileEnumHandler, class UInputMappingProfileDB*>*_outResult                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetMappingProfiles(TMap<struct FInputMappingProfileEnumHandler, class UInputMappingProfileDB*>* _outResult, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetMappingProfiles");

	Params::InputMappingHelpers_BPF_GetMappingProfiles Parms{};

	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.InputMappingHelpers.BPF_GetMappingResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputMappingNode*               _outResultNode                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_GetMappingResult(const struct FInputMappingProfileData& _mappingContext, const struct FMappingID& _ID, struct FInputMappingNode* _outResultNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_GetMappingResult");

	Params::InputMappingHelpers_BPF_GetMappingResult Parms{};

	Parms._mappingContext = std::move(_mappingContext);
	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResultNode != nullptr)
		*_outResultNode = std::move(Parms._outResultNode);
}


// Function SCCore.InputMappingHelpers.BPF_IsDependencyBrokenWithPreset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingProfileData&  _inOutRemapping                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_IsDependencyBrokenWithPreset(const struct FInputMappingProfileData& _inOutRemapping, const struct FMappingID& _ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_IsDependencyBrokenWithPreset");

	Params::InputMappingHelpers_BPF_IsDependencyBrokenWithPreset Parms{};

	Parms._inOutRemapping = std::move(_inOutRemapping);
	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_IsEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingData&         _data                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_IsEmpty(const struct FInputMappingData& _data, const struct FInputMappingProfileData& _mappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_IsEmpty");

	Params::InputMappingHelpers_BPF_IsEmpty Parms{};

	Parms._data = std::move(_data);
	Parms._mappingContext = std::move(_mappingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_IsUsingCustomMappingProfile
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_IsUsingCustomMappingProfile(const class UObject* _worldCtxt, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_IsUsingCustomMappingProfile");

	Params::InputMappingHelpers_BPF_IsUsingCustomMappingProfile Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingData&         _data                                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_IsValid(const struct FInputMappingData& _data, const struct FInputMappingProfileData& _mappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_IsValid");

	Params::InputMappingHelpers_BPF_IsValid Parms{};

	Parms._data = std::move(_data);
	Parms._mappingContext = std::move(_mappingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_MakeMappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputPresetsEnumHandler&  _PresetID                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _eAction                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputContext*                  _eContext                                              (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMappingID                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMappingID UInputMappingHelpers::BPF_MakeMappingID(const struct FInputPresetsEnumHandler& _PresetID, class USCInputAction* _eAction, class USCInputContext* _eContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_MakeMappingID");

	Params::InputMappingHelpers_BPF_MakeMappingID Parms{};

	Parms._PresetID = std::move(_PresetID);
	Parms._eAction = _eAction;
	Parms._eContext = _eContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_ResolveConflicts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData&        _inOutMappingContext                                   (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _item                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMappingID>*              _outResettedItems                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_ResolveConflicts(class ASCBasePlayerController* _controller, struct FInputMappingProfileData& _inOutMappingContext, const struct FMappingID& _item, TArray<struct FMappingID>* _outResettedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_ResolveConflicts");

	Params::InputMappingHelpers_BPF_ResolveConflicts Parms{};

	Parms._controller = _controller;
	Parms._inOutMappingContext = std::move(_inOutMappingContext);
	Parms._item = std::move(_item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_inOutMappingContext = std::move(Parms._inOutMappingContext);

	if (_outResettedItems != nullptr)
		*_outResettedItems = std::move(Parms._outResettedItems);
}


// Function SCCore.InputMappingHelpers.BPF_SaveCustomInputMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileData&        _mappingContext                                        (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bApply                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_SaveCustomInputMapping(class ASCBasePlayerController* _controller, struct FInputMappingProfileData& _mappingContext, bool _bGamePad, bool _bApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_SaveCustomInputMapping");

	Params::InputMappingHelpers_BPF_SaveCustomInputMapping Parms{};

	Parms._controller = _controller;
	Parms._mappingContext = std::move(_mappingContext);
	Parms._bGamePad = _bGamePad;
	Parms._bApply = _bApply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_mappingContext = std::move(Parms._mappingContext);
}


// Function SCCore.InputMappingHelpers.BPF_SetCurrentMappingProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileEnumHandler&_profile                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_SetCurrentMappingProfile(class ASCBasePlayerController* _controller, const struct FInputMappingProfileEnumHandler& _profile, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_SetCurrentMappingProfile");

	Params::InputMappingHelpers_BPF_SetCurrentMappingProfile Parms{};

	Parms._controller = _controller;
	Parms._profile = std::move(_profile);
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_SetCustomMappingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_SetCustomMappingProfile(class ASCBasePlayerController* _controller, bool _bGamePad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_SetCustomMappingProfile");

	Params::InputMappingHelpers_BPF_SetCustomMappingProfile Parms{};

	Parms._controller = _controller;
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_SetHoldToggleEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bActivated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingHelpers::BPF_SetHoldToggleEnabled(const class UObject* _worldCtxt, bool _bActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_SetHoldToggleEnabled");

	Params::InputMappingHelpers_BPF_SetHoldToggleEnabled Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._bActivated = _bActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.InputMappingHelpers.BPF_SetMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputMappingProfileData&        _inOutMappingContext                                   (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _item                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_SetMapping(struct FInputMappingProfileData& _inOutMappingContext, const struct FMappingID& _item, const struct FInputMappingData& _mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_SetMapping");

	Params::InputMappingHelpers_BPF_SetMapping Parms{};

	Parms._inOutMappingContext = std::move(_inOutMappingContext);
	Parms._item = std::move(_item);
	Parms._mapping = std::move(_mapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_inOutMappingContext = std::move(Parms._inOutMappingContext);

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_ValidateCompleteMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    _bGamePad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMappingValidationError>* _outErrors                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_ValidateCompleteMapping(class ASCBasePlayerController* _controller, const struct FInputMappingProfileData& _mapping, bool _bGamePad, TArray<struct FMappingValidationError>* _outErrors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_ValidateCompleteMapping");

	Params::InputMappingHelpers_BPF_ValidateCompleteMapping Parms{};

	Parms._controller = _controller;
	Parms._mapping = std::move(_mapping);
	Parms._bGamePad = _bGamePad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outErrors != nullptr)
		*_outErrors = std::move(Parms._outErrors);

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.BPF_ValidateMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FMappingID&                _item                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FMappingValidationError>* _outErrors                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    _bDetectCollisions                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::BPF_ValidateMapping(class ASCBasePlayerController* _controller, const struct FInputMappingProfileData& _mappingContext, const struct FMappingID& _item, const struct FInputMappingData& _mapping, TArray<struct FMappingValidationError>* _outErrors, bool _bDetectCollisions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "BPF_ValidateMapping");

	Params::InputMappingHelpers_BPF_ValidateMapping Parms{};

	Parms._controller = _controller;
	Parms._mappingContext = std::move(_mappingContext);
	Parms._item = std::move(_item);
	Parms._mapping = std::move(_mapping);
	Parms._bDetectCollisions = _bDetectCollisions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outErrors != nullptr)
		*_outErrors = std::move(Parms._outErrors);

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.Conv_EnumToProfileID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCUserDefinedEnumHandler& _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputMappingProfileEnumHandler  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInputMappingProfileEnumHandler UInputMappingHelpers::Conv_EnumToProfileID(const struct FSCUserDefinedEnumHandler& _ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "Conv_EnumToProfileID");

	Params::InputMappingHelpers_Conv_EnumToProfileID Parms{};

	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.Conv_InputActionToMappingID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCInputAction*                   _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputContext*                  _eContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMappingID                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMappingID UInputMappingHelpers::Conv_InputActionToMappingID(class USCInputAction* _action, class USCInputContext* _eContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "Conv_InputActionToMappingID");

	Params::InputMappingHelpers_Conv_InputActionToMappingID Parms{};

	Parms._action = _action;
	Parms._eContext = _eContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.Conv_InputPresetsEnumHandlerToMappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputPresetsEnumHandler&  _handler                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputContext*                  _eContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMappingID                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMappingID UInputMappingHelpers::Conv_InputPresetsEnumHandlerToMappingID(const struct FInputPresetsEnumHandler& _handler, class USCInputContext* _eContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "Conv_InputPresetsEnumHandlerToMappingID");

	Params::InputMappingHelpers_Conv_InputPresetsEnumHandlerToMappingID Parms{};

	Parms._handler = std::move(_handler);
	Parms._eContext = _eContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.Conv_MappingIDToText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMappingID&                _ID                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInputMappingHelpers::Conv_MappingIDToText(const struct FMappingID& _ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "Conv_MappingIDToText");

	Params::InputMappingHelpers_Conv_MappingIDToText Parms{};

	Parms._ID = std::move(_ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.EqualEqual_MappingData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputMappingData&         _data1                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _data2                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::EqualEqual_MappingData(const struct FInputMappingData& _data1, const struct FInputMappingData& _data2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "EqualEqual_MappingData");

	Params::InputMappingHelpers_EqualEqual_MappingData Parms{};

	Parms._data1 = std::move(_data1);
	Parms._data2 = std::move(_data2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.EqualEqual_MappingID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMappingID&                _ID1                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FMappingID&                _ID2                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::EqualEqual_MappingID(const struct FMappingID& _ID1, const struct FMappingID& _ID2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "EqualEqual_MappingID");

	Params::InputMappingHelpers_EqualEqual_MappingID Parms{};

	Parms._ID1 = std::move(_ID1);
	Parms._ID2 = std::move(_ID2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.InputMappingHelpers.ValidateMappingForPreset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASCBasePlayerController*          _controller                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingProfileData&  _mappingContext                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputMappingGroup&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInputPresetsEnumHandler&  _preset                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputContext*                  _eContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputMappingData&         _mapping                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FMappingValidationError>* _outErrors                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    _bDetectCollisions                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputMappingHelpers::ValidateMappingForPreset(class ASCBasePlayerController* _controller, const struct FInputMappingProfileData& _mappingContext, const struct FInputMappingGroup& _context, const struct FInputPresetsEnumHandler& _preset, class USCInputContext* _eContext, const struct FInputMappingData& _mapping, TArray<struct FMappingValidationError>* _outErrors, bool _bDetectCollisions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputMappingHelpers", "ValidateMappingForPreset");

	Params::InputMappingHelpers_ValidateMappingForPreset Parms{};

	Parms._controller = _controller;
	Parms._mappingContext = std::move(_mappingContext);
	Parms._context = std::move(_context);
	Parms._preset = std::move(_preset);
	Parms._eContext = _eContext;
	Parms._mapping = std::move(_mapping);
	Parms._bDetectCollisions = _bDetectCollisions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outErrors != nullptr)
		*_outErrors = std::move(Parms._outErrors);

	return Parms.ReturnValue;
}


// Function SCCore.InputSequenceConditionProxy.BPF_GetDesc
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// const struct FInputSequenceConditionProxyContainer&_slot                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInputSequenceConditionProxy::BPF_GetDesc(const struct FInputSequenceConditionProxyContainer& _slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputSequenceConditionProxy", "BPF_GetDesc");

	Params::InputSequenceConditionProxy_BPF_GetDesc Parms{};

	Parms._slot = std::move(_slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCNotificationSubsystem.BPF_AddNotification
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENotificationCategory                   _category                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _title                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      _message                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCNotificationSubsystem::BPF_AddNotification(ENotificationCategory _category, const class FText& _title, const class FText& _message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCNotificationSubsystem", "BPF_AddNotification");

	Params::SCNotificationSubsystem_BPF_AddNotification Parms{};

	Parms._category = _category;
	Parms._title = std::move(_title);
	Parms._message = std::move(_message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCNotificationSubsystem.BPF_FlushNotifications
// (Final, Native, Public, BlueprintCallable)

void USCNotificationSubsystem::BPF_FlushNotifications()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCNotificationSubsystem", "BPF_FlushNotifications");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCNotificationSubsystem.BPF_HandleNotification
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNotificationViewModel*           _viewModel                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCNotificationSubsystem::BPF_HandleNotification(class UNotificationViewModel* _viewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCNotificationSubsystem", "BPF_HandleNotification");

	Params::SCNotificationSubsystem_BPF_HandleNotification Parms{};

	Parms._viewModel = _viewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCNotificationSubsystem.BPF_RemoveNotification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNotificationViewModel*           _viewModel                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCNotificationSubsystem::BPF_RemoveNotification(class UNotificationViewModel* _viewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCNotificationSubsystem", "BPF_RemoveNotification");

	Params::SCNotificationSubsystem_BPF_RemoveNotification Parms{};

	Parms._viewModel = _viewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCNotificationSubsystem.BPF_GetNotificationsForCategory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENotificationCategory                   _category                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSCNotification>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSCNotification> USCNotificationSubsystem::BPF_GetNotificationsForCategory(ENotificationCategory _category) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCNotificationSubsystem", "BPF_GetNotificationsForCategory");

	Params::SCNotificationSubsystem_BPF_GetNotificationsForCategory Parms{};

	Parms._category = _category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInputContext.GetAllInputContexts
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class USCInputContext*>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class USCInputContext*> USCInputContext::GetAllInputContexts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInputContext", "GetAllInputContexts");

	Params::SCInputContext_GetAllInputContexts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInputWindowHelpers.BPF_GetResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputWindowTargetData&    _data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EInputWindowResult                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInputWindowResult USCInputWindowHelpers::BPF_GetResult(const struct FInputWindowTargetData& _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInputWindowHelpers", "BPF_GetResult");

	Params::SCInputWindowHelpers_BPF_GetResult Parms{};

	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCVolume.InternalOnComponentEndOverlap
// (Native, Protected)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iOtherBodyIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCVolume::InternalOnComponentEndOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _iOtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolume", "InternalOnComponentEndOverlap");

	Params::SCVolume_InternalOnComponentEndOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._iOtherBodyIndex = _iOtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolume.InternalOnComponentStartOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iOtherBodyIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bFromSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                _sweepResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASCVolume::InternalOnComponentStartOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _iOtherBodyIndex, bool _bFromSweep, const struct FHitResult& _sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolume", "InternalOnComponentStartOverlap");

	Params::SCVolume_InternalOnComponentStartOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._iOtherBodyIndex = _iOtherBodyIndex;
	Parms._bFromSweep = _bFromSweep;
	Parms._sweepResult = std::move(_sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeComponent.OnSingleVolumeEndOverlap
// (Native, Protected)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iOtherBodyIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVolumeComponent::OnSingleVolumeEndOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _iOtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeComponent", "OnSingleVolumeEndOverlap");

	Params::SCVolumeComponent_OnSingleVolumeEndOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._iOtherBodyIndex = _iOtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeComponent.OnSingleVolumeStartOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iOtherBodyIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bFromSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                _sweepResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USCVolumeComponent::OnSingleVolumeStartOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _iOtherBodyIndex, bool _bFromSweep, const struct FHitResult& _sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeComponent", "OnSingleVolumeStartOverlap");

	Params::SCVolumeComponent_OnSingleVolumeStartOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._iOtherBodyIndex = _iOtherBodyIndex;
	Parms._bFromSweep = _bFromSweep;
	Parms._sweepResult = std::move(_sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.LocomotionTransitionLibrary.BPF_ComputeCurrentMovementDescription
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCharacterMovementComponent*_mvtComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _b2DOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementDescriptionComputationType     _eComputationType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bAllowPendingInputUse                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCCharacterMovementDescription  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSCCharacterMovementDescription ULocomotionTransitionLibrary::BPF_ComputeCurrentMovementDescription(const class UCharacterMovementComponent* _mvtComp, bool _b2DOnly, EMovementDescriptionComputationType _eComputationType, bool _bAllowPendingInputUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LocomotionTransitionLibrary", "BPF_ComputeCurrentMovementDescription");

	Params::LocomotionTransitionLibrary_BPF_ComputeCurrentMovementDescription Parms{};

	Parms._mvtComp = _mvtComp;
	Parms._b2DOnly = _b2DOnly;
	Parms._eComputationType = _eComputationType;
	Parms._bAllowPendingInputUse = _bAllowPendingInputUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.LocomotionTransitionLibrary.BPF_ComputeTransition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCharacterMovementComponent*_mvtComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCTransitionDB>      _transitionDB                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _b2DOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransitionComputationResult     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTransitionComputationResult ULocomotionTransitionLibrary::BPF_ComputeTransition(const class UCharacterMovementComponent* _mvtComp, TSubclassOf<class USCTransitionDB> _transitionDB, bool _b2DOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LocomotionTransitionLibrary", "BPF_ComputeTransition");

	Params::LocomotionTransitionLibrary_BPF_ComputeTransition Parms{};

	Parms._mvtComp = _mvtComp;
	Parms._transitionDB = _transitionDB;
	Parms._b2DOnly = _b2DOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.LocomotionTransitionLibrary.BPF_ComputeTransitionWithParams
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCharacterMovementComponent*_mvtComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vWantedVelocityDir                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bOrientToMovement                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  _eWantedSpeedState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCTransitionDB>      _transitionDB                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _b2DOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransitionComputationResult     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTransitionComputationResult ULocomotionTransitionLibrary::BPF_ComputeTransitionWithParams(const class UCharacterMovementComponent* _mvtComp, const struct FVector& _vWantedVelocityDir, bool _bOrientToMovement, ESCCharacterSpeedState _eWantedSpeedState, TSubclassOf<class USCTransitionDB> _transitionDB, bool _b2DOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LocomotionTransitionLibrary", "BPF_ComputeTransitionWithParams");

	Params::LocomotionTransitionLibrary_BPF_ComputeTransitionWithParams Parms{};

	Parms._mvtComp = _mvtComp;
	Parms._vWantedVelocityDir = std::move(_vWantedVelocityDir);
	Parms._bOrientToMovement = _bOrientToMovement;
	Parms._eWantedSpeedState = _eWantedSpeedState;
	Parms._transitionDB = _transitionDB;
	Parms._b2DOnly = _b2DOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.LocomotionTransitionLibrary.BPF_EstimateDurationOfFall
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCharacterMovementComponent*_mvtComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fGravityScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULocomotionTransitionLibrary::BPF_EstimateDurationOfFall(const class UCharacterMovementComponent* _mvtComp, float _fHeight, float _fGravityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LocomotionTransitionLibrary", "BPF_EstimateDurationOfFall");

	Params::LocomotionTransitionLibrary_BPF_EstimateDurationOfFall Parms{};

	Parms._mvtComp = _mvtComp;
	Parms._fHeight = _fHeight;
	Parms._fGravityScale = _fGravityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.LocomotionTransitionLibrary.BPF_PredictTransitionEndLocationFromParams
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCCodeDrivenTransitionSettings&_transitionSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   _fTimeElapsed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTargetSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDirNormalized                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTargetSpeedMultiplier                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULocomotionTransitionLibrary::BPF_PredictTransitionEndLocationFromParams(const struct FSCCodeDrivenTransitionSettings& _transitionSettings, float _fTimeElapsed, float _fTargetSpeed, const struct FVector& _vDirNormalized, float _fTargetSpeedMultiplier, float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LocomotionTransitionLibrary", "BPF_PredictTransitionEndLocationFromParams");

	Params::LocomotionTransitionLibrary_BPF_PredictTransitionEndLocationFromParams Parms{};

	Parms._transitionSettings = std::move(_transitionSettings);
	Parms._fTimeElapsed = _fTimeElapsed;
	Parms._fTargetSpeed = _fTargetSpeed;
	Parms._vDirNormalized = std::move(_vDirNormalized);
	Parms._fTargetSpeedMultiplier = _fTargetSpeedMultiplier;
	Parms._fDt = _fDt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MenuActionViewModel.BPF_SimulateActionPressed
// (Final, Native, Protected, BlueprintCallable)

void UMenuActionViewModel::BPF_SimulateActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuActionViewModel", "BPF_SimulateActionPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPE_OnStartTransition
// (Event, Public, BlueprintEvent)

void USCTransitionAnimInstance::BPE_OnStartTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPE_OnStartTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpStartATransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpStartATransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpStartATransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpStartATransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpStartBTransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpStartBTransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpStartBTransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpStartBTransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpStopATransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpStopATransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpStopATransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpStopATransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpStopBTransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpStopBTransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpStopBTransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpStopBTransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpTransitionMirror
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpTransitionMirror(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpTransitionMirror");

	Params::SCTransitionAnimInstance_BPF_SetUpTransitionMirror Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpTurnATransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpTurnATransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpTurnATransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpTurnATransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_SetUpTurnBTransitionAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_SetUpTurnBTransitionAnim(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_SetUpTurnBTransitionAnim");

	Params::SCTransitionAnimInstance_BPF_SetUpTurnBTransitionAnim Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateStartATransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateStartATransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateStartATransition");

	Params::SCTransitionAnimInstance_BPF_UpdateStartATransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateStartBTransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateStartBTransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateStartBTransition");

	Params::SCTransitionAnimInstance_BPF_UpdateStartBTransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateStopATransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateStopATransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateStopATransition");

	Params::SCTransitionAnimInstance_BPF_UpdateStopATransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateStopBTransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateStopBTransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateStopBTransition");

	Params::SCTransitionAnimInstance_BPF_UpdateStopBTransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateTurnATransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateTurnATransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateTurnATransition");

	Params::SCTransitionAnimInstance_BPF_UpdateTurnATransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_UpdateTurnBTransition
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::BPF_UpdateTurnBTransition(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_UpdateTurnBTransition");

	Params::SCTransitionAnimInstance_BPF_UpdateTurnBTransition Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.NativeOnOrientToMovementChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    _bIsOrientedToMovement                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTransitionAnimInstance::NativeOnOrientToMovementChanged(bool _bIsOrientedToMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "NativeOnOrientToMovementChanged");

	Params::SCTransitionAnimInstance_NativeOnOrientToMovementChanged Parms{};

	Parms._bIsOrientedToMovement = _bIsOrientedToMovement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionAnimInstance.BPF_CanKeepLastTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionAnimInstance::BPF_CanKeepLastTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_CanKeepLastTransition");

	Params::SCTransitionAnimInstance_BPF_CanKeepLastTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionAnimInstance.BPF_ComputeBestNextAnimIndex
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FTransitionAnimSequencePlayInfos>&_nextAnimArray                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTransitionAnimInstance::BPF_ComputeBestNextAnimIndex(const TArray<struct FTransitionAnimSequencePlayInfos>& _nextAnimArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_ComputeBestNextAnimIndex");

	Params::SCTransitionAnimInstance_BPF_ComputeBestNextAnimIndex Parms{};

	Parms._nextAnimArray = std::move(_nextAnimArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionAnimInstance.BPF_ComputeBestNextAnimIndexFromRefAnim
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FTransitionAnimSequencePlayInfos>&_nextAnimArray                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                _syncMarkerRefAnim                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirrored                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTransitionAnimInstance::BPF_ComputeBestNextAnimIndexFromRefAnim(const TArray<struct FTransitionAnimSequencePlayInfos>& _nextAnimArray, class UAnimSequenceBase* _syncMarkerRefAnim, float _fPosition, bool _bMirrored) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_ComputeBestNextAnimIndexFromRefAnim");

	Params::SCTransitionAnimInstance_BPF_ComputeBestNextAnimIndexFromRefAnim Parms{};

	Parms._nextAnimArray = std::move(_nextAnimArray);
	Parms._syncMarkerRefAnim = _syncMarkerRefAnim;
	Parms._fPosition = _fPosition;
	Parms._bMirrored = _bMirrored;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionAnimInstance.BPF_GetCurrentTransitionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCTransitionType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCTransitionType USCTransitionAnimInstance::BPF_GetCurrentTransitionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_GetCurrentTransitionType");

	Params::SCTransitionAnimInstance_BPF_GetCurrentTransitionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionAnimInstance.BPF_HasTransitionAnyRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionAnimInstance::BPF_HasTransitionAnyRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionAnimInstance", "BPF_HasTransitionAnyRotation");

	Params::SCTransitionAnimInstance_BPF_HasTransitionAnyRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_ForceCoyoteTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _instigator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForce                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDynamicSpeedMovementComponent::BPF_ForceCoyoteTime(class UObject* _instigator, bool _bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_ForceCoyoteTime");

	Params::SCDynamicSpeedMovementComponent_BPF_ForceCoyoteTime Parms{};

	Parms._instigator = _instigator;
	Parms._bForce = _bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetGroundInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSCCharacterGroundInfo     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FSCCharacterGroundInfo USCDynamicSpeedMovementComponent::BPF_GetGroundInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetGroundInfo");

	Params::SCDynamicSpeedMovementComponent_BPF_GetGroundInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_PopMovementMode
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iMovementModeKey                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDynamicSpeedMovementComponent::BPF_PopMovementMode(int32 _iMovementModeKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_PopMovementMode");

	Params::SCDynamicSpeedMovementComponent_BPF_PopMovementMode Parms{};

	Parms._iMovementModeKey = _iMovementModeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_PopRootMotionRotationRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _instigator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDynamicSpeedMovementComponent::BPF_PopRootMotionRotationRate(class UObject* _instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_PopRootMotionRotationRate");

	Params::SCDynamicSpeedMovementComponent_BPF_PopRootMotionRotationRate Parms{};

	Parms._instigator = _instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_PushMovementMode
// (Native, Public, BlueprintCallable)
// Parameters:
// EMovementMode                           _eMovementMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCDynamicSpeedMovementComponent::BPF_PushMovementMode(EMovementMode _eMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_PushMovementMode");

	Params::SCDynamicSpeedMovementComponent_BPF_PushMovementMode Parms{};

	Parms._eMovementMode = _eMovementMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_PushRootMotionRotationRate
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _instigator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  _rotationRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCDynamicSpeedMovementComponent::BPF_PushRootMotionRotationRate(class UObject* _instigator, const struct FRotator& _rotationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_PushRootMotionRotationRate");

	Params::SCDynamicSpeedMovementComponent_BPF_PushRootMotionRotationRate Parms{};

	Parms._instigator = _instigator;
	Parms._rotationRate = std::move(_rotationRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetAbsoluteMaxWalkSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCDynamicSpeedMovementComponent::BPF_GetAbsoluteMaxWalkSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetAbsoluteMaxWalkSpeed");

	Params::SCDynamicSpeedMovementComponent_BPF_GetAbsoluteMaxWalkSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetCurrentSpeedState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    _bRaw                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCharacterSpeedState USCDynamicSpeedMovementComponent::BPF_GetCurrentSpeedState(bool _bRaw) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetCurrentSpeedState");

	Params::SCDynamicSpeedMovementComponent_BPF_GetCurrentSpeedState Parms{};

	Parms._bRaw = _bRaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetDebugGraphPropertiesDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCDebugGraphPropertiesDB*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCDebugGraphPropertiesDB* USCDynamicSpeedMovementComponent::BPF_GetDebugGraphPropertiesDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetDebugGraphPropertiesDB");

	Params::SCDynamicSpeedMovementComponent_BPF_GetDebugGraphPropertiesDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetSpeedFromDescriptionDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCCharacterSpeedState                  _eSpeedState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCDynamicSpeedMovementComponent::BPF_GetSpeedFromDescriptionDB(ESCCharacterSpeedState _eSpeedState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetSpeedFromDescriptionDB");

	Params::SCDynamicSpeedMovementComponent_BPF_GetSpeedFromDescriptionDB Parms{};

	Parms._eSpeedState = _eSpeedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicSpeedMovementComponent.BPF_GetSpeedStateMaxSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCCharacterSpeedState                  _eSpeedState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       _eCardinalPoint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCDynamicSpeedMovementComponent::BPF_GetSpeedStateMaxSpeed(ESCCharacterSpeedState _eSpeedState, ESCCardinalPoints _eCardinalPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicSpeedMovementComponent", "BPF_GetSpeedStateMaxSpeed");

	Params::SCDynamicSpeedMovementComponent_BPF_GetSpeedStateMaxSpeed Parms{};

	Parms._eSpeedState = _eSpeedState;
	Parms._eCardinalPoint = _eCardinalPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionMovementComponent.OnAnimInitialized
// (Final, Native, Protected)

void USCTransitionMovementComponent::OnAnimInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "OnAnimInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionMovementComponent.OnMontageBlendingOut
// (Final, Native, Protected)
// Parameters:
// class UAnimMontage*                     _inMontage                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInterrupted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTransitionMovementComponent::OnMontageBlendingOut(class UAnimMontage* _inMontage, bool _bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "OnMontageBlendingOut");

	Params::SCTransitionMovementComponent_OnMontageBlendingOut Parms{};

	Parms._inMontage = _inMontage;
	Parms._bInterrupted = _bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionMovementComponent.OnMontageStarted
// (Final, Native, Protected)
// Parameters:
// class UAnimMontage*                     _inMontage                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTransitionMovementComponent::OnMontageStarted(class UAnimMontage* _inMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "OnMontageStarted");

	Params::SCTransitionMovementComponent_OnMontageStarted Parms{};

	Parms._inMontage = _inMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionMovementComponent.OnOrientToMovementChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    _bIsOrientedToMovement                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTransitionMovementComponent::OnOrientToMovementChanged(bool _bIsOrientedToMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "OnOrientToMovementChanged");

	Params::SCTransitionMovementComponent_OnOrientToMovementChanged Parms{};

	Parms._bIsOrientedToMovement = _bIsOrientedToMovement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTransitionMovementComponent.BPF_CanPlayTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionMovementComponent::BPF_CanPlayTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "BPF_CanPlayTransition");

	Params::SCTransitionMovementComponent_BPF_CanPlayTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionMovementComponent.BPF_GetTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSCTransition                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSCTransition USCTransitionMovementComponent::BPF_GetTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "BPF_GetTransition");

	Params::SCTransitionMovementComponent_BPF_GetTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionMovementComponent.BPF_IsPlayingTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionMovementComponent::BPF_IsPlayingTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionMovementComponent", "BPF_IsPlayingTransition");

	Params::SCTransitionMovementComponent_BPF_IsPlayingTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MotionWarpingMontagePlayerHelper.BPF_FindMotionWarpingMontagePlayerContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_inContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMotionWarpingMontagePlayerContext*_outContext                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMotionWarpingMontagePlayerHelper::BPF_FindMotionWarpingMontagePlayerContext(const struct FGameplayAbilityTargetDataHandle& _inContext, struct FMotionWarpingMontagePlayerContext* _outContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionWarpingMontagePlayerHelper", "BPF_FindMotionWarpingMontagePlayerContext");

	Params::MotionWarpingMontagePlayerHelper_BPF_FindMotionWarpingMontagePlayerContext Parms{};

	Parms._inContext = std::move(_inContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outContext != nullptr)
		*_outContext = std::move(Parms._outContext);

	return Parms.ReturnValue;
}


// Function SCCore.MotionWarpingMontagePlayerHelper.BPF_MakeMotionWarpingMontagePlayerContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_inContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMotionWarpingMontagePlayerConfiguration*_configuration                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UMotionWarpingMontagePlayerHelper::BPF_MakeMotionWarpingMontagePlayerContext(const struct FGameplayAbilityTargetDataHandle& _inContext, class UMotionWarpingMontagePlayerConfiguration* _configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionWarpingMontagePlayerHelper", "BPF_MakeMotionWarpingMontagePlayerContext");

	Params::MotionWarpingMontagePlayerHelper_BPF_MakeMotionWarpingMontagePlayerContext Parms{};

	Parms._inContext = std::move(_inContext);
	Parms._configuration = _configuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MovieWidget.BPF_CloseMovie
// (Final, Native, Public, BlueprintCallable)

void UMovieWidget::BPF_CloseMovie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieWidget", "BPF_CloseMovie");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MovieWidget.BPF_OpenMovie
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _url                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLooping                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMovieWidget::BPF_OpenMovie(const class FString& _url, bool _bLooping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieWidget", "BPF_OpenMovie");

	Params::MovieWidget_BPF_OpenMovie Parms{};

	Parms._url = std::move(_url);
	Parms._bLooping = _bLooping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.MovieWidget.MediaEndCallback
// (Final, Native, Private)

void UMovieWidget::MediaEndCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieWidget", "MediaEndCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.MovieWidget.MediaOpenedCallback
// (Final, Native, Private)
// Parameters:
// const class FString&                    _url                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieWidget::MediaOpenedCallback(const class FString& _url)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieWidget", "MediaOpenedCallback");

	Params::MovieWidget_MediaOpenedCallback Parms{};

	Parms._url = std::move(_url);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraZoneBlueprintHelper.BPF_GetClosestDeadZoneToAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSCDeadZone*                     _outDeadZone                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSCDeadZone>&       _inDeadZones                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fAngleInDeg                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAngleDiffMaxInDeg                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraZoneBlueprintHelper::BPF_GetClosestDeadZoneToAngle(struct FSCDeadZone* _outDeadZone, const TArray<struct FSCDeadZone>& _inDeadZones, float _fAngleInDeg, float _fAngleDiffMaxInDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCameraZoneBlueprintHelper", "BPF_GetClosestDeadZoneToAngle");

	Params::SCCameraZoneBlueprintHelper_BPF_GetClosestDeadZoneToAngle Parms{};

	Parms._inDeadZones = std::move(_inDeadZones);
	Parms._fAngleInDeg = _fAngleInDeg;
	Parms._fAngleDiffMaxInDeg = _fAngleDiffMaxInDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outDeadZone != nullptr)
		*_outDeadZone = std::move(Parms._outDeadZone);

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraZoneBlueprintHelper.BPF_GetDeadZoneContainingAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSCDeadZone*                     _outDeadZone                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSCDeadZone>&       _inDeadZones                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fAngleInDeg                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraZoneBlueprintHelper::BPF_GetDeadZoneContainingAngle(struct FSCDeadZone* _outDeadZone, const TArray<struct FSCDeadZone>& _inDeadZones, float _fAngleInDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCameraZoneBlueprintHelper", "BPF_GetDeadZoneContainingAngle");

	Params::SCCameraZoneBlueprintHelper_BPF_GetDeadZoneContainingAngle Parms{};

	Parms._inDeadZones = std::move(_inDeadZones);
	Parms._fAngleInDeg = _fAngleInDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outDeadZone != nullptr)
		*_outDeadZone = std::move(Parms._outDeadZone);

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraZoneBlueprintHelper.BPF_GetMidAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCDeadZone&               _inDeadZone                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraZoneBlueprintHelper::BPF_GetMidAngle(const struct FSCDeadZone& _inDeadZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCameraZoneBlueprintHelper", "BPF_GetMidAngle");

	Params::SCCameraZoneBlueprintHelper_BPF_GetMidAngle Parms{};

	Parms._inDeadZone = std::move(_inDeadZone);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraZoneBlueprintHelper.BPF_GetSafeZoneListFromDeadZones
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSCDeadZone>*             _outListOfSafeZones                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FSCDeadZone>&       _inDeadZones                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USCCameraZoneBlueprintHelper::BPF_GetSafeZoneListFromDeadZones(TArray<struct FSCDeadZone>* _outListOfSafeZones, const TArray<struct FSCDeadZone>& _inDeadZones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCameraZoneBlueprintHelper", "BPF_GetSafeZoneListFromDeadZones");

	Params::SCCameraZoneBlueprintHelper_BPF_GetSafeZoneListFromDeadZones Parms{};

	Parms._inDeadZones = std::move(_inDeadZones);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outListOfSafeZones != nullptr)
		*_outListOfSafeZones = std::move(Parms._outListOfSafeZones);
}


// Function SCCore.SCAbilitySystemComponent.BPF_DrawDebug
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSCGameplayAbilityTargetData&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_targetDataContext                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_DrawDebug(const struct FSCGameplayAbilityTargetData& _data, const struct FColor& _color, const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _targetDataContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_DrawDebug");

	Params::SCAbilitySystemComponent_BPF_DrawDebug Parms{};

	Parms._data = std::move(_data);
	Parms._color = std::move(_color);
	Parms._actor = _actor;
	Parms._targetDataContext = std::move(_targetDataContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_DrawHandleDebug
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_targetDataContext                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_DrawHandleDebug(const struct FGameplayAbilityTargetDataHandle& _data, const struct FColor& _color, const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _targetDataContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_DrawHandleDebug");

	Params::SCAbilitySystemComponent_BPF_DrawHandleDebug Parms{};

	Parms._data = std::move(_data);
	Parms._color = std::move(_color);
	Parms._actor = _actor;
	Parms._targetDataContext = std::move(_targetDataContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_FindAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_target                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequencePlayInfos*          _outContext                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_FindAnimSequencePlayInfos(const struct FGameplayAbilityTargetDataHandle& _target, struct FAnimSequencePlayInfos* _outContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_FindAnimSequencePlayInfos");

	Params::SCAbilitySystemComponent_BPF_FindAnimSequencePlayInfos Parms{};

	Parms._target = std::move(_target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outContext != nullptr)
		*_outContext = std::move(Parms._outContext);

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetMontageFromAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequencePlayInfos&    _target                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimMontage**                    _outMontage                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_GetMontageFromAnimSequencePlayInfos(const struct FAnimSequencePlayInfos& _target, class UAnimMontage** _outMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_GetMontageFromAnimSequencePlayInfos");

	Params::SCAbilitySystemComponent_BPF_GetMontageFromAnimSequencePlayInfos Parms{};

	Parms._target = std::move(_target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMontage != nullptr)
		*_outMontage = Parms._outMontage;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetSnapFromAnimSequencePlayInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequencePlayInfos&    _target                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequenceSnapInfos*          _outSnapInfos                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_GetSnapFromAnimSequencePlayInfos(const struct FAnimSequencePlayInfos& _target, struct FAnimSequenceSnapInfos* _outSnapInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_GetSnapFromAnimSequencePlayInfos");

	Params::SCAbilitySystemComponent_BPF_GetSnapFromAnimSequencePlayInfos Parms{};

	Parms._target = std::move(_target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSnapInfos != nullptr)
		*_outSnapInfos = std::move(Parms._outSnapInfos);

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetSnapPrediction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequenceSnapInfos&    _snapInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimSequenceSnapPrediction*     _outSnapPrediction                                     (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_GetSnapPrediction(const struct FAnimSequenceSnapInfos& _snapInfos, struct FAnimSequenceSnapPrediction* _outSnapPrediction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_GetSnapPrediction");

	Params::SCAbilitySystemComponent_BPF_GetSnapPrediction Parms{};

	Parms._snapInfos = std::move(_snapInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSnapPrediction != nullptr)
		*_outSnapPrediction = std::move(Parms._outSnapPrediction);

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_IsActivable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimSequenceSnapInfos&    _snapInfos                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_IsActivable(const struct FAnimSequenceSnapInfos& _snapInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_IsActivable");

	Params::SCAbilitySystemComponent_BPF_IsActivable Parms{};

	Parms._snapInfos = std::move(_snapInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_MakeInputTargetDataFromInputState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInputActionState&         _inputActionState                                      (Parm, NativeAccessSpecifierPublic)
// struct FInputGameplayAbilityTargetData  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInputGameplayAbilityTargetData USCAbilitySystemComponent::BPF_MakeInputTargetDataFromInputState(const struct FInputActionState& _inputActionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_MakeInputTargetDataFromInputState");

	Params::SCAbilitySystemComponent_BPF_MakeInputTargetDataFromInputState Parms{};

	Parms._inputActionState = std::move(_inputActionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCGameplayAbilityTargetData&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bShort                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCAbilitySystemComponent::BPF_ToString(const struct FSCGameplayAbilityTargetData& _data, bool _bShort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "BPF_ToString");

	Params::SCAbilitySystemComponent_BPF_ToString Parms{};

	Parms._data = std::move(_data);
	Parms._bShort = _bShort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCAbilitySystemComponent* USCAbilitySystemComponent::Get(const class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAbilitySystemComponent", "Get");

	Params::SCAbilitySystemComponent_Get Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_AddGameplayEventTagContainerDelegate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagFilter                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_AddGameplayEventTagContainerDelegate(const struct FGameplayTagContainer& _tagFilter, TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_AddGameplayEventTagContainerDelegate");

	Params::SCAbilitySystemComponent_BPF_AddGameplayEventTagContainerDelegate Parms{};

	Parms._tagFilter = std::move(_tagFilter);
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_CancelAbilitiesFromClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<TSubclassOf<class UGameplayAbility>>&_abilitiesToCancel                                     (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_CancelAbilitiesFromClass(const TArray<TSubclassOf<class UGameplayAbility>>& _abilitiesToCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_CancelAbilitiesFromClass");

	Params::SCAbilitySystemComponent_BPF_CancelAbilitiesFromClass Parms{};

	Parms._abilitiesToCancel = std::move(_abilitiesToCancel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_CancelAllAbilitiesAndEffects
// (Final, Native, Public, BlueprintCallable)

void USCAbilitySystemComponent::BPF_CancelAllAbilitiesAndEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_CancelAllAbilitiesAndEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetActiveGameplayEffectContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActiveGameplayEffectHandle&_effect                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayEffectContextHandle USCAbilitySystemComponent::BPF_GetActiveGameplayEffectContext(const struct FActiveGameplayEffectHandle& _effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_GetActiveGameplayEffectContext");

	Params::SCAbilitySystemComponent_BPF_GetActiveGameplayEffectContext Parms{};

	Parms._effect = std::move(_effect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_InitDefaultGameplayCueParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayCueParameters&          _parameters                                            (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_InitDefaultGameplayCueParameters(struct FGameplayCueParameters& _parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_InitDefaultGameplayCueParameters");

	Params::SCAbilitySystemComponent_BPF_InitDefaultGameplayCueParameters Parms{};

	Parms._parameters = std::move(_parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_parameters = std::move(Parms._parameters);
}


// Function SCCore.SCAbilitySystemComponent.BPF_IsAbilityActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilitySpecHandle&_inAbilityHandle                                       (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_IsAbilityActive(const struct FGameplayAbilitySpecHandle& _inAbilityHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_IsAbilityActive");

	Params::SCAbilitySystemComponent_BPF_IsAbilityActive Parms{};

	Parms._inAbilityHandle = std::move(_inAbilityHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_MatchesTagQueryWithRollback
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagQuery&         _tagsToCheck                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fClientTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fClientPredictedTime                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fClientDT                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_MatchesTagQueryWithRollback(class AActor* Owner, const struct FGameplayTagQuery& _tagsToCheck, float _fClientTime, float _fClientPredictedTime, float _fClientDT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_MatchesTagQueryWithRollback");

	Params::SCAbilitySystemComponent_BPF_MatchesTagQueryWithRollback Parms{};

	Parms.Owner = Owner;
	Parms._tagsToCheck = std::move(_tagsToCheck);
	Parms._fClientTime = _fClientTime;
	Parms._fClientPredictedTime = _fClientPredictedTime;
	Parms._fClientDT = _fClientDT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_PopAvailabilityTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTagAvailabilityLayerContainer>_data                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _callerContext                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_PopAvailabilityTags(TSubclassOf<class UTagAvailabilityLayerContainer> _data, int32 _iID, const class FString& _callerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_PopAvailabilityTags");

	Params::SCAbilitySystemComponent_BPF_PopAvailabilityTags Parms{};

	Parms._data = _data;
	Parms._iID = _iID;
	Parms._callerContext = std::move(_callerContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_PushAvailabilityTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTagAvailabilityLayerContainer>_data                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _callerContext                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCAbilitySystemComponent::BPF_PushAvailabilityTags(TSubclassOf<class UTagAvailabilityLayerContainer> _data, const class FString& _callerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_PushAvailabilityTags");

	Params::SCAbilitySystemComponent_BPF_PushAvailabilityTags Parms{};

	Parms._data = _data;
	Parms._callerContext = std::move(_callerContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RefreshAbilityActorInfo
// (Final, Native, Public, BlueprintCallable)

void USCAbilitySystemComponent::BPF_RefreshAbilityActorInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RefreshAbilityActorInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RegisterAttributeChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayAttribute&        _attribute                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayAttribute& _attribute, float _fOldValue, float _fNewValue)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RegisterAttributeChangedEvent(const struct FGameplayAttribute& _attribute, TDelegate<void(const struct FGameplayAttribute& _attribute, float _fOldValue, float _fNewValue)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RegisterAttributeChangedEvent");

	Params::SCAbilitySystemComponent_BPF_RegisterAttributeChangedEvent Parms{};

	Parms._attribute = std::move(_attribute);
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RegisterGameplayTagContainerEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagContainer                                          (Parm, NativeAccessSpecifierPublic)
// EGameplayTagEventType                   _eEventType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RegisterGameplayTagContainerEvent(const struct FGameplayTagContainer& _tagContainer, EGameplayTagEventType _eEventType, TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RegisterGameplayTagContainerEvent");

	Params::SCAbilitySystemComponent_BPF_RegisterGameplayTagContainerEvent Parms{};

	Parms._tagContainer = std::move(_tagContainer);
	Parms._eEventType = _eEventType;
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RegisterGameplayTagEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameplayTagEventType                   _eEventType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RegisterGameplayTagEvent(const struct FGameplayTag& _tag, EGameplayTagEventType _eEventType, TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RegisterGameplayTagEvent");

	Params::SCAbilitySystemComponent_BPF_RegisterGameplayTagEvent Parms{};

	Parms._tag = std::move(_tag);
	Parms._eEventType = _eEventType;
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RegisterOnAnyGameplayTagChangeEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RegisterOnAnyGameplayTagChangeEvent(TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RegisterOnAnyGameplayTagChangeEvent");

	Params::SCAbilitySystemComponent_BPF_RegisterOnAnyGameplayTagChangeEvent Parms{};

	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RemoveAllGameplayEventTagContainerDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RemoveAllGameplayEventTagContainerDelegate(TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RemoveAllGameplayEventTagContainerDelegate");

	Params::SCAbilitySystemComponent_BPF_RemoveAllGameplayEventTagContainerDelegate Parms{};

	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_RemoveGameplayEventTagContainerDelegate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagFilter                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_RemoveGameplayEventTagContainerDelegate(const struct FGameplayTagContainer& _tagFilter, TDelegate<void(const struct FGameplayTag& _tag, const struct FGameplayEventData& _data)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_RemoveGameplayEventTagContainerDelegate");

	Params::SCAbilitySystemComponent_BPF_RemoveGameplayEventTagContainerDelegate Parms{};

	Parms._tagFilter = std::move(_tagFilter);
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_TriggerAbilityFromTargetDataHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayAbility>     _inAbilityToActivate                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle*      _outAbilityHandle                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayAbility**                _abilityInstanceCreated                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_TriggerAbilityFromTargetDataHandle(TSubclassOf<class UGameplayAbility> _inAbilityToActivate, const struct FGameplayAbilityTargetDataHandle& _handle, struct FGameplayAbilitySpecHandle* _outAbilityHandle, class UGameplayAbility** _abilityInstanceCreated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_TriggerAbilityFromTargetDataHandle");

	Params::SCAbilitySystemComponent_BPF_TriggerAbilityFromTargetDataHandle Parms{};

	Parms._inAbilityToActivate = _inAbilityToActivate;
	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outAbilityHandle != nullptr)
		*_outAbilityHandle = std::move(Parms._outAbilityHandle);

	if (_abilityInstanceCreated != nullptr)
		*_abilityInstanceCreated = Parms._abilityInstanceCreated;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_UnregisterAttributeChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayAttribute&        _attribute                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayAttribute& _attribute, float _fOldValue, float _fNewValue)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_UnregisterAttributeChangedEvent(const struct FGameplayAttribute& _attribute, TDelegate<void(const struct FGameplayAttribute& _attribute, float _fOldValue, float _fNewValue)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_UnregisterAttributeChangedEvent");

	Params::SCAbilitySystemComponent_BPF_UnregisterAttributeChangedEvent Parms{};

	Parms._attribute = std::move(_attribute);
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_UnregisterGameplayTagContainerEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagContainer                                          (Parm, NativeAccessSpecifierPublic)
// EGameplayTagEventType                   _eEventType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_UnregisterGameplayTagContainerEvent(const struct FGameplayTagContainer& _tagContainer, EGameplayTagEventType _eEventType, TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_UnregisterGameplayTagContainerEvent");

	Params::SCAbilitySystemComponent_BPF_UnregisterGameplayTagContainerEvent Parms{};

	Parms._tagContainer = std::move(_tagContainer);
	Parms._eEventType = _eEventType;
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_UnregisterGameplayTagEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameplayTagEventType                   _eEventType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_UnregisterGameplayTagEvent(const struct FGameplayTag& _tag, EGameplayTagEventType _eEventType, TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_UnregisterGameplayTagEvent");

	Params::SCAbilitySystemComponent_BPF_UnregisterGameplayTagEvent Parms{};

	Parms._tag = std::move(_tag);
	Parms._eEventType = _eEventType;
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.BPF_UnregisterOnAnyGameplayTagChangeEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::BPF_UnregisterOnAnyGameplayTagChangeEvent(TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_UnregisterOnAnyGameplayTagChangeEvent");

	Params::SCAbilitySystemComponent_BPF_UnregisterOnAnyGameplayTagChangeEvent Parms{};

	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.MotionWarpingPreUpdate
// (Final, Native, Public)
// Parameters:
// class UMotionWarpingComponent*          _motionWarpingComp                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::MotionWarpingPreUpdate(class UMotionWarpingComponent* _motionWarpingComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "MotionWarpingPreUpdate");

	Params::SCAbilitySystemComponent_MotionWarpingPreUpdate Parms{};

	Parms._motionWarpingComp = _motionWarpingComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.OnGameplayTagEventChanged
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayTag&              _gameplayTag                                           (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iCount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)>_delegate                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitySystemComponent::OnGameplayTagEventChanged(const struct FGameplayTag& _gameplayTag, int32 _iCount, TDelegate<void(const class USCAbilitySystemComponent* _abilitySystem, const struct FGameplayTag& _gameplayTag, int32 _iCount)> _delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "OnGameplayTagEventChanged");

	Params::SCAbilitySystemComponent_OnGameplayTagEventChanged Parms{};

	Parms._gameplayTag = std::move(_gameplayTag);
	Parms._iCount = _iCount;
	Parms._delegate = _delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitySystemComponent.TryActivateAbilityWithManifest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCGameplayAbility>   _ability                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bGiveAbilityIfNeeded                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::TryActivateAbilityWithManifest(TSubclassOf<class USCGameplayAbility> _ability, const struct FGameplayAbilityTargetDataHandle& _payload, bool _bGiveAbilityIfNeeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "TryActivateAbilityWithManifest");

	Params::SCAbilitySystemComponent_TryActivateAbilityWithManifest Parms{};

	Parms._ability = _ability;
	Parms._payload = std::move(_payload);
	Parms._bGiveAbilityIfNeeded = _bGiveAbilityIfNeeded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.TryActivateChildAbilityWithManifest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCGameplayAbility>   _parent                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCGameplayAbility>   _child                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::TryActivateChildAbilityWithManifest(TSubclassOf<class USCGameplayAbility> _parent, TSubclassOf<class USCGameplayAbility> _child, const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "TryActivateChildAbilityWithManifest");

	Params::SCAbilitySystemComponent_TryActivateChildAbilityWithManifest Parms{};

	Parms._parent = _parent;
	Parms._child = _child;
	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetActiveGameplayEffectInfos
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FActiveGameplayEffectHandle&_handle                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           _outAssetTags                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           _outGrantedTags                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// float*                                  _outLevel                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle*    _outContext                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAbilitySystemComponent::BPF_GetActiveGameplayEffectInfos(const struct FActiveGameplayEffectHandle& _handle, struct FGameplayTagContainer* _outAssetTags, struct FGameplayTagContainer* _outGrantedTags, float* _outLevel, struct FGameplayEffectContextHandle* _outContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_GetActiveGameplayEffectInfos");

	Params::SCAbilitySystemComponent_BPF_GetActiveGameplayEffectInfos Parms{};

	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outAssetTags != nullptr)
		*_outAssetTags = std::move(Parms._outAssetTags);

	if (_outGrantedTags != nullptr)
		*_outGrantedTags = std::move(Parms._outGrantedTags);

	if (_outLevel != nullptr)
		*_outLevel = Parms._outLevel;

	if (_outContext != nullptr)
		*_outContext = std::move(Parms._outContext);

	return Parms.ReturnValue;
}


// Function SCCore.SCAbilitySystemComponent.BPF_GetAnimatingAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayAbility*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayAbility* USCAbilitySystemComponent::BPF_GetAnimatingAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitySystemComponent", "BPF_GetAnimatingAbility");

	Params::SCAbilitySystemComponent_BPF_GetAnimatingAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_GeneratePendingMoveDirectionUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USCCharacterAbilitySystemComponent::BPF_GeneratePendingMoveDirectionUID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCharacterAbilitySystemComponent", "BPF_GeneratePendingMoveDirectionUID");

	Params::SCCharacterAbilitySystemComponent_BPF_GeneratePendingMoveDirectionUID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.MulticastSetInputStates
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// const TArray<struct FReplicatedInputActionInfos>&_states                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint64                                  _uiRevision                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCharacterAbilitySystemComponent::MulticastSetInputStates(const TArray<struct FReplicatedInputActionInfos>& _states, uint64 _uiRevision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "MulticastSetInputStates");

	Params::SCCharacterAbilitySystemComponent_MulticastSetInputStates Parms{};

	Parms._states = std::move(_states);
	Parms._uiRevision = _uiRevision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterAbilitySystemComponent.ServerAddPendingMoveDirection
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSCPendingMoveDirection&   _pendingDir                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCharacterAbilitySystemComponent::ServerAddPendingMoveDirection(const struct FSCPendingMoveDirection& _pendingDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "ServerAddPendingMoveDirection");

	Params::SCCharacterAbilitySystemComponent_ServerAddPendingMoveDirection Parms{};

	Parms._pendingDir = std::move(_pendingDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterAbilitySystemComponent.ServerSendInputWatchEvent
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FGameplayAbilitySpecHandleAndPredictionKey&_predictionKey                                         (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _input                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eTriggerType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAbilityInputWatchTrigger& _infos                                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void USCCharacterAbilitySystemComponent::ServerSendInputWatchEvent(const struct FGameplayAbilitySpecHandleAndPredictionKey& _predictionKey, class USCInputAction* _input, EInputWatchTrigger _eTriggerType, const struct FAbilityInputWatchTrigger& _infos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "ServerSendInputWatchEvent");

	Params::SCCharacterAbilitySystemComponent_ServerSendInputWatchEvent Parms{};

	Parms._predictionKey = std::move(_predictionKey);
	Parms._input = _input;
	Parms._eTriggerType = _eTriggerType;
	Parms._infos = std::move(_infos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterAbilitySystemComponent.ServerSetInputStates
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const TArray<struct FReplicatedInputActionInfos>&_states                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint64                                  _uiRevision                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bValidServerTime                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fServerTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCharacterAbilitySystemComponent::ServerSetInputStates(const TArray<struct FReplicatedInputActionInfos>& _states, uint64 _uiRevision, bool _bValidServerTime, float _fServerTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "ServerSetInputStates");

	Params::SCCharacterAbilitySystemComponent_ServerSetInputStates Parms{};

	Parms._states = std::move(_states);
	Parms._uiRevision = _uiRevision;
	Parms._bValidServerTime = _bValidServerTime;
	Parms._fServerTime = _fServerTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterAbilitySystemComponent.ServerStopAnimationFromMoveInterrupt
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FGameplayAbilitySpecHandleAndPredictionKey&_infos                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPredictionKey&            _key                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCharacterAbilitySystemComponent::ServerStopAnimationFromMoveInterrupt(const struct FGameplayAbilitySpecHandleAndPredictionKey& _infos, const struct FPredictionKey& _key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "ServerStopAnimationFromMoveInterrupt");

	Params::SCCharacterAbilitySystemComponent_ServerStopAnimationFromMoveInterrupt Parms{};

	Parms._infos = std::move(_infos);
	Parms._key = std::move(_key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_FindTargetForAbility
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class USCGameplayAbility>_ability                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutValid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseCurrentIfAbilityActive                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCCharacterAbilitySystemComponent::BPF_FindTargetForAbility(const TSubclassOf<class USCGameplayAbility> _ability, class USCInputAction* _action, bool* _bOutValid, bool _bUseCurrentIfAbilityActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "BPF_FindTargetForAbility");

	Params::SCCharacterAbilitySystemComponent_BPF_FindTargetForAbility Parms{};

	Parms._ability = _ability;
	Parms._action = _action;
	Parms._bUseCurrentIfAbilityActive = _bUseCurrentIfAbilityActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutValid != nullptr)
		*_bOutValid = Parms._bOutValid;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_GetInputStateFromAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCGameplayAbility>   _ability                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputGameplayAbilityTargetData  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInputGameplayAbilityTargetData USCCharacterAbilitySystemComponent::BPF_GetInputStateFromAbility(TSubclassOf<class USCGameplayAbility> _ability, class USCInputAction* _action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "BPF_GetInputStateFromAbility");

	Params::SCCharacterAbilitySystemComponent_BPF_GetInputStateFromAbility Parms{};

	Parms._ability = _ability;
	Parms._action = _action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_GetLastPendingMoveDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCharacterAbilitySystemComponent::BPF_GetLastPendingMoveDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "BPF_GetLastPendingMoveDirection");

	Params::SCCharacterAbilitySystemComponent_BPF_GetLastPendingMoveDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_GetReplicatedInputState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCInputAction*                   _handler                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedInputActionInfos*     _infos                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCharacterAbilitySystemComponent::BPF_GetReplicatedInputState(class USCInputAction* _handler, struct FReplicatedInputActionInfos* _infos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "BPF_GetReplicatedInputState");

	Params::SCCharacterAbilitySystemComponent_BPF_GetReplicatedInputState Parms{};

	Parms._handler = _handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_infos != nullptr)
		*_infos = std::move(Parms._infos);

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterAbilitySystemComponent.BPF_HasPendingMoveDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCharacterAbilitySystemComponent::BPF_HasPendingMoveDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterAbilitySystemComponent", "BPF_HasPendingMoveDirection");

	Params::SCCharacterAbilitySystemComponent_BPF_HasPendingMoveDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterViewModel.OnPawnSet
// (Native, Protected)
// Parameters:
// class APlayerState*                     _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _newPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _oldPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCharacterViewModel::OnPawnSet(class APlayerState* _player, class APawn* _newPawn, class APawn* _oldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterViewModel", "OnPawnSet");

	Params::SCCharacterViewModel_OnPawnSet Parms{};

	Parms._player = _player;
	Parms._newPawn = _newPawn;
	Parms._oldPawn = _oldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraTransformInputMoveService.BPF_InitLookAtInputOrientation
// (Final, Native, Public, BlueprintCallable)

void USCCameraTransformInputMoveService::BPF_InitLookAtInputOrientation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransformInputMoveService", "BPF_InitLookAtInputOrientation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraTransformInputMoveService.BPF_StartLookAtInputBlending
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             _fDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _defaultBlend                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraTransformInputMoveService::BPF_StartLookAtInputBlending(const float _fDuration, ESCBlendType _defaultBlend, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransformInputMoveService", "BPF_StartLookAtInputBlending");

	Params::SCCameraTransformInputMoveService_BPF_StartLookAtInputBlending Parms{};

	Parms._fDuration = _fDuration;
	Parms._defaultBlend = _defaultBlend;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.BPF_GetDataIndexFromWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UUserWidget*                      _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPagingScrollBox::BPF_GetDataIndexFromWidget(class UUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetDataIndexFromWidget");

	Params::PagingScrollBox_BPF_GetDataIndexFromWidget Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetLastVisibleCell
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UPagingScrollBox::BPF_GetLastVisibleCell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetLastVisibleCell");

	Params::PagingScrollBox_BPF_GetLastVisibleCell Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetLastVisibleWidgetFromSection
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iSection                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UPagingScrollBox::BPF_GetLastVisibleWidgetFromSection(int32 _iSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetLastVisibleWidgetFromSection");

	Params::PagingScrollBox_BPF_GetLastVisibleWidgetFromSection Parms{};

	Parms._iSection = _iSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetWidgetFromDataIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UPagingScrollBox::BPF_GetWidgetFromDataIndex(int32 _iIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetWidgetFromDataIndex");

	Params::PagingScrollBox_BPF_GetWidgetFromDataIndex Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetWidgetFromSectionDataIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iSection                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iDataIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UPagingScrollBox::BPF_GetWidgetFromSectionDataIndex(int32 _iSection, int32 _iDataIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetWidgetFromSectionDataIndex");

	Params::PagingScrollBox_BPF_GetWidgetFromSectionDataIndex Parms{};

	Parms._iSection = _iSection;
	Parms._iDataIndex = _iDataIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.OnItemClicked
// (Final, Native, Protected)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagingScrollBox::OnItemClicked(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemClicked");

	Params::PagingScrollBox_OnItemClicked Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.OnItemFocused
// (Final, Native, Protected)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagingScrollBox::OnItemFocused(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemFocused");

	Params::PagingScrollBox_OnItemFocused Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.OnItemLostFocus
// (Final, Native, Protected)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagingScrollBox::OnItemLostFocus(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemLostFocus");

	Params::PagingScrollBox_OnItemLostFocus Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.OnItemPreviewButtonPressedCallback
// (Final, Native, Public)

void UPagingScrollBox::OnItemPreviewButtonPressedCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemPreviewButtonPressedCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.OnItemRightClicked
// (Final, Native, Protected)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagingScrollBox::OnItemRightClicked(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemRightClicked");

	Params::PagingScrollBox_OnItemRightClicked Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.OnItemSelected
// (Final, Native, Protected)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    _prevWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagingScrollBox::OnItemSelected(class USCUserWidget* _widget, class USCUserWidget* _prevWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "OnItemSelected");

	Params::PagingScrollBox_OnItemSelected Parms{};

	Parms._widget = _widget;
	Parms._prevWidget = _prevWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.PagingScrollBox.BPF_GetItemCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPagingScrollBox::BPF_GetItemCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetItemCount");

	Params::PagingScrollBox_BPF_GetItemCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetRowDataIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             iRow                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPagingScrollBox::BPF_GetRowDataIndex(const int32 iRow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetRowDataIndex");

	Params::PagingScrollBox_BPF_GetRowDataIndex Parms{};

	Parms.iRow = iRow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PagingScrollBox.BPF_GetWidgetDataIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             iRow                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             iCol                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPagingScrollBox::BPF_GetWidgetDataIndex(const int32 iRow, const int32 iCol) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagingScrollBox", "BPF_GetWidgetDataIndex");

	Params::PagingScrollBox_BPF_GetWidgetDataIndex Parms{};

	Parms.iRow = iRow;
	Parms.iCol = iCol;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPE_GetWorldIdealPosition
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCameraNodeBaseService::BPE_GetWorldIdealPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPE_GetWorldIdealPosition");

	Params::SCCameraNodeBaseService_BPE_GetWorldIdealPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPE_IsOverridingWorldIdealPosition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraNodeBaseService::BPE_IsOverridingWorldIdealPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPE_IsOverridingWorldIdealPosition");

	Params::SCCameraNodeBaseService_BPE_IsOverridingWorldIdealPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPE_IsServiceActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraNodeBaseService::BPE_IsServiceActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPE_IsServiceActive");

	Params::SCCameraNodeBaseService_BPE_IsServiceActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPE_OnUpdateNode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bBlendOut                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraNodeBaseService::BPE_OnUpdateNode(float _fDt, bool _bBlendOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPE_OnUpdateNode");

	Params::SCCameraNodeBaseService_BPE_OnUpdateNode Parms{};

	Parms._fDt = _fDt;
	Parms._bBlendOut = _bBlendOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraNodeBaseService.BPE_PostInit
// (Event, Public, BlueprintEvent)

void USCCameraNodeBaseService::BPE_PostInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPE_PostInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCCameraNodeBaseService.BPF_GetCameraDataResultNonConst
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCCameraData*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraData* USCCameraNodeBaseService::BPF_GetCameraDataResultNonConst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPF_GetCameraDataResultNonConst");

	Params::SCCameraNodeBaseService_BPF_GetCameraDataResultNonConst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPF_GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* USCCameraNodeBaseService::BPF_GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPF_GetCameraComponent");

	Params::SCCameraNodeBaseService_BPF_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraNodeBaseService.BPF_GetCameraDataInitial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USCCameraData*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USCCameraData* USCCameraNodeBaseService::BPF_GetCameraDataInitial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraNodeBaseService", "BPF_GetCameraDataInitial");

	Params::SCCameraNodeBaseService_BPF_GetCameraDataInitial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PerforceHelperLibrary.GetCurrentChangeList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool bSuccess, int32 iChangeListNumber)>&_callback                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerforceHelperLibrary::GetCurrentChangeList(const TDelegate<void(bool bSuccess, int32 iChangeListNumber)>& _callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerforceHelperLibrary", "GetCurrentChangeList");

	Params::PerforceHelperLibrary_GetCurrentChangeList Parms{};

	Parms._callback = _callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCActorImpostor.BPF_CreateMaterialInstances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _component                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               _materialInterface                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCActorImpostor::BPF_CreateMaterialInstances(class UPrimitiveComponent* _component, class UMaterialInterface* _materialInterface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCActorImpostor", "BPF_CreateMaterialInstances");

	Params::SCActorImpostor_BPF_CreateMaterialInstances Parms{};

	Parms._component = _component;
	Parms._materialInterface = _materialInterface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCActorImpostor.BPF_MimicSkeletalMeshComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           _otherMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCActorImpostor::BPF_MimicSkeletalMeshComponent(class USkeletalMeshComponent* _otherMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCActorImpostor", "BPF_MimicSkeletalMeshComponent");

	Params::SCActorImpostor_BPF_MimicSkeletalMeshComponent Parms{};

	Parms._otherMeshComponent = _otherMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCActorImpostor.BPF_MimicStaticMeshComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             _otherMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCActorImpostor::BPF_MimicStaticMeshComponent(class UStaticMeshComponent* _otherMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCActorImpostor", "BPF_MimicStaticMeshComponent");

	Params::SCActorImpostor_BPF_MimicStaticMeshComponent Parms{};

	Parms._otherMeshComponent = _otherMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCActorImpostor.OnOwnerDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           _destroyedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCActorImpostor::OnOwnerDestroyed(class AActor* _destroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCActorImpostor", "OnOwnerDestroyed");

	Params::SCActorImpostor_OnOwnerDestroyed Parms{};

	Parms._destroyedActor = _destroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacterImpostor.BPE_MimicCharacter
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCCharacter*                     _characterToMimic                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacterImpostor::BPE_MimicCharacter(class ASCCharacter* _characterToMimic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacterImpostor", "BPE_MimicCharacter");

	Params::SCCharacterImpostor_BPE_MimicCharacter Parms{};

	Parms._characterToMimic = _characterToMimic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameplayEffect.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* USCGameplayEffect::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayEffect", "GetCustomDataTableStruct");

	Params::SCGameplayEffect_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraShakeService.OnMontageEnded
// (Final, Native, Private)
// Parameters:
// class UAnimMontage*                     _inMontage                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInterrupted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraShakeService::OnMontageEnded(class UAnimMontage* _inMontage, bool _bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraShakeService", "OnMontageEnded");

	Params::SCCameraShakeService_OnMontageEnded Parms{};

	Parms._inMontage = _inMontage;
	Parms._bInterrupted = _bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraShakeService.OnMontageStarted
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UAnimMontage*                     _inMontage                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimMontageInstance&      _inMontageInstance                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraShakeService::OnMontageStarted(class UAnimMontage* _inMontage, const struct FAnimMontageInstance& _inMontageInstance, class UAnimInstance* _animInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraShakeService", "OnMontageStarted");

	Params::SCCameraShakeService_OnMontageStarted Parms{};

	Parms._inMontage = _inMontage;
	Parms._inMontageInstance = std::move(_inMontageInstance);
	Parms._animInstance = _animInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraShakeService.BPF_GetCurrentAddedShakeThisFrame
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCCameraShakeService::BPF_GetCurrentAddedShakeThisFrame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraShakeService", "BPF_GetCurrentAddedShakeThisFrame");

	Params::SCCameraShakeService_BPF_GetCurrentAddedShakeThisFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PlayerStatsViewModel.GetStatSource
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>&      _statClass                                             (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStatViewModel*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStatViewModel* UPlayerStatsViewModel::GetStatSource(const TSoftClassPtr<class UClass>& _statClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatsViewModel", "GetStatSource");

	Params::PlayerStatsViewModel_GetStatSource Parms{};

	Parms._statClass = _statClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowState.BPE_EnteringFlowState
// (Event, Public, BlueprintEvent)
// Parameters:
// class USCGameFlowSubsystem*             _gameFlowSubsystem                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCGameFlowState*           PreviousState                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowState::BPE_EnteringFlowState(class USCGameFlowSubsystem* _gameFlowSubsystem, const class USCGameFlowState* PreviousState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "BPE_EnteringFlowState");

	Params::SCGameFlowState_BPE_EnteringFlowState Parms{};

	Parms._gameFlowSubsystem = _gameFlowSubsystem;
	Parms.PreviousState = PreviousState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameFlowState.BPE_ExitingFlowState
// (Event, Public, BlueprintEvent)
// Parameters:
// class USCGameFlowSubsystem*             _gameFlowSubsystem                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCGameFlowState*           _nextState                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsBackTracking                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowState::BPE_ExitingFlowState(class USCGameFlowSubsystem* _gameFlowSubsystem, const class USCGameFlowState* _nextState, bool _bIsBackTracking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "BPE_ExitingFlowState");

	Params::SCGameFlowState_BPE_ExitingFlowState Parms{};

	Parms._gameFlowSubsystem = _gameFlowSubsystem;
	Parms._nextState = _nextState;
	Parms._bIsBackTracking = _bIsBackTracking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameFlowState.BPE_PostEnteringFlowState
// (Event, Public, BlueprintEvent)
// Parameters:
// class USCGameFlowSubsystem*             _gameFlowSubsystem                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCGameFlowState*           PreviousState                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bHasPendingTransitions                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowState::BPE_PostEnteringFlowState(class USCGameFlowSubsystem* _gameFlowSubsystem, const class USCGameFlowState* PreviousState, bool _bHasPendingTransitions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "BPE_PostEnteringFlowState");

	Params::SCGameFlowState_BPE_PostEnteringFlowState Parms{};

	Parms._gameFlowSubsystem = _gameFlowSubsystem;
	Parms.PreviousState = PreviousState;
	Parms._bHasPendingTransitions = _bHasPendingTransitions;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameFlowState.BPF_SetMatchState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             _inMatchState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowState::BPF_SetMatchState(class FName _inMatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "BPF_SetMatchState");

	Params::SCGameFlowState_BPF_SetMatchState Parms{};

	Parms._inMatchState = _inMatchState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowState.OnPawnChanged
// (Native, Public)
// Parameters:
// class APlayerState*                     _playerState                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _newPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _oldPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowState::OnPawnChanged(class APlayerState* _playerState, class APawn* _newPawn, class APawn* _oldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "OnPawnChanged");

	Params::SCGameFlowState_OnPawnChanged Parms{};

	Parms._playerState = _playerState;
	Parms._newPawn = _newPawn;
	Parms._oldPawn = _oldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowState.BPF_GetLevelIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _levelPathName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCGameFlowState::BPF_GetLevelIndex(class FName _levelPathName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowState", "BPF_GetLevelIndex");

	Params::SCGameFlowState_BPF_GetLevelIndex Parms{};

	Parms._levelPathName = _levelPathName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_ConvertCardinalToAdvanced
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCCardinalPoints                       _eCardinalPoint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCAdvancedCardinalPoints               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCAdvancedCardinalPoints UCardinalPointsHelper::BPF_ConvertCardinalToAdvanced(ESCCardinalPoints _eCardinalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_ConvertCardinalToAdvanced");

	Params::CardinalPointsHelper_BPF_ConvertCardinalToAdvanced Parms{};

	Parms._eCardinalPoint = _eCardinalPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_GetAdvancedCardinalPointFromAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fAngleInDegrees                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutPrecision                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCAdvancedCardinalPoints               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCAdvancedCardinalPoints UCardinalPointsHelper::BPF_GetAdvancedCardinalPointFromAngle(float _fAngleInDegrees, float* _fOutPrecision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_GetAdvancedCardinalPointFromAngle");

	Params::CardinalPointsHelper_BPF_GetAdvancedCardinalPointFromAngle Parms{};

	Parms._fAngleInDegrees = _fAngleInDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutPrecision != nullptr)
		*_fOutPrecision = Parms._fOutPrecision;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_GetCardinalPointFromAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fAngleInDegrees                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fEastWestTolerance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints UCardinalPointsHelper::BPF_GetCardinalPointFromAngle(float _fAngleInDegrees, float _fEastWestTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_GetCardinalPointFromAngle");

	Params::CardinalPointsHelper_BPF_GetCardinalPointFromAngle Parms{};

	Parms._fAngleInDegrees = _fAngleInDegrees;
	Parms._fEastWestTolerance = _fEastWestTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_IsNone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCCardinalPoints                       _eCardinalPoint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCardinalPointsHelper::BPF_IsNone(ESCCardinalPoints _eCardinalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_IsNone");

	Params::CardinalPointsHelper_BPF_IsNone Parms{};

	Parms._eCardinalPoint = _eCardinalPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_Mirror
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCCardinalPoints                       _eCardinalPoint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreVertical                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints UCardinalPointsHelper::BPF_Mirror(ESCCardinalPoints _eCardinalPoint, bool _bMirror, bool _bIgnoreVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_Mirror");

	Params::CardinalPointsHelper_BPF_Mirror Parms{};

	Parms._eCardinalPoint = _eCardinalPoint;
	Parms._bMirror = _bMirror;
	Parms._bIgnoreVertical = _bIgnoreVertical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_MirrorAdvanced
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCAdvancedCardinalPoints               _eCardinalPoint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreVertical                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCAdvancedCardinalPoints               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCAdvancedCardinalPoints UCardinalPointsHelper::BPF_MirrorAdvanced(ESCAdvancedCardinalPoints _eCardinalPoint, bool _bMirror, bool _bIgnoreVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_MirrorAdvanced");

	Params::CardinalPointsHelper_BPF_MirrorAdvanced Parms{};

	Parms._eCardinalPoint = _eCardinalPoint;
	Parms._bMirror = _bMirror;
	Parms._bIgnoreVertical = _bIgnoreVertical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CardinalPointsHelper.BPF_RotateAdvancedCardinalPointFromAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCAdvancedCardinalPoints               _eCardinal                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCAdvancedCardinalPoints               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCAdvancedCardinalPoints UCardinalPointsHelper::BPF_RotateAdvancedCardinalPointFromAngle(ESCAdvancedCardinalPoints _eCardinal, int32 _iDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CardinalPointsHelper", "BPF_RotateAdvancedCardinalPointFromAngle");

	Params::CardinalPointsHelper_BPF_RotateAdvancedCardinalPointFromAngle Parms{};

	Parms._eCardinal = _eCardinal;
	Parms._iDirection = _iDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCoreTools.BPF_ForceCrash
// (Final, Native, Static, Public, BlueprintCallable)

void USCCoreTools::BPF_ForceCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreTools", "BPF_ForceCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCoreTools.BPF_GetDefaultObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              _ObjectClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USCCoreTools::BPF_GetDefaultObject(TSubclassOf<class UObject> _ObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreTools", "BPF_GetDefaultObject");

	Params::SCCoreTools_BPF_GetDefaultObject Parms{};

	Parms._ObjectClass = _ObjectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCoreTools.BPF_GetPIEInstanceID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCoreTools::BPF_GetPIEInstanceID(const class UObject* _worldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreTools", "BPF_GetPIEInstanceID");

	Params::SCCoreTools_BPF_GetPIEInstanceID Parms{};

	Parms._worldContext = _worldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCoreTools.BPF_MarkPackageDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _asset                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCoreTools::BPF_MarkPackageDirty(const class UObject* _asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreTools", "BPF_MarkPackageDirty");

	Params::SCCoreTools_BPF_MarkPackageDirty Parms{};

	Parms._asset = _asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCoreTools.BPF_RefreshPrimaryAssetDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bForceRefresh                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCoreTools::BPF_RefreshPrimaryAssetDirectory(bool _bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCoreTools", "BPF_RefreshPrimaryAssetDirectory");

	Params::SCCoreTools_BPF_RefreshPrimaryAssetDirectory Parms{};

	Parms._bForceRefresh = _bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCRaycastTargetDataHelpers.BPF_ComputeOrientedTangentDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRaycastTargetData&        _raycastTargetData                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCRaycastTargetDataHelpers::BPF_ComputeOrientedTangentDirection(const struct FRaycastTargetData& _raycastTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCRaycastTargetDataHelpers", "BPF_ComputeOrientedTangentDirection");

	Params::SCRaycastTargetDataHelpers_BPF_ComputeOrientedTangentDirection Parms{};

	Parms._raycastTargetData = std::move(_raycastTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCRaycastTargetDataHelpers.BPF_ComputeRaycastDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRaycastTargetData&        _raycastTargetData                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCRaycastTargetDataHelpers::BPF_ComputeRaycastDirection(const struct FRaycastTargetData& _raycastTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCRaycastTargetDataHelpers", "BPF_ComputeRaycastDirection");

	Params::SCRaycastTargetDataHelpers_BPF_ComputeRaycastDirection Parms{};

	Parms._raycastTargetData = std::move(_raycastTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCRaycastTargetDataHelpers.BPF_ComputeRaycastDirToOrientedTangentAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRaycastTargetData&        _raycastTargetData                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCRaycastTargetDataHelpers::BPF_ComputeRaycastDirToOrientedTangentAngle(const struct FRaycastTargetData& _raycastTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCRaycastTargetDataHelpers", "BPF_ComputeRaycastDirToOrientedTangentAngle");

	Params::SCRaycastTargetDataHelpers_BPF_ComputeRaycastDirToOrientedTangentAngle Parms{};

	Parms._raycastTargetData = std::move(_raycastTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCRaycastTargetDataHelpers.BPF_ComputeTangentDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRaycastTargetData&        _raycastTargetData                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCRaycastTargetDataHelpers::BPF_ComputeTangentDirection(const struct FRaycastTargetData& _raycastTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCRaycastTargetDataHelpers", "BPF_ComputeTangentDirection");

	Params::SCRaycastTargetDataHelpers_BPF_ComputeTangentDirection Parms{};

	Parms._raycastTargetData = std::move(_raycastTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCRaycastTargetDataHelpers.BPF_ComputeTangentRaycastDirSign
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRaycastTargetData&        _raycastTargetData                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCRaycastTargetDataHelpers::BPF_ComputeTangentRaycastDirSign(const struct FRaycastTargetData& _raycastTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCRaycastTargetDataHelpers", "BPF_ComputeTangentRaycastDirSign");

	Params::SCRaycastTargetDataHelpers_BPF_ComputeTangentRaycastDirSign Parms{};

	Parms._raycastTargetData = std::move(_raycastTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.PlayersInvolvedHelper.BreakPlayersInvolved
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPlayersInvolved&          _playersInvolved                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APlayerState**                    _outInstigator                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>*            _outOtherPlayersInvolved                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPlayersInvolvedHelper::BreakPlayersInvolved(const struct FPlayersInvolved& _playersInvolved, class APlayerState** _outInstigator, TArray<class APlayerState*>* _outOtherPlayersInvolved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PlayersInvolvedHelper", "BreakPlayersInvolved");

	Params::PlayersInvolvedHelper_BreakPlayersInvolved Parms{};

	Parms._playersInvolved = std::move(_playersInvolved);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outInstigator != nullptr)
		*_outInstigator = Parms._outInstigator;

	if (_outOtherPlayersInvolved != nullptr)
		*_outOtherPlayersInvolved = std::move(Parms._outOtherPlayersInvolved);
}


// Function SCCore.ControllerButtonInterface.BPE_SetInputAction
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USCInputAction*                   _eAction                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          _owner                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FControllerIconStyle&      _eIconStyle                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EControllerIconAxisTypes                _eAxisType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCUserDefinedEnumHandler& _drawingStyle                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IControllerButtonInterface::BPE_SetInputAction(class USCInputAction* _eAction, class UWidget* _owner, const struct FControllerIconStyle& _eIconStyle, EControllerIconAxisTypes _eAxisType, const struct FSCUserDefinedEnumHandler& _drawingStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ControllerButtonInterface", "BPE_SetInputAction");

	Params::ControllerButtonInterface_BPE_SetInputAction Parms{};

	Parms._eAction = _eAction;
	Parms._owner = _owner;
	Parms._eIconStyle = std::move(_eIconStyle);
	Parms._eAxisType = _eAxisType;
	Parms._drawingStyle = std::move(_drawingStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.RichTextBlockControllerDecoratorHelper.BPF_GetControllerIconAxisTypesValueName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EControllerIconAxisTypes                _eAxis                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URichTextBlockControllerDecoratorHelper::BPF_GetControllerIconAxisTypesValueName(EControllerIconAxisTypes _eAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RichTextBlockControllerDecoratorHelper", "BPF_GetControllerIconAxisTypesValueName");

	Params::RichTextBlockControllerDecoratorHelper_BPF_GetControllerIconAxisTypesValueName Parms{};

	Parms._eAxis = _eAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStateMachineNode.BPE_PreBindActiveConditions
// (Event, Public, BlueprintEvent)

void USCStateMachineNode::BPE_PreBindActiveConditions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStateMachineNode", "BPE_PreBindActiveConditions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCStateMachineNode.BPF_GetStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag USCStateMachineNode::BPF_GetStateTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStateMachineNode", "BPF_GetStateTag");

	Params::SCStateMachineNode_BPF_GetStateTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStreamingNode.OnStreamingStateChanged
// (Final, Native, Protected)
// Parameters:
// ESCStreamingState                       _eNewStreamingState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStreamingNode::OnStreamingStateChanged(ESCStreamingState _eNewStreamingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingNode", "OnStreamingStateChanged");

	Params::SCStreamingNode_OnStreamingStateChanged Parms{};

	Parms._eNewStreamingState = _eNewStreamingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicTextureMask.BPF_BakeSelfPositionRuntime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCDynamicTextureMask::BPF_BakeSelfPositionRuntime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "BPF_BakeSelfPositionRuntime");

	Params::SCDynamicTextureMask_BPF_BakeSelfPositionRuntime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicTextureMask.BPF_DrawOnMask
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vWorldPos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHitSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHitFade                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vAxisV                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vAxisU                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         _TextureToProject                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCDynamicTextureMask::BPF_DrawOnMask(const struct FVector& _vWorldPos, float _fHitSize, float _fHitFade, const struct FVector& _vAxisV, const struct FVector& _vAxisU, class UTexture* _TextureToProject, const struct FLinearColor& _color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "BPF_DrawOnMask");

	Params::SCDynamicTextureMask_BPF_DrawOnMask Parms{};

	Parms._vWorldPos = std::move(_vWorldPos);
	Parms._fHitSize = _fHitSize;
	Parms._fHitFade = _fHitFade;
	Parms._vAxisV = std::move(_vAxisV);
	Parms._vAxisU = std::move(_vAxisU);
	Parms._TextureToProject = _TextureToProject;
	Parms._color = std::move(_color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicTextureMask.BPF_DrawOnMaskOverride
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vWorldPos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHitSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHitFade                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vAxisV                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vAxisU                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         _TextureToProject                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDynamicTextureMask_DrawShape           _eDrawShape                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCDynamicTextureMask::BPF_DrawOnMaskOverride(const struct FVector& _vWorldPos, float _fHitSize, float _fHitFade, const struct FVector& _vAxisV, const struct FVector& _vAxisU, class UTexture* _TextureToProject, const struct FLinearColor& _color, EDynamicTextureMask_DrawShape _eDrawShape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "BPF_DrawOnMaskOverride");

	Params::SCDynamicTextureMask_BPF_DrawOnMaskOverride Parms{};

	Parms._vWorldPos = std::move(_vWorldPos);
	Parms._fHitSize = _fHitSize;
	Parms._fHitFade = _fHitFade;
	Parms._vAxisV = std::move(_vAxisV);
	Parms._vAxisU = std::move(_vAxisU);
	Parms._TextureToProject = _TextureToProject;
	Parms._color = std::move(_color);
	Parms._eDrawShape = _eDrawShape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDynamicTextureMask.CreateBothTexturesTarget
// (Final, Native, Protected, BlueprintCallable)

void USCDynamicTextureMask::CreateBothTexturesTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "CreateBothTexturesTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicTextureMask.CreateMaskTextureTarget
// (Final, Native, Protected, BlueprintCallable)

void USCDynamicTextureMask::CreateMaskTextureTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "CreateMaskTextureTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicTextureMask.CreatePositionBakingTextureTarget
// (Final, Native, Protected, BlueprintCallable)

void USCDynamicTextureMask::CreatePositionBakingTextureTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "CreatePositionBakingTextureTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDynamicTextureMask.SetupLocalBoundsOffline
// (Final, Native, Protected, BlueprintCallable)

void USCDynamicTextureMask::SetupLocalBoundsOffline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCDynamicTextureMask", "SetupLocalBoundsOffline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.BPF_AddItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::BPF_AddItem(class UUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_AddItem");

	Params::SCTableWidget_BPF_AddItem Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.BPF_GetChildrenCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTableWidget::BPF_GetChildrenCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetChildrenCount");

	Params::SCTableWidget_BPF_GetChildrenCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.BPF_GetItemAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* USCTableWidget::BPF_GetItemAtIndex(int32 _iIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetItemAtIndex");

	Params::SCTableWidget_BPF_GetItemAtIndex Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.BPF_GetItemIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          _item                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTableWidget::BPF_GetItemIndex(class UWidget* _item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetItemIndex");

	Params::SCTableWidget_BPF_GetItemIndex Parms{};

	Parms._item = _item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.BPF_GetLastVisibleItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCTableWidget::BPF_GetLastVisibleItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetLastVisibleItem");

	Params::SCTableWidget_BPF_GetLastVisibleItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.BPF_GetNextItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          _currentButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECycleDirection                         _eDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSkipDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCTableWidget::BPF_GetNextItem(class UWidget* _currentButton, ECycleDirection _eDirection, bool _bSkipDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetNextItem");

	Params::SCTableWidget_BPF_GetNextItem Parms{};

	Parms._currentButton = _currentButton;
	Parms._eDirection = _eDirection;
	Parms._bSkipDisabled = _bSkipDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.BPF_GetSelectedButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCButtonUserWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCButtonUserWidget* USCTableWidget::BPF_GetSelectedButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "BPF_GetSelectedButton");

	Params::SCTableWidget_BPF_GetSelectedButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTableWidget.OnItemClicked
// (Final, Native, Public)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemClicked(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemClicked");

	Params::SCTableWidget_OnItemClicked Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.OnItemFocused
// (Final, Native, Public)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemFocused(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemFocused");

	Params::SCTableWidget_OnItemFocused Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.OnItemLostFocus
// (Final, Native, Public)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemLostFocus(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemLostFocus");

	Params::SCTableWidget_OnItemLostFocus Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.OnItemNavigation
// (Final, Native, Public)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigation                           _eNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemNavigation(class USCUserWidget* _widget, EUINavigation _eNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemNavigation");

	Params::SCTableWidget_OnItemNavigation Parms{};

	Parms._widget = _widget;
	Parms._eNavigation = _eNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.OnItemRightClicked
// (Final, Native, Public)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemRightClicked(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemRightClicked");

	Params::SCTableWidget_OnItemRightClicked Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCTableWidget.OnItemSelected
// (Final, Native, Public)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    _prevWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTableWidget::OnItemSelected(class USCUserWidget* _widget, class USCUserWidget* _prevWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTableWidget", "OnItemSelected");

	Params::SCTableWidget_OnItemSelected Parms{};

	Parms._widget = _widget;
	Parms._prevWidget = _prevWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAbilitiesGameplayEffectComponent.OnAbilitiesLoaded
// (Final, Native, Protected, Const)
// Parameters:
// const struct FActiveGameplayEffectHandle&_activeGEHandle                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAbilitiesGameplayEffectComponent::OnAbilitiesLoaded(const struct FActiveGameplayEffectHandle& _activeGEHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAbilitiesGameplayEffectComponent", "OnAbilitiesLoaded");

	Params::SCAbilitiesGameplayEffectComponent_OnAbilitiesLoaded Parms{};

	Parms._activeGEHandle = std::move(_activeGEHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBPAbilityMontageNotify.BPF_AbilityNotify
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USCAbilitySystemComponent*        _component                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEvent&          _event                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _instanceID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBPAbilityMontageNotify::BPF_AbilityNotify(class USCAbilitySystemComponent* _component, const struct FAnimNotifyEvent& _event, class UAnimMontage* _montage, class UAnimInstance* _animInstance, int32 _instanceID, const struct FGameplayAbilityTargetDataHandle& _context, float _fDt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBPAbilityMontageNotify", "BPF_AbilityNotify");

	Params::SCBPAbilityMontageNotify_BPF_AbilityNotify Parms{};

	Parms._component = _component;
	Parms._event = std::move(_event);
	Parms._montage = _montage;
	Parms._animInstance = _animInstance;
	Parms._instanceID = _instanceID;
	Parms._context = std::move(_context);
	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCBPAbilityMontageNotifyState.BPF_AbilityNotifyBegin
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USCAbilitySystemComponent*        _component                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEvent&          _event                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FInstancedStruct&                _context                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _instanceID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBPAbilityMontageNotifyState::BPF_AbilityNotifyBegin(class USCAbilitySystemComponent* _component, const struct FAnimNotifyEvent& _event, struct FInstancedStruct& _context, class UAnimMontage* _montage, class UAnimInstance* _animInstance, int32 _instanceID, float _fDt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBPAbilityMontageNotifyState", "BPF_AbilityNotifyBegin");

	Params::SCBPAbilityMontageNotifyState_BPF_AbilityNotifyBegin Parms{};

	Parms._component = _component;
	Parms._event = std::move(_event);
	Parms._context = std::move(_context);
	Parms._montage = _montage;
	Parms._animInstance = _animInstance;
	Parms._instanceID = _instanceID;
	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);

	_context = std::move(Parms._context);
}


// Function SCCore.SCBPAbilityMontageNotifyState.BPF_AbilityNotifyEnd
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USCAbilitySystemComponent*        _component                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEvent&          _event                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FInstancedStruct&                _context                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _instanceID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBPAbilityMontageNotifyState::BPF_AbilityNotifyEnd(class USCAbilitySystemComponent* _component, const struct FAnimNotifyEvent& _event, struct FInstancedStruct& _context, class UAnimMontage* _montage, class UAnimInstance* _animInstance, int32 _instanceID, float _fDt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBPAbilityMontageNotifyState", "BPF_AbilityNotifyEnd");

	Params::SCBPAbilityMontageNotifyState_BPF_AbilityNotifyEnd Parms{};

	Parms._component = _component;
	Parms._event = std::move(_event);
	Parms._context = std::move(_context);
	Parms._montage = _montage;
	Parms._animInstance = _animInstance;
	Parms._instanceID = _instanceID;
	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);

	_context = std::move(Parms._context);
}


// Function SCCore.SCBPAbilityMontageNotifyState.BPF_AbilityNotifyTick
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USCAbilitySystemComponent*        _component                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEvent&          _event                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FInstancedStruct&                _context                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _instanceID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCBPAbilityMontageNotifyState::BPF_AbilityNotifyTick(class USCAbilitySystemComponent* _component, const struct FAnimNotifyEvent& _event, struct FInstancedStruct& _context, class UAnimMontage* _montage, class UAnimInstance* _animInstance, int32 _instanceID, float _fDt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBPAbilityMontageNotifyState", "BPF_AbilityNotifyTick");

	Params::SCBPAbilityMontageNotifyState_BPF_AbilityNotifyTick Parms{};

	Parms._component = _component;
	Parms._event = std::move(_event);
	Parms._context = std::move(_context);
	Parms._montage = _montage;
	Parms._animInstance = _animInstance;
	Parms._instanceID = _instanceID;
	Parms._fDt = _fDt;

	UObject::ProcessEvent(Func, &Parms);

	_context = std::move(Parms._context);
}


// Function SCCore.TargetingContextHelpers.BPF_GetForwardFromTargetingContext
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTargetingContext&         _targetingContext                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UTargetingContextHelpers::BPF_GetForwardFromTargetingContext(const class AActor* _actor, const struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_GetForwardFromTargetingContext");

	Params::TargetingContextHelpers_BPF_GetForwardFromTargetingContext Parms{};

	Parms._actor = _actor;
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetingContextHelpers.BPF_GetVelocityFromTargetingContext
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTargetingContext&         _targetingContext                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingContextHelpers::BPF_GetVelocityFromTargetingContext(const class AActor* _actor, const struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_GetVelocityFromTargetingContext");

	Params::TargetingContextHelpers_BPF_GetVelocityFromTargetingContext Parms{};

	Parms._actor = _actor;
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetingContextHelpers.BPF_SaveActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingContext*               _targetingContext                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    _bFeetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bVelocity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SaveActorState(const class AActor* _actor, struct FTargetingContext* _targetingContext, bool _bFeetLocation, bool _bVelocity, bool _bOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SaveActorState");

	Params::TargetingContextHelpers_BPF_SaveActorState Parms{};

	Parms._actor = _actor;
	Parms._bFeetLocation = _bFeetLocation;
	Parms._bVelocity = _bVelocity;
	Parms._bOrientation = _bOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_targetingContext != nullptr)
		*_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.TargetingContextHelpers.BPF_SetTargetingContextActorFeetLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingContext&               _targetingContext                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SetTargetingContextActorFeetLocation(const class AActor* _actor, struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SetTargetingContextActorFeetLocation");

	Params::TargetingContextHelpers_BPF_SetTargetingContextActorFeetLocation Parms{};

	Parms._actor = _actor;
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.TargetingContextHelpers.BPF_SetTargetingContextActorRotation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingContext&               _targetingContext                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SetTargetingContextActorRotation(const class AActor* _actor, struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SetTargetingContextActorRotation");

	Params::TargetingContextHelpers_BPF_SetTargetingContextActorRotation Parms{};

	Parms._actor = _actor;
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.TargetingContextHelpers.BPF_SetTargetingContextActorVelocity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingContext&               _targetingContext                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SetTargetingContextActorVelocity(const class AActor* _actor, struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SetTargetingContextActorVelocity");

	Params::TargetingContextHelpers_BPF_SetTargetingContextActorVelocity Parms{};

	Parms._actor = _actor;
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.TargetingContextHelpers.BPF_SetTargetingContextRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  _rotator                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTargetingContext&               _targetingContext                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SetTargetingContextRotation(const struct FRotator& _rotator, struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SetTargetingContextRotation");

	Params::TargetingContextHelpers_BPF_SetTargetingContextRotation Parms{};

	Parms._rotator = std::move(_rotator);
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.TargetingContextHelpers.BPF_SetTargetingContextVelocity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vVelocity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingContext&               _targetingContext                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetingContextHelpers::BPF_SetTargetingContextVelocity(const struct FVector& _vVelocity, struct FTargetingContext& _targetingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingContextHelpers", "BPF_SetTargetingContextVelocity");

	Params::TargetingContextHelpers_BPF_SetTargetingContextVelocity Parms{};

	Parms._vVelocity = std::move(_vVelocity);
	Parms._targetingContext = std::move(_targetingContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetingContext = std::move(Parms._targetingContext);
}


// Function SCCore.DataTableValueHandleHelper.BPF_ConvertToInstancedStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDataTableRowHandle&       _row                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInstancedStruct*                _outResult                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UDataTableValueHandleHelper::BPF_ConvertToInstancedStruct(const struct FDataTableRowHandle& _row, struct FInstancedStruct* _outResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_ConvertToInstancedStruct");

	Params::DataTableValueHandleHelper_BPF_ConvertToInstancedStruct Parms{};

	Parms._row = std::move(_row);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAssetDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UDataTableValueHandleHelper::BPF_GetAsset(class UObject* _container, const struct FAssetDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetAsset");

	Params::DataTableValueHandleHelper_BPF_GetAsset Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetAssetFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FAssetDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UDataTableValueHandleHelper::BPF_GetAssetFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FAssetDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetAssetFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetAssetFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetBooleanValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FBooleanDataBinding&       _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDataTableValueHandleHelper::BPF_GetBooleanValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FBooleanDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetBooleanValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetBooleanValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetClassValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FClassDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UDataTableValueHandleHelper::BPF_GetClassValue(class UObject* _container, const struct FClassDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetClassValue");

	Params::DataTableValueHandleHelper_BPF_GetClassValue Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetClassValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FClassDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UDataTableValueHandleHelper::BPF_GetClassValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FClassDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetClassValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetClassValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFloatDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDataTableValueHandleHelper::BPF_GetFloatValue(class UObject* _container, const struct FFloatDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetFloatValue");

	Params::DataTableValueHandleHelper_BPF_GetFloatValue Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetFloatValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FFloatDataBinding&         _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDataTableValueHandleHelper::BPF_GetFloatValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FFloatDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetFloatValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetFloatValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetGameplayTagContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainerDataBinding&_prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           _outResult                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UDataTableValueHandleHelper::BPF_GetGameplayTagContainer(class UObject* _container, const struct FGameplayTagContainerDataBinding& _prop, struct FGameplayTagContainer* _outResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetGameplayTagContainer");

	Params::DataTableValueHandleHelper_BPF_GetGameplayTagContainer Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetGameplayTagContainerFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainerDataBinding&_prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           _outResult                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UDataTableValueHandleHelper::BPF_GetGameplayTagContainerFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FGameplayTagContainerDataBinding& _prop, struct FGameplayTagContainer* _outResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetGameplayTagContainerFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetGameplayTagContainerFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetGameplayTagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagDataBinding&   _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDataTableValueHandleHelper::BPF_GetGameplayTagValue(class UObject* _container, const struct FGameplayTagDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetGameplayTagValue");

	Params::DataTableValueHandleHelper_BPF_GetGameplayTagValue Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetGameplayTagValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGameplayTagDataBinding&   _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDataTableValueHandleHelper::BPF_GetGameplayTagValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FGameplayTagDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetGameplayTagValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetGameplayTagValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetGameplayTagValueFromTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCGameplayAbilityTargetData&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTagDataBinding&   _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDataTableValueHandleHelper::BPF_GetGameplayTagValueFromTargetData(const struct FSCGameplayAbilityTargetData& _handle, const struct FGameplayTagDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetGameplayTagValueFromTargetData");

	Params::DataTableValueHandleHelper_BPF_GetGameplayTagValueFromTargetData Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetIntValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntDataBinding&           _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDataTableValueHandleHelper::BPF_GetIntValue(class UObject* _container, const struct FIntDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetIntValue");

	Params::DataTableValueHandleHelper_BPF_GetIntValue Parms{};

	Parms._container = _container;
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetIntValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntDataBinding&           _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDataTableValueHandleHelper::BPF_GetIntValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FIntDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetIntValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetIntValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetLinearColorValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLinearColorDataBinding&   _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UDataTableValueHandleHelper::BPF_GetLinearColorValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FLinearColorDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetLinearColorValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetLinearColorValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetLinearColorValueFromTargetData
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCGameplayAbilityTargetData&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColorDataBinding&   _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UDataTableValueHandleHelper::BPF_GetLinearColorValueFromTargetData(const struct FSCGameplayAbilityTargetData& _handle, const struct FLinearColorDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetLinearColorValueFromTargetData");

	Params::DataTableValueHandleHelper_BPF_GetLinearColorValueFromTargetData Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetNameValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FNameDataBinding&          _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UDataTableValueHandleHelper::BPF_GetNameValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FNameDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetNameValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetNameValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetSoftClassValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSoftClassDataBinding&     _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UDataTableValueHandleHelper::BPF_GetSoftClassValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FSoftClassDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetSoftClassValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetSoftClassValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetSoftObjectValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSoftAssetDataBinding&     _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UDataTableValueHandleHelper::BPF_GetSoftObjectValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FSoftAssetDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetSoftObjectValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetSoftObjectValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueHandleHelper.BPF_GetTextValueFromRowHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FTextDataBinding&          _prop                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDataTableValueHandleHelper::BPF_GetTextValueFromRowHandle(const struct FDataTableRowHandle& _handle, const struct FTextDataBinding& _prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataTableValueHandleHelper", "BPF_GetTextValueFromRowHandle");

	Params::DataTableValueHandleHelper_BPF_GetTextValueFromRowHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._prop = std::move(_prop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAchievementSubsystem.BPF_AddProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_AddProgress(const class FString& AchievementID, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_AddProgress");

	Params::SCAchievementSubsystem_BPF_AddProgress Parms{};

	Parms.AchievementID = std::move(AchievementID);
	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_AddProgressByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              AchievementTag                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_AddProgressByTag(const struct FGameplayTag& AchievementTag, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_AddProgressByTag");

	Params::SCAchievementSubsystem_BPF_AddProgressByTag Parms{};

	Parms.AchievementTag = std::move(AchievementTag);
	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_AddStatProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             StatValueToAdd                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_AddStatProgress(const class APlayerState* PlayerState, const class FString& StatName, const int32 StatValueToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_AddStatProgress");

	Params::SCAchievementSubsystem_BPF_AddStatProgress Parms{};

	Parms.PlayerState = PlayerState;
	Parms.StatName = std::move(StatName);
	Parms.StatValueToAdd = StatValueToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_AddStatProgressByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, int32>& AchievementMap                                         (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              StatTag                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             StatValueToAdd                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_AddStatProgressByTag(const class APlayerState* PlayerState, const TMap<struct FGameplayTag, int32>& AchievementMap, const struct FGameplayTag& StatTag, const int32 StatValueToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_AddStatProgressByTag");

	Params::SCAchievementSubsystem_BPF_AddStatProgressByTag Parms{};

	Parms.PlayerState = PlayerState;
	Parms.AchievementMap = std::move(AchievementMap);
	Parms.StatTag = std::move(StatTag);
	Parms.StatValueToAdd = StatValueToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_GetProgressByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _achievementTag                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAchievementSubsystem::BPF_GetProgressByTag(const struct FGameplayTag& _achievementTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_GetProgressByTag");

	Params::SCAchievementSubsystem_BPF_GetProgressByTag Parms{};

	Parms._achievementTag = std::move(_achievementTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAchievementSubsystem.BPF_ResetAllSteamAchievements
// (Final, Native, Public, BlueprintCallable)

void USCAchievementSubsystem::BPF_ResetAllSteamAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_ResetAllSteamAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_SetProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPercent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_SetProgress(const class FString& AchievementID, float Progress, bool bIsPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_SetProgress");

	Params::SCAchievementSubsystem_BPF_SetProgress Parms{};

	Parms.AchievementID = std::move(AchievementID);
	Parms.Progress = Progress;
	Parms.bIsPercent = bIsPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_SetProgressByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              AchievementTag                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPercent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_SetProgressByTag(const struct FGameplayTag& AchievementTag, float Progress, bool bIsPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_SetProgressByTag");

	Params::SCAchievementSubsystem_BPF_SetProgressByTag Parms{};

	Parms.AchievementTag = std::move(AchievementTag);
	Parms.Progress = Progress;
	Parms.bIsPercent = bIsPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_SetStatProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NewStatValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_SetStatProgress(const class APlayerState* PlayerState, const class FString& StatName, const int32 NewStatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_SetStatProgress");

	Params::SCAchievementSubsystem_BPF_SetStatProgress Parms{};

	Parms.PlayerState = PlayerState;
	Parms.StatName = std::move(StatName);
	Parms.NewStatValue = NewStatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_SetStatProgressByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, int32>& AchievementMap                                         (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              StatTag                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NewStatValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_SetStatProgressByTag(const class APlayerState* PlayerState, const TMap<struct FGameplayTag, int32>& AchievementMap, const struct FGameplayTag& StatTag, const int32 NewStatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_SetStatProgressByTag");

	Params::SCAchievementSubsystem_BPF_SetStatProgressByTag Parms{};

	Parms.PlayerState = PlayerState;
	Parms.AchievementMap = std::move(AchievementMap);
	Parms.StatTag = std::move(StatTag);
	Parms.NewStatValue = NewStatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_UnlockAchievement
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnlockPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_UnlockAchievement(const class FString& AchievementID, float UnlockPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_UnlockAchievement");

	Params::SCAchievementSubsystem_BPF_UnlockAchievement Parms{};

	Parms.AchievementID = std::move(AchievementID);
	Parms.UnlockPercentage = UnlockPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.BPF_UnlockAchievementByTag
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              AchievementTag                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnlockPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAchievementSubsystem::BPF_UnlockAchievementByTag(const struct FGameplayTag& AchievementTag, float UnlockPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "BPF_UnlockAchievementByTag");

	Params::SCAchievementSubsystem_BPF_UnlockAchievementByTag Parms{};

	Parms.AchievementTag = std::move(AchievementTag);
	Parms.UnlockPercentage = UnlockPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.DelayedTryToWriteUnwrittenAchievements
// (Final, Native, Public)

void USCAchievementSubsystem::DelayedTryToWriteUnwrittenAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "DelayedTryToWriteUnwrittenAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAchievementSubsystem.TryToWriteUnwrittenAchievements
// (Final, Native, Public)

void USCAchievementSubsystem::TryToWriteUnwrittenAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAchievementSubsystem", "TryToWriteUnwrittenAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAIMovementComponent.BPF_StartMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAIMovementComponent::BPF_StartMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAIMovementComponent", "BPF_StartMovement");

	Params::SCAIMovementComponent_BPF_StartMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAIMovementComponent.BPF_StopMovement
// (Final, Native, Public, BlueprintCallable)

void USCAIMovementComponent::BPF_StopMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAIMovementComponent", "BPF_StopMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAIMovementComponent.BPF_HasStartedMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAIMovementComponent::BPF_HasStartedMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAIMovementComponent", "BPF_HasStartedMovement");

	Params::SCAIMovementComponent_BPF_HasStartedMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DelegateHolder.SytemCompleted
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*         Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelegateHolder::SytemCompleted(class UParticleSystemComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelegateHolder", "SytemCompleted");

	Params::DelegateHolder_SytemCompleted Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimationHelper.BPF_AnimSpaceTransformToUESpaceTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transform                                             (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCAnimationHelper::BPF_AnimSpaceTransformToUESpaceTransform(const struct FTransform& _transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_AnimSpaceTransformToUESpaceTransform");

	Params::SCAnimationHelper_BPF_AnimSpaceTransformToUESpaceTransform Parms{};

	Parms._transform = std::move(_transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ComputePlayerRedirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UBasicMontagePlayerConfiguration*_playerRedirectionConfig                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGameplayAbility*           _owningAbility                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_inOutContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USCAnimationHelper::BPF_ComputePlayerRedirection(const class UBasicMontagePlayerConfiguration* _playerRedirectionConfig, const class AActor* _actor, const class UGameplayAbility* _owningAbility, const struct FGameplayAbilityTargetDataHandle& _inOutContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ComputePlayerRedirection");

	Params::SCAnimationHelper_BPF_ComputePlayerRedirection Parms{};

	Parms._playerRedirectionConfig = _playerRedirectionConfig;
	Parms._actor = _actor;
	Parms._owningAbility = _owningAbility;
	Parms._inOutContext = std::move(_inOutContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ConvertMontageFrameToTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UAnimMontage*               _animMontage                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             _iValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimationHelper::BPF_ConvertMontageFrameToTime(const class UAnimMontage* _animMontage, const int32 _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ConvertMontageFrameToTime");

	Params::SCAnimationHelper_BPF_ConvertMontageFrameToTime Parms{};

	Parms._animMontage = _animMontage;
	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ConvertMontageTimeToFrame
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UAnimMontage*               _animMontage                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCAnimationHelper::BPF_ConvertMontageTimeToFrame(const class UAnimMontage* _animMontage, const float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ConvertMontageTimeToFrame");

	Params::SCAnimationHelper_BPF_ConvertMontageTimeToFrame Parms{};

	Parms._animMontage = _animMontage;
	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ExtractMainSequenceFromMontage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence**                   _outSequence                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            _outSlotName                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimationHelper::BPF_ExtractMainSequenceFromMontage(class UAnimMontage* _montage, class UAnimSequence** _outSequence, class FName* _outSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ExtractMainSequenceFromMontage");

	Params::SCAnimationHelper_BPF_ExtractMainSequenceFromMontage Parms{};

	Parms._montage = _montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSequence != nullptr)
		*_outSequence = Parms._outSequence;

	if (_outSlotName != nullptr)
		*_outSlotName = Parms._outSlotName;
}


// Function SCCore.SCAnimationHelper.BPF_ExtractRootMotion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCAnimationHelper::BPF_ExtractRootMotion(class UAnimMontage* _montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ExtractRootMotion");

	Params::SCAnimationHelper_BPF_ExtractRootMotion Parms{};

	Parms._montage = _montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ExtractRootMotionFromRange
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     _montage                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fStartTrackPosition                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fEndTrackPosition                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCAnimationHelper::BPF_ExtractRootMotionFromRange(class UAnimMontage* _montage, float _fStartTrackPosition, float _fEndTrackPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ExtractRootMotionFromRange");

	Params::SCAnimationHelper_BPF_ExtractRootMotionFromRange Parms{};

	Parms._montage = _montage;
	Parms._fStartTrackPosition = _fStartTrackPosition;
	Parms._fEndTrackPosition = _fEndTrackPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ExtractRootTrackTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequence*                    _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAnimRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCAnimationHelper::BPF_ExtractRootTrackTransform(class UAnimSequence* _sequence, float _fAnimRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ExtractRootTrackTransform");

	Params::SCAnimationHelper_BPF_ExtractRootTrackTransform Parms{};

	Parms._sequence = _sequence;
	Parms._fAnimRatio = _fAnimRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_FindBestAnimSequenceStartFromFeetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             _syncGroupName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    _animInstance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimationHelper::BPF_FindBestAnimSequenceStartFromFeetLocation(class FName _syncGroupName, class UAnimSequenceBase* _sequence, class UAnimInstance* _animInstance, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_FindBestAnimSequenceStartFromFeetLocation");

	Params::SCAnimationHelper_BPF_FindBestAnimSequenceStartFromFeetLocation Parms{};

	Parms._syncGroupName = _syncGroupName;
	Parms._sequence = _sequence;
	Parms._animInstance = _animInstance;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_FindMetaDataByClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                _animSequence                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimMetaData>        _metaDataClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMetaData*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMetaData* USCAnimationHelper::BPF_FindMetaDataByClass(class UAnimSequenceBase* _animSequence, TSubclassOf<class UAnimMetaData> _metaDataClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_FindMetaDataByClass");

	Params::SCAnimationHelper_BPF_FindMetaDataByClass Parms{};

	Parms._animSequence = _animSequence;
	Parms._metaDataClass = _metaDataClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_GetBoneTransformInComponentSpace
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequence*                    _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _boneName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAnimRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UMirrorDataTable*           _mirrorDB                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCAnimationHelper::BPF_GetBoneTransformInComponentSpace(class UAnimSequence* _sequence, class FName _boneName, float _fAnimRatio, bool _bMirror, const class UMirrorDataTable* _mirrorDB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_GetBoneTransformInComponentSpace");

	Params::SCAnimationHelper_BPF_GetBoneTransformInComponentSpace Parms{};

	Parms._sequence = _sequence;
	Parms._boneName = _boneName;
	Parms._fAnimRatio = _fAnimRatio;
	Parms._bMirror = _bMirror;
	Parms._mirrorDB = _mirrorDB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_IsValidSlotNameInMontage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UAnimMontage*               _animMontage                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _slotName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAnimationHelper::BPF_IsValidSlotNameInMontage(const class UAnimMontage* _animMontage, class FName _slotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_IsValidSlotNameInMontage");

	Params::SCAnimationHelper_BPF_IsValidSlotNameInMontage Parms{};

	Parms._animMontage = _animMontage;
	Parms._slotName = _slotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_ShouldMirrorAnimationBasedOnSyncGroup
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UAnimInstance*              _animInstance                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       _syncGroupName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAnimSequence*              _animSeq                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAnimTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UMirrorDataTable*           _mirrorTable                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAnimationHelper::BPF_ShouldMirrorAnimationBasedOnSyncGroup(const class UAnimInstance* _animInstance, const class FName _syncGroupName, const class UAnimSequence* _animSeq, float _fAnimTime, const class UMirrorDataTable* _mirrorTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_ShouldMirrorAnimationBasedOnSyncGroup");

	Params::SCAnimationHelper_BPF_ShouldMirrorAnimationBasedOnSyncGroup Parms{};

	Parms._animInstance = _animInstance;
	Parms._syncGroupName = _syncGroupName;
	Parms._animSeq = _animSeq;
	Parms._fAnimTime = _fAnimTime;
	Parms._mirrorTable = _mirrorTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.BPF_StopAllMontagesFromAnimNodeSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        _context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        _node                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   _fBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimationHelper::BPF_StopAllMontagesFromAnimNodeSlot(const struct FAnimUpdateContext& _context, const struct FAnimNodeReference& _node, float _fBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "BPF_StopAllMontagesFromAnimNodeSlot");

	Params::SCAnimationHelper_BPF_StopAllMontagesFromAnimNodeSlot Parms{};

	Parms._context = std::move(_context);
	Parms._node = std::move(_node);
	Parms._fBlendOutTime = _fBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCAnimationHelper.FindNotifiesStateByClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimNotifyState>     _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncludeChildren                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimNotifyEvent>*        _outFoundNotifies                                      (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USCAnimationHelper::FindNotifiesStateByClass(class UAnimSequenceBase* _sequence, TSubclassOf<class UAnimNotifyState> _class, bool _bIncludeChildren, TArray<struct FAnimNotifyEvent>* _outFoundNotifies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "FindNotifiesStateByClass");

	Params::SCAnimationHelper_FindNotifiesStateByClass Parms{};

	Parms._sequence = _sequence;
	Parms._class = _class;
	Parms._bIncludeChildren = _bIncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outFoundNotifies != nullptr)
		*_outFoundNotifies = std::move(Parms._outFoundNotifies);
}


// Function SCCore.SCAnimationHelper.FindNotifyByClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimNotify>          _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncludeChildren                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimNotifyEvent*                _outFoundNotify                                        (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool*                                   _bOutFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimationHelper::FindNotifyByClass(class UAnimSequenceBase* _sequence, TSubclassOf<class UAnimNotify> _class, bool _bIncludeChildren, struct FAnimNotifyEvent* _outFoundNotify, bool* _bOutFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "FindNotifyByClass");

	Params::SCAnimationHelper_FindNotifyByClass Parms{};

	Parms._sequence = _sequence;
	Parms._class = _class;
	Parms._bIncludeChildren = _bIncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outFoundNotify != nullptr)
		*_outFoundNotify = std::move(Parms._outFoundNotify);

	if (_bOutFound != nullptr)
		*_bOutFound = Parms._bOutFound;
}


// Function SCCore.SCAnimationHelper.FindNotifyStateByClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimNotifyState>     _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncludeChildren                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimNotifyEvent*                _outFoundNotify                                        (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool*                                   _bOutFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimationHelper::FindNotifyStateByClass(class UAnimSequenceBase* _sequence, TSubclassOf<class UAnimNotifyState> _class, bool _bIncludeChildren, struct FAnimNotifyEvent* _outFoundNotify, bool* _bOutFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "FindNotifyStateByClass");

	Params::SCAnimationHelper_FindNotifyStateByClass Parms{};

	Parms._sequence = _sequence;
	Parms._class = _class;
	Parms._bIncludeChildren = _bIncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outFoundNotify != nullptr)
		*_outFoundNotify = std::move(Parms._outFoundNotify);

	if (_bOutFound != nullptr)
		*_bOutFound = Parms._bOutFound;
}


// Function SCCore.SCAnimationHelper.GetNotifyDuration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNotifyEvent&          _notify                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimationHelper::GetNotifyDuration(const struct FAnimNotifyEvent& _notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "GetNotifyDuration");

	Params::SCAnimationHelper_GetNotifyDuration Parms{};

	Parms._notify = std::move(_notify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.GetNotifyEndTriggerTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNotifyEvent&          _notify                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimationHelper::GetNotifyEndTriggerTime(const struct FAnimNotifyEvent& _notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "GetNotifyEndTriggerTime");

	Params::SCAnimationHelper_GetNotifyEndTriggerTime Parms{};

	Parms._notify = std::move(_notify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.GetNotifyTriggerTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNotifyEvent&          _notify                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCAnimationHelper::GetNotifyTriggerTime(const struct FAnimNotifyEvent& _notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "GetNotifyTriggerTime");

	Params::SCAnimationHelper_GetNotifyTriggerTime Parms{};

	Parms._notify = std::move(_notify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimationHelper.GetValidUniqueMarkerNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*                  _animationAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutHasValidMarkers                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>*                    _outMarkerNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USCAnimationHelper::GetValidUniqueMarkerNames(class UAnimationAsset* _animationAsset, bool* _bOutHasValidMarkers, TArray<class FName>* _outMarkerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "GetValidUniqueMarkerNames");

	Params::SCAnimationHelper_GetValidUniqueMarkerNames Parms{};

	Parms._animationAsset = _animationAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutHasValidMarkers != nullptr)
		*_bOutHasValidMarkers = Parms._bOutHasValidMarkers;

	if (_outMarkerNames != nullptr)
		*_outMarkerNames = std::move(Parms._outMarkerNames);
}


// Function SCCore.SCAnimationHelper.HasInvalidNotifies
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _inNotifyName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCAnimationHelper::HasInvalidNotifies(class UAnimSequenceBase* _sequence, const class FString& _inNotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimationHelper", "HasInvalidNotifies");

	Params::SCAnimationHelper_HasInvalidNotifies Parms{};

	Parms._sequence = _sequence;
	Parms._inNotifyName = std::move(_inNotifyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolableActorSpawner.BPE_OnGeneratePoolActors
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASCPoolableActorsContainer*       _container                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISCPoolableActorSpawner::BPE_OnGeneratePoolActors(class ASCPoolableActorsContainer* _container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActorSpawner", "BPE_OnGeneratePoolActors");

	Params::SCPoolableActorSpawner_BPE_OnGeneratePoolActors Parms{};

	Parms._container = _container;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSharedAnimationMetadata.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* USCSharedAnimationMetadata::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSharedAnimationMetadata", "GetCustomDataTableStruct");

	Params::SCSharedAnimationMetadata_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_RequestLockAbilities
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _abilitiesToLock                                       (Parm, NativeAccessSpecifierPublic)

void USCProgressionSubsystem::BPF_RequestLockAbilities(const struct FGameplayTagContainer& _abilitiesToLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_RequestLockAbilities");

	Params::SCProgressionSubsystem_BPF_RequestLockAbilities Parms{};

	Parms._abilitiesToLock = std::move(_abilitiesToLock);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCProgressionSubsystem.BPF_RequestUnlockAbilities
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _abilitiesToUnlock                                     (Parm, NativeAccessSpecifierPublic)

void USCProgressionSubsystem::BPF_RequestUnlockAbilities(const struct FGameplayTagContainer& _abilitiesToUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_RequestUnlockAbilities");

	Params::SCProgressionSubsystem_BPF_RequestUnlockAbilities Parms{};

	Parms._abilitiesToUnlock = std::move(_abilitiesToUnlock);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCProgressionSubsystem.BPF_SetIsAbilityProgressionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bIsAbilityProgressionEnabled                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCProgressionSubsystem::BPF_SetIsAbilityProgressionEnabled(bool _bIsAbilityProgressionEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_SetIsAbilityProgressionEnabled");

	Params::SCProgressionSubsystem_BPF_SetIsAbilityProgressionEnabled Parms{};

	Parms._bIsAbilityProgressionEnabled = _bIsAbilityProgressionEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCProgressionSubsystem.BPF_SetUseSavedAbilityProgressionAtInit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bUseSavedAbilityProgressionAtInit                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCProgressionSubsystem::BPF_SetUseSavedAbilityProgressionAtInit(bool _bUseSavedAbilityProgressionAtInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_SetUseSavedAbilityProgressionAtInit");

	Params::SCProgressionSubsystem_BPF_SetUseSavedAbilityProgressionAtInit Parms{};

	Parms._bUseSavedAbilityProgressionAtInit = _bUseSavedAbilityProgressionAtInit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCProgressionSubsystem.OnPawnSet
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _newPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _oldPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCProgressionSubsystem::OnPawnSet(class APlayerState* _player, class APawn* _newPawn, class APawn* _oldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "OnPawnSet");

	Params::SCProgressionSubsystem_OnPawnSet Parms{};

	Parms._player = _player;
	Parms._newPawn = _newPawn;
	Parms._oldPawn = _oldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCProgressionSubsystem.BPF_GetAbilitiesLockedByProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCProgressionSubsystem::BPF_GetAbilitiesLockedByProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_GetAbilitiesLockedByProgression");

	Params::SCProgressionSubsystem_BPF_GetAbilitiesLockedByProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_GetAbilitiesUnlockable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCProgressionSubsystem::BPF_GetAbilitiesUnlockable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_GetAbilitiesUnlockable");

	Params::SCProgressionSubsystem_BPF_GetAbilitiesUnlockable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_GetDefaultAbilitiesToLock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCProgressionSubsystem::BPF_GetDefaultAbilitiesToLock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_GetDefaultAbilitiesToLock");

	Params::SCProgressionSubsystem_BPF_GetDefaultAbilitiesToLock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_GetDefaultIsAbilityProgressionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_GetDefaultIsAbilityProgressionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_GetDefaultIsAbilityProgressionEnabled");

	Params::SCProgressionSubsystem_BPF_GetDefaultIsAbilityProgressionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_GetUseSavedAbilityProgressionAtInit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_GetUseSavedAbilityProgressionAtInit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_GetUseSavedAbilityProgressionAtInit");

	Params::SCProgressionSubsystem_BPF_GetUseSavedAbilityProgressionAtInit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_IsAbilityProgressionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_IsAbilityProgressionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_IsAbilityProgressionEnabled");

	Params::SCProgressionSubsystem_BPF_IsAbilityProgressionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_IsInitialized");

	Params::SCProgressionSubsystem_BPF_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_IsReady
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_IsReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_IsReady");

	Params::SCProgressionSubsystem_BPF_IsReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCProgressionSubsystem.BPF_IsSubsystemLoadingOrCopyingForSave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCProgressionSubsystem::BPF_IsSubsystemLoadingOrCopyingForSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCProgressionSubsystem", "BPF_IsSubsystemLoadingOrCopyingForSave");

	Params::SCProgressionSubsystem_BPF_IsSubsystemLoadingOrCopyingForSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimNotify_PlayNiagaraEffect.BPE_GetNiagaraSystem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           _meshComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                _animation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEventReference& _eventReference                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraSystem* USCAnimNotify_PlayNiagaraEffect::BPE_GetNiagaraSystem(class USkeletalMeshComponent* _meshComp, class UAnimSequenceBase* _animation, const struct FAnimNotifyEventReference& _eventReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimNotify_PlayNiagaraEffect", "BPE_GetNiagaraSystem");

	Params::SCAnimNotify_PlayNiagaraEffect_BPE_GetNiagaraSystem Parms{};

	Parms._meshComp = _meshComp;
	Parms._animation = _animation;
	Parms._eventReference = std::move(_eventReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimNotify_PlayNiagaraEffect.OverrideSpawnEffect
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*           _meshComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                _animation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEventReference& _eventReference                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFXSystemComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFXSystemComponent* USCAnimNotify_PlayNiagaraEffect::OverrideSpawnEffect(class USkeletalMeshComponent* _meshComp, class UAnimSequenceBase* _animation, const struct FAnimNotifyEventReference& _eventReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimNotify_PlayNiagaraEffect", "OverrideSpawnEffect");

	Params::SCAnimNotify_PlayNiagaraEffect_OverrideSpawnEffect Parms{};

	Parms._meshComp = _meshComp;
	Parms._animation = _animation;
	Parms._eventReference = std::move(_eventReference);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimNotify_PlayNiagaraEffect.SpawnEffect
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           _meshComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                _animation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimNotifyEventReference& _eventReference                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFXSystemComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFXSystemComponent* USCAnimNotify_PlayNiagaraEffect::SpawnEffect(class USkeletalMeshComponent* _meshComp, class UAnimSequenceBase* _animation, const struct FAnimNotifyEventReference& _eventReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCAnimNotify_PlayNiagaraEffect", "SpawnEffect");

	Params::SCAnimNotify_PlayNiagaraEffect_SpawnEffect Parms{};

	Parms._meshComp = _meshComp;
	Parms._animation = _animation;
	Parms._eventReference = std::move(_eventReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.RotationWayHelper.BPF_Mirror
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCRotationWay                          _eRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCRotationWay URotationWayHelper::BPF_Mirror(ESCRotationWay _eRotation, bool _bMirror)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RotationWayHelper", "BPF_Mirror");

	Params::RotationWayHelper_BPF_Mirror Parms{};

	Parms._eRotation = _eRotation;
	Parms._bMirror = _bMirror;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_ExportRecordedInputs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _overrideFolder                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bRemoveLastInput                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_ExportRecordedInputs(const class FString& _fileName, const class FString& _overrideFolder, bool _bRemoveLastInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_ExportRecordedInputs");

	Params::SCBasePlayerController_BPF_ExportRecordedInputs Parms{};

	Parms._fileName = std::move(_fileName);
	Parms._overrideFolder = std::move(_overrideFolder);
	Parms._bRemoveLastInput = _bRemoveLastInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_ResetInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_ResetInputAction(class USCInputAction* _inputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_ResetInputAction");

	Params::SCBasePlayerController_BPF_ResetInputAction Parms{};

	Parms._inputAction = _inputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_ResetInputActionData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inputAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_ResetInputActionData(class USCInputAction* _inputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_ResetInputActionData");

	Params::SCBasePlayerController_BPF_ResetInputActionData Parms{};

	Parms._inputAction = _inputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_ServerRequestVisualLoggerSnapshot
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_ServerRequestVisualLoggerSnapshot(const class FString& _fileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_ServerRequestVisualLoggerSnapshot");

	Params::SCBasePlayerController_BPF_ServerRequestVisualLoggerSnapshot Parms{};

	Parms._fileName = std::move(_fileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_SetIgnoreInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_SetIgnoreInput(bool _bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_SetIgnoreInput");

	Params::SCBasePlayerController_BPF_SetIgnoreInput Parms{};

	Parms._bIgnore = _bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_SimulateInputData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _filePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::BPF_SimulateInputData(const class FString& _filePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_SimulateInputData");

	Params::SCBasePlayerController_BPF_SimulateInputData Parms{};

	Parms._filePath = std::move(_filePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_StartRecordingInputs
// (Final, Native, Public, BlueprintCallable)

void ASCBasePlayerController::BPF_StartRecordingInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_StartRecordingInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_StopInputSimulation
// (Final, Native, Public, BlueprintCallable)

void ASCBasePlayerController::BPF_StopInputSimulation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_StopInputSimulation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_StopRecordingInputs
// (Final, Native, Public, BlueprintCallable)

void ASCBasePlayerController::BPF_StopRecordingInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_StopRecordingInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ClientFirstRequestTimeSync
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// uint8                                   _uiClientRequestID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   _serverTimeTicks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ClientFirstRequestTimeSync(uint8 _uiClientRequestID, int64 _serverTimeTicks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ClientFirstRequestTimeSync");

	Params::SCBasePlayerController_ClientFirstRequestTimeSync Parms{};

	Parms._uiClientRequestID = _uiClientRequestID;
	Parms._serverTimeTicks = _serverTimeTicks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ClientGameFlowGotoState
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FName                             _stateID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCBasePlayerController*          _pc                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ClientGameFlowGotoState(class FName _stateID, class ASCBasePlayerController* _pc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ClientGameFlowGotoState");

	Params::SCBasePlayerController_ClientGameFlowGotoState Parms{};

	Parms._stateID = _stateID;
	Parms._pc = _pc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ClientRequestGameStartTime
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASCBasePlayerController::ClientRequestGameStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ClientRequestGameStartTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ClientRequestTimeSync
// (Net, Native, Event, Public, NetClient)
// Parameters:
// uint8                                   _uiClientRequestID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   _serverTimeTicks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ClientRequestTimeSync(uint8 _uiClientRequestID, int64 _serverTimeTicks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ClientRequestTimeSync");

	Params::SCBasePlayerController_ClientRequestTimeSync Parms{};

	Parms._uiClientRequestID = _uiClientRequestID;
	Parms._serverTimeTicks = _serverTimeTicks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ClientSetGameStartTime
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int64                                   _iGameStartTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ClientSetGameStartTime(int64 _iGameStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ClientSetGameStartTime");

	Params::SCBasePlayerController_ClientSetGameStartTime Parms{};

	Parms._iGameStartTime = _iGameStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.MulticastRequestVisualLoggerSnapshot
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::MulticastRequestVisualLoggerSnapshot(const class FString& _fileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "MulticastRequestVisualLoggerSnapshot");

	Params::SCBasePlayerController_MulticastRequestVisualLoggerSnapshot Parms{};

	Parms._fileName = std::move(_fileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerFirstRequestTimeSync
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// uint8                                   _uiClientRequestID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerFirstRequestTimeSync(uint8 _uiClientRequestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerFirstRequestTimeSync");

	Params::SCBasePlayerController_ServerFirstRequestTimeSync Parms{};

	Parms._uiClientRequestID = _uiClientRequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerForceRestartPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASCBasePlayerController::ServerForceRestartPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerForceRestartPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerGameFlowGotoState
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             _stateID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCBasePlayerController*          _pc                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerGameFlowGotoState(class FName _stateID, class ASCBasePlayerController* _pc, uint8 _uiIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerGameFlowGotoState");

	Params::SCBasePlayerController_ServerGameFlowGotoState Parms{};

	Parms._stateID = _stateID;
	Parms._pc = _pc;
	Parms._uiIndex = _uiIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerRequestGameStartTime
// (Net, NetReliable, Native, Event, Public, NetServer)

void ASCBasePlayerController::ServerRequestGameStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerRequestGameStartTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerRequestOverrideRelevantGameActorsNetParams
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const float                             _fNetUpdateFrequency                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fMinNetUpdateFrequency                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fNetPriority                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerRequestOverrideRelevantGameActorsNetParams(const float _fNetUpdateFrequency, const float _fMinNetUpdateFrequency, const float _fNetPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerRequestOverrideRelevantGameActorsNetParams");

	Params::SCBasePlayerController_ServerRequestOverrideRelevantGameActorsNetParams Parms{};

	Parms._fNetUpdateFrequency = _fNetUpdateFrequency;
	Parms._fMinNetUpdateFrequency = _fMinNetUpdateFrequency;
	Parms._fNetPriority = _fNetPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerRequestTimeSync
// (Net, Native, Event, Public, NetServer)
// Parameters:
// uint8                                   _uiClientRequestID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerRequestTimeSync(uint8 _uiClientRequestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerRequestTimeSync");

	Params::SCBasePlayerController_ServerRequestTimeSync Parms{};

	Parms._uiClientRequestID = _uiClientRequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerSetClientFrameTimeMs
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// float                                   _fFrameTimeMs                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerSetClientFrameTimeMs(float _fFrameTimeMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerSetClientFrameTimeMs");

	Params::SCBasePlayerController_ServerSetClientFrameTimeMs Parms{};

	Parms._fFrameTimeMs = _fFrameTimeMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerSetNetProfile
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const class FString&                    _profile                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerSetNetProfile(const class FString& _profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerSetNetProfile");

	Params::SCBasePlayerController_ServerSetNetProfile Parms{};

	Parms._profile = std::move(_profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerSkipPlayerSynchro
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             _stateID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerSkipPlayerSynchro(class FName _stateID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerSkipPlayerSynchro");

	Params::SCBasePlayerController_ServerSkipPlayerSynchro Parms{};

	Parms._stateID = _stateID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.SimulateInputs
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    _filePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::SimulateInputs(const class FString& _filePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "SimulateInputs");

	Params::SCBasePlayerController_SimulateInputs Parms{};

	Parms._filePath = std::move(_filePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.BPF_GetControllerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ASCBasePlayerController::BPF_GetControllerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_GetControllerType");

	Params::SCBasePlayerController_BPF_GetControllerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_GetMenuComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCMenuComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuComponent* ASCBasePlayerController::BPF_GetMenuComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_GetMenuComponent");

	Params::SCBasePlayerController_BPF_GetMenuComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_GetSCCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASCCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASCCharacter* ASCBasePlayerController::BPF_GetSCCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_GetSCCharacter");

	Params::SCBasePlayerController_BPF_GetSCCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_IsControllerTypeKeyBoard
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCBasePlayerController::BPF_IsControllerTypeKeyBoard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_IsControllerTypeKeyBoard");

	Params::SCBasePlayerController_BPF_IsControllerTypeKeyBoard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_IsRecordingInputs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCBasePlayerController::BPF_IsRecordingInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_IsRecordingInputs");

	Params::SCBasePlayerController_BPF_IsRecordingInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.BPF_IsSimulatingInputs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCBasePlayerController::BPF_IsSimulatingInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "BPF_IsSimulatingInputs");

	Params::SCBasePlayerController_BPF_IsSimulatingInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBasePlayerController.Server_RequestSendSynchroAcknowledge
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// const class FName                       _synchroType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCBasePlayerController::Server_RequestSendSynchroAcknowledge(const class FName _synchroType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "Server_RequestSendSynchroAcknowledge");

	Params::SCBasePlayerController_Server_RequestSendSynchroAcknowledge Parms{};

	Parms._synchroType = _synchroType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBasePlayerController.ServerSendSubsystemMessage
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// const struct FSCSubsystemRemoteMessage& _messageInfos                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASCBasePlayerController::ServerSendSubsystemMessage(const struct FSCSubsystemRemoteMessage& _messageInfos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBasePlayerController", "ServerSendSubsystemMessage");

	Params::SCBasePlayerController_ServerSendSubsystemMessage Parms{};

	Parms._messageInfos = std::move(_messageInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraTransitionInfo.BPE_OnProcessTransition
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USCCameraComponent*               _cameraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTimeElapsed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fOldBlendRatio                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fNewBlendRatio                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraTransitionInfo::BPE_OnProcessTransition(class USCCameraComponent* _cameraComponent, float _fTimeElapsed, float _fOldBlendRatio, float _fNewBlendRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransitionInfo", "BPE_OnProcessTransition");

	Params::SCCameraTransitionInfo_BPE_OnProcessTransition Parms{};

	Parms._cameraComponent = _cameraComponent;
	Parms._fTimeElapsed = _fTimeElapsed;
	Parms._fOldBlendRatio = _fOldBlendRatio;
	Parms._fNewBlendRatio = _fNewBlendRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraTransitionInfo.BPE_OnStartTransition
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USCCameraComponent*               _cameraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraTransitionInfo::BPE_OnStartTransition(class USCCameraComponent* _cameraComponent, float _fDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransitionInfo", "BPE_OnStartTransition");

	Params::SCCameraTransitionInfo_BPE_OnStartTransition Parms{};

	Parms._cameraComponent = _cameraComponent;
	Parms._fDuration = _fDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraTransitionInfo.BPE_OnStopTransition
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USCCameraComponent*               _cameraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTimeElapsed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraTransitionInfo::BPE_OnStopTransition(class USCCameraComponent* _cameraComponent, float _fTimeElapsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransitionInfo", "BPE_OnStopTransition");

	Params::SCCameraTransitionInfo_BPE_OnStopTransition Parms{};

	Parms._cameraComponent = _cameraComponent;
	Parms._fTimeElapsed = _fTimeElapsed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCCameraTransitionInfo.BPF_GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* USCCameraTransitionInfo::BPF_GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraTransitionInfo", "BPF_GetCameraComponent");

	Params::SCCameraTransitionInfo_BPF_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCLevelSequenceActor.BPE_OnFinished
// (Event, Protected, BlueprintEvent)

void ASCLevelSequenceActor::BPE_OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPE_OnFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequenceActor.BPE_OnPostSkip
// (Event, Protected, BlueprintEvent)

void ASCLevelSequenceActor::BPE_OnPostSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPE_OnPostSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequenceActor.BPE_OnPreSkip
// (Event, Protected, BlueprintEvent)

void ASCLevelSequenceActor::BPE_OnPreSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPE_OnPreSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequenceActor.BPE_OnStarting
// (Event, Protected, BlueprintEvent)

void ASCLevelSequenceActor::BPE_OnStarting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPE_OnStarting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequenceActor.BPE_OnStopped
// (Event, Protected, BlueprintEvent)

void ASCLevelSequenceActor::BPE_OnStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPE_OnStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequenceActor.BPF_TryToMakeFakePawnBinding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APawn*                      _pawn                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _tag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APawn>                _fakePawnClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCLevelSequenceActor::BPF_TryToMakeFakePawnBinding(const class APawn* _pawn, class FName _tag, TSubclassOf<class APawn> _fakePawnClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "BPF_TryToMakeFakePawnBinding");

	Params::SCLevelSequenceActor_BPF_TryToMakeFakePawnBinding Parms{};

	Parms._pawn = _pawn;
	Parms._tag = _tag;
	Parms._fakePawnClass = _fakePawnClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCLevelSequenceActor.OnFinished
// (Native, Protected)

void ASCLevelSequenceActor::OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "OnFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCLevelSequenceActor.OnPrePlay
// (Final, Native, Protected)

void ASCLevelSequenceActor::OnPrePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "OnPrePlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCLevelSequenceActor.OnStopped
// (Native, Protected)

void ASCLevelSequenceActor::OnStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "OnStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCLevelSequenceActor.SetLevelSequenceInstanceDataTransformReplicated
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                _transform                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCLevelSequenceActor::SetLevelSequenceInstanceDataTransformReplicated(const struct FTransform& _transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceActor", "SetLevelSequenceInstanceDataTransformReplicated");

	Params::SCLevelSequenceActor_SetLevelSequenceInstanceDataTransformReplicated Parms{};

	Parms._transform = std::move(_transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCBTTask_CameraNode.BPF_GetCameraData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCAbstractCameraData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCAbstractCameraData* USCBTTask_CameraNode::BPF_GetCameraData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBTTask_CameraNode", "BPF_GetCameraData");

	Params::SCBTTask_CameraNode_BPF_GetCameraData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCBTTask_CameraNode.BPF_GetCameraDataClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCAbstractCameraData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCAbstractCameraData> USCBTTask_CameraNode::BPF_GetCameraDataClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCBTTask_CameraNode", "BPF_GetCameraDataClass");

	Params::SCBTTask_CameraNode_BPF_GetCameraDataClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCLevelSequenceSubsystem.BPF_IsPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCLevelSequenceSubsystem::BPF_IsPaused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequenceSubsystem", "BPF_IsPaused");

	Params::SCLevelSequenceSubsystem_BPF_IsPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraCollisionDetectionService.BPF_GetDeadZoneMinDist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraCollisionDetectionService::BPF_GetDeadZoneMinDist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraCollisionDetectionService", "BPF_GetDeadZoneMinDist");

	Params::SCCameraCollisionDetectionService_BPF_GetDeadZoneMinDist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraCollisionDetectionService.BPF_GetDeadZoneMinDistByAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   _fAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraCollisionDetectionService::BPF_GetDeadZoneMinDistByAngle(float _fAngle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraCollisionDetectionService", "BPF_GetDeadZoneMinDistByAngle");

	Params::SCCameraCollisionDetectionService_BPF_GetDeadZoneMinDistByAngle Parms{};

	Parms._fAngle = _fAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraCollisionDetectionService.BPF_GetNearestDeadZoneDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCameraCollisionDetectionService::BPF_GetNearestDeadZoneDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraCollisionDetectionService", "BPF_GetNearestDeadZoneDirection");

	Params::SCCameraCollisionDetectionService_BPF_GetNearestDeadZoneDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraCollisionDetectionService.BPF_IsColliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraCollisionDetectionService::BPF_IsColliding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraCollisionDetectionService", "BPF_IsColliding");

	Params::SCCameraCollisionDetectionService_BPF_IsColliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraCollisionDetectionService.BPF_IsInDeadZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   _fAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraCollisionDetectionService::BPF_IsInDeadZone(float _fAngle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraCollisionDetectionService", "BPF_IsInDeadZone");

	Params::SCCameraCollisionDetectionService_BPF_IsInDeadZone Parms{};

	Parms._fAngle = _fAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraData.BPE_BlendNodes
// (Event, Public, BlueprintEvent)
// Parameters:
// const class USCCameraData*              _startNode                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCCameraData*              _endNode                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBlendRatio                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCCameraData*              _nodeToUseForBooleans                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraData::BPE_BlendNodes(const class USCCameraData* _startNode, const class USCCameraData* _endNode, float _fBlendRatio, const class USCCameraData* _nodeToUseForBooleans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraData", "BPE_BlendNodes");

	Params::SCCameraData_BPE_BlendNodes Parms{};

	Parms._startNode = _startNode;
	Parms._endNode = _endNode;
	Parms._fBlendRatio = _fBlendRatio;
	Parms._nodeToUseForBooleans = _nodeToUseForBooleans;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCExpandableWidgetLibrary.BPF_CollapseWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCExpandableWidgetLibrary::BPF_CollapseWidget(class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCExpandableWidgetLibrary", "BPF_CollapseWidget");

	Params::SCExpandableWidgetLibrary_BPF_CollapseWidget Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCExpandableWidgetLibrary.BPF_ExpandWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCExpandableWidgetLibrary::BPF_ExpandWidget(class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCExpandableWidgetLibrary", "BPF_ExpandWidget");

	Params::SCExpandableWidgetLibrary_BPF_ExpandWidget Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCExpandableWidgetLibrary.BPF_IsWidgetExpanded
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCExpandableWidgetLibrary::BPF_IsWidgetExpanded(class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCExpandableWidgetLibrary", "BPF_IsWidgetExpanded");

	Params::SCExpandableWidgetLibrary_BPF_IsWidgetExpanded Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCExpandableWidgetLibrary.BPF_ToggleWidgetExpansion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCExpandableWidgetLibrary::BPF_ToggleWidgetExpansion(class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCExpandableWidgetLibrary", "BPF_ToggleWidgetExpansion");

	Params::SCExpandableWidgetLibrary_BPF_ToggleWidgetExpansion Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLockFramingContainerService.BPF_SetFramingAlgorithmOverrideTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    _bOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vPosition3D                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBlendingIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _dynamicCurveForBlendingIn                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDurationBlendingOut                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _dynamicCurveForBlendingOut                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLockFramingContainerService::BPF_SetFramingAlgorithmOverrideTarget(bool _bOverride, const struct FVector& _vPosition3D, float _fDurationBlendingIn, class UCurveFloat* _dynamicCurveForBlendingIn, float _fDurationBlendingOut, class UCurveFloat* _dynamicCurveForBlendingOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLockFramingContainerService", "BPF_SetFramingAlgorithmOverrideTarget");

	Params::SCCameraLockFramingContainerService_BPF_SetFramingAlgorithmOverrideTarget Parms{};

	Parms._bOverride = _bOverride;
	Parms._vPosition3D = std::move(_vPosition3D);
	Parms._fDurationBlendingIn = _fDurationBlendingIn;
	Parms._dynamicCurveForBlendingIn = _dynamicCurveForBlendingIn;
	Parms._fDurationBlendingOut = _fDurationBlendingOut;
	Parms._dynamicCurveForBlendingOut = _dynamicCurveForBlendingOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_AddLookAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCCameraLookAtServiceBehavior&_inNewLookAt                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraLookAtService::BPF_AddLookAt(const struct FSCCameraLookAtServiceBehavior& _inNewLookAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_AddLookAt");

	Params::SCCameraLookAtService_BPF_AddLookAt Parms{};

	Parms._inNewLookAt = std::move(_inNewLookAt);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_ApplyBackInitialLookAtOrientation
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const float                             _fDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _defaultBlend                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLookAtService::BPF_ApplyBackInitialLookAtOrientation(const float _fDuration, ESCBlendType _defaultBlend, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_ApplyBackInitialLookAtOrientation");

	Params::SCCameraLookAtService_BPF_ApplyBackInitialLookAtOrientation Parms{};

	Parms._fDuration = _fDuration;
	Parms._defaultBlend = _defaultBlend;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_ClearLookAtCamOrientationVars
// (Final, Native, Private, BlueprintCallable)

void USCCameraLookAtService::BPF_ClearLookAtCamOrientationVars()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_ClearLookAtCamOrientationVars");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_GetCurrentDurationToReach
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraLookAtService::BPF_GetCurrentDurationToReach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_GetCurrentDurationToReach");

	Params::SCCameraLookAtService_BPF_GetCurrentDurationToReach Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_GetTopLookAtBehavior
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSCCameraLookAtServiceBehavior   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSCCameraLookAtServiceBehavior USCCameraLookAtService::BPF_GetTopLookAtBehavior()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_GetTopLookAtBehavior");

	Params::SCCameraLookAtService_BPF_GetTopLookAtBehavior Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_InitLookAtCamOrientation
// (Final, Native, Private, BlueprintCallable)

void USCCameraLookAtService::BPF_InitLookAtCamOrientation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_InitLookAtCamOrientation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_PauseLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _contextString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraLookAtService::BPF_PauseLookAt(float _fDuration, const class FString& _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_PauseLookAt");

	Params::SCCameraLookAtService_BPF_PauseLookAt Parms{};

	Parms._fDuration = _fDuration;
	Parms._contextString = std::move(_contextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_PauseLookAtWithHandle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _contextString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraLookAtService::BPF_PauseLookAtWithHandle(const class FString& _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_PauseLookAtWithHandle");

	Params::SCCameraLookAtService_BPF_PauseLookAtWithHandle Parms{};

	Parms._contextString = std::move(_contextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_RemoveAllLookAt
// (Final, Native, Public, BlueprintCallable)

void USCCameraLookAtService::BPF_RemoveAllLookAt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_RemoveAllLookAt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_RemoveLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLookAtService::BPF_RemoveLookAt(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_RemoveLookAt");

	Params::SCCameraLookAtService_BPF_RemoveLookAt Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_StartLookAtInputBlending
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             _fDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eDefaultBlend                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLookAtService::BPF_StartLookAtInputBlending(const float _fDuration, ESCBlendType _eDefaultBlend, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_StartLookAtInputBlending");

	Params::SCCameraLookAtService_BPF_StartLookAtInputBlending Parms{};

	Parms._fDuration = _fDuration;
	Parms._eDefaultBlend = _eDefaultBlend;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_TryUpdatePosToLookAt
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vNewPos                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             _iLookAtHandle                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraLookAtService::BPF_TryUpdatePosToLookAt(const struct FVector& _vNewPos, const int32 _iLookAtHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_TryUpdatePosToLookAt");

	Params::SCCameraLookAtService_BPF_TryUpdatePosToLookAt Parms{};

	Parms._vNewPos = std::move(_vNewPos);
	Parms._iLookAtHandle = _iLookAtHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_UnPauseLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCameraLookAtService::BPF_UnPauseLookAt(int32 _iHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_UnPauseLookAt");

	Params::SCCameraLookAtService_BPF_UnPauseLookAt Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCameraLookAtService.BPF_GetInitialLookAtCamOrientation
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USCCameraLookAtService::BPF_GetInitialLookAtCamOrientation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_GetInitialLookAtCamOrientation");

	Params::SCCameraLookAtService_BPF_GetInitialLookAtCamOrientation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_GetTopLookAtBehaviorHandle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCCameraLookAtService::BPF_GetTopLookAtBehaviorHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_GetTopLookAtBehaviorHandle");

	Params::SCCameraLookAtService_BPF_GetTopLookAtBehaviorHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_HasLookAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraLookAtService::BPF_HasLookAt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_HasLookAt");

	Params::SCCameraLookAtService_BPF_HasLookAt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_IsLookAtActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraLookAtService::BPF_IsLookAtActive(int32 _iHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_IsLookAtActive");

	Params::SCCameraLookAtService_BPF_IsLookAtActive Parms{};

	Parms._iHandle = _iHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraLookAtService.BPF_IsLookAtInitialCamOrientationSet
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCameraLookAtService::BPF_IsLookAtInitialCamOrientationSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraLookAtService", "BPF_IsLookAtInitialCamOrientationSet");

	Params::SCCameraLookAtService_BPF_IsLookAtInitialCamOrientationSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerDataSpring.BPE_GetSpeedFactor
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   _fTargetRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fOldRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraMixerDataSpring::BPE_GetSpeedFactor(float _fTargetRatio, float _fOldRatio) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerDataSpring", "BPE_GetSpeedFactor");

	Params::SCCameraMixerDataSpring_BPE_GetSpeedFactor Parms{};

	Parms._fTargetRatio = _fTargetRatio;
	Parms._fOldRatio = _fOldRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraMixerDataSpring.BPE_GetTargetRatio
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraMixerDataSpring::BPE_GetTargetRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraMixerDataSpring", "BPE_GetTargetRatio");

	Params::SCCameraMixerDataSpring_BPE_GetTargetRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCameraWeightComponent.BPE_GetWeight
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCameraWeightComponent::BPE_GetWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCameraWeightComponent", "BPE_GetWeight");

	Params::SCCameraWeightComponent_BPE_GetWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCaptureComponent2D.BPF_ProjectMultipleWorldLocationsToPixelCoordinates
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVector>&           _Locations                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>*               _OutPixelLocations                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>*               _OutUvLocations                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<bool>*                           _OutbAreLocationsInCanvas                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCaptureComponent2D::BPF_ProjectMultipleWorldLocationsToPixelCoordinates(const TArray<struct FVector>& _Locations, TArray<struct FVector2D>* _OutPixelLocations, TArray<struct FVector2D>* _OutUvLocations, TArray<bool>* _OutbAreLocationsInCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCaptureComponent2D", "BPF_ProjectMultipleWorldLocationsToPixelCoordinates");

	Params::SCCaptureComponent2D_BPF_ProjectMultipleWorldLocationsToPixelCoordinates Parms{};

	Parms._Locations = std::move(_Locations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_OutPixelLocations != nullptr)
		*_OutPixelLocations = std::move(Parms._OutPixelLocations);

	if (_OutUvLocations != nullptr)
		*_OutUvLocations = std::move(Parms._OutUvLocations);

	if (_OutbAreLocationsInCanvas != nullptr)
		*_OutbAreLocationsInCanvas = std::move(Parms._OutbAreLocationsInCanvas);

	return Parms.ReturnValue;
}


// Function SCCore.SCCaptureComponent2D.BPF_ProjectWorldLocationToPixelCoordinates
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutPixelLocation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutUvLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCaptureComponent2D::BPF_ProjectWorldLocationToPixelCoordinates(const struct FVector& _vLocation, struct FVector2D* _vOutPixelLocation, struct FVector2D* _vOutUvLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCaptureComponent2D", "BPF_ProjectWorldLocationToPixelCoordinates");

	Params::SCCaptureComponent2D_BPF_ProjectWorldLocationToPixelCoordinates Parms{};

	Parms._vLocation = std::move(_vLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutPixelLocation != nullptr)
		*_vOutPixelLocation = std::move(Parms._vOutPixelLocation);

	if (_vOutUvLocation != nullptr)
		*_vOutUvLocation = std::move(Parms._vOutUvLocation);

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacter.BPF_AddObjectToKeepAttachedOnImpostor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         _eAttachmentRules                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _boneName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::BPF_AddObjectToKeepAttachedOnImpostor(class AActor* _actor, EAttachmentRule _eAttachmentRules, class FName _boneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_AddObjectToKeepAttachedOnImpostor");

	Params::SCCharacter_BPF_AddObjectToKeepAttachedOnImpostor Parms{};

	Parms._actor = _actor;
	Parms._eAttachmentRules = _eAttachmentRules;
	Parms._boneName = _boneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.BPF_SetCollisionEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bKeepStaticMeshCollisions                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::BPF_SetCollisionEnabled(bool _bEnabled, bool _bKeepStaticMeshCollisions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_SetCollisionEnabled");

	Params::SCCharacter_BPF_SetCollisionEnabled Parms{};

	Parms._bEnabled = _bEnabled;
	Parms._bKeepStaticMeshCollisions = _bKeepStaticMeshCollisions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.BPF_SetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    _newMesh                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSwapOnlyRendering                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::BPF_SetMesh(class USkeletalMesh* _newMesh, bool _bSwapOnlyRendering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_SetMesh");

	Params::SCCharacter_BPF_SetMesh Parms{};

	Parms._newMesh = _newMesh;
	Parms._bSwapOnlyRendering = _bSwapOnlyRendering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.BPF_Unspawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    _animation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bMirror                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInstantUnspawn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::BPF_Unspawn(class UAnimSequence* _animation, bool _bMirror, bool _bInstantUnspawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_Unspawn");

	Params::SCCharacter_BPF_Unspawn Parms{};

	Parms._animation = _animation;
	Parms._bMirror = _bMirror;
	Parms._bInstantUnspawn = _bInstantUnspawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.ClientAckPredictedMove
// (Net, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// const float                             _fTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::ClientAckPredictedMove(const float _fTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "ClientAckPredictedMove");

	Params::SCCharacter_ClientAckPredictedMove Parms{};

	Parms._fTime = _fTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.CmdPopCamera
// (Final, Exec, Native, Private)

void ASCCharacter::CmdPopCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "CmdPopCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.CmdPushCamera
// (Final, Exec, Native, Private)
// Parameters:
// const class FString&                    _cameraName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::CmdPushCamera(const class FString& _cameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "CmdPushCamera");

	Params::SCCharacter_CmdPushCamera Parms{};

	Parms._cameraName = std::move(_cameraName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.CmdRedirectCamera
// (Final, Exec, Native, Private)
// Parameters:
// const class FString&                    _baseCameraName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _targetCameraName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::CmdRedirectCamera(const class FString& _baseCameraName, const class FString& _targetCameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "CmdRedirectCamera");

	Params::SCCharacter_CmdRedirectCamera Parms{};

	Parms._baseCameraName = std::move(_baseCameraName);
	Parms._targetCameraName = std::move(_targetCameraName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.CmdResetCameraRedirection
// (Final, Exec, Native, Private)
// Parameters:
// const class FString&                    _baseCameraName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::CmdResetCameraRedirection(const class FString& _baseCameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "CmdResetCameraRedirection");

	Params::SCCharacter_CmdResetCameraRedirection Parms{};

	Parms._baseCameraName = std::move(_baseCameraName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.OnRep_PooledActorActive
// (Native, Protected)

void ASCCharacter::OnRep_PooledActorActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "OnRep_PooledActorActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.OnRep_ReplicatedAcceleration
// (Final, Native, Private)

void ASCCharacter::OnRep_ReplicatedAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "OnRep_ReplicatedAcceleration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.ServerSetLookAtStackIndex
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint8                                   _uiStackIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCCharacter::ServerSetLookAtStackIndex(uint8 _uiStackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "ServerSetLookAtStackIndex");

	Params::SCCharacter_ServerSetLookAtStackIndex Parms{};

	Parms._uiStackIndex = _uiStackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCharacter.BPF_GetImpostorName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ASCCharacter::BPF_GetImpostorName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_GetImpostorName");

	Params::SCCharacter_BPF_GetImpostorName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacter.BPF_GetSCCamera
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCameraComponent* ASCCharacter::BPF_GetSCCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_GetSCCamera");

	Params::SCCharacter_BPF_GetSCCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacter.BPF_GetSCInputComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCInputComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCInputComponent* ASCCharacter::BPF_GetSCInputComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCCharacter", "BPF_GetSCInputComponent");

	Params::SCCharacter_BPF_GetSCInputComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterHelpers.BPF_GetFloorNormal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class ACharacter*                 _character                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCCharacterHelpers::BPF_GetFloorNormal(const class ACharacter* _character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCharacterHelpers", "BPF_GetFloorNormal");

	Params::SCCharacterHelpers_BPF_GetFloorNormal Parms{};

	Parms._character = _character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterHelpers.BPF_TryGetPelvisBoneTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class ACharacter*                 _character                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform*                      _outPevlisTransform                                    (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCharacterHelpers::BPF_TryGetPelvisBoneTransform(const class ACharacter* _character, struct FTransform* _outPevlisTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCharacterHelpers", "BPF_TryGetPelvisBoneTransform");

	Params::SCCharacterHelpers_BPF_TryGetPelvisBoneTransform Parms{};

	Parms._character = _character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outPevlisTransform != nullptr)
		*_outPevlisTransform = std::move(Parms._outPevlisTransform);

	return Parms.ReturnValue;
}


// Function SCCore.SCCharacterHelpers.BPF_TryGetRootBoneTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class ACharacter*                 _character                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform*                      _outBoneTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bComponentSpace                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCharacterHelpers::BPF_TryGetRootBoneTransform(const class ACharacter* _character, struct FTransform* _outBoneTransform, bool _bComponentSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCharacterHelpers", "BPF_TryGetRootBoneTransform");

	Params::SCCharacterHelpers_BPF_TryGetRootBoneTransform Parms{};

	Parms._character = _character;
	Parms._bComponentSpace = _bComponentSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outBoneTransform != nullptr)
		*_outBoneTransform = std::move(Parms._outBoneTransform);

	return Parms.ReturnValue;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_ActivateCheat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _cheatToActivate                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_ActivateCheat(const struct FGameplayTag& _cheatToActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_ActivateCheat");

	Params::CheatManagerBlueprintHelper_BPF_ActivateCheat Parms{};

	Parms._cheatToActivate = std::move(_cheatToActivate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_ActivateCheats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _cheatsToActivate                                      (Parm, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_ActivateCheats(const struct FGameplayTagContainer& _cheatsToActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_ActivateCheats");

	Params::CheatManagerBlueprintHelper_BPF_ActivateCheats Parms{};

	Parms._cheatsToActivate = std::move(_cheatsToActivate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_ApplyCheats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bForceApply                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_ApplyCheats(bool _bForceApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_ApplyCheats");

	Params::CheatManagerBlueprintHelper_BPF_ApplyCheats Parms{};

	Parms._bForceApply = _bForceApply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_AreCheatsAllowed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCheatManagerBlueprintHelper::BPF_AreCheatsAllowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_AreCheatsAllowed");

	Params::CheatManagerBlueprintHelper_BPF_AreCheatsAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_DeactivateCheat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _cheatToDeactivate                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_DeactivateCheat(const struct FGameplayTag& _cheatToDeactivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_DeactivateCheat");

	Params::CheatManagerBlueprintHelper_BPF_DeactivateCheat Parms{};

	Parms._cheatToDeactivate = std::move(_cheatToDeactivate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_DeactivateCheats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _cheatsToDeactivate                                    (Parm, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_DeactivateCheats(const struct FGameplayTagContainer& _cheatsToDeactivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_DeactivateCheats");

	Params::CheatManagerBlueprintHelper_BPF_DeactivateCheats Parms{};

	Parms._cheatsToDeactivate = std::move(_cheatsToDeactivate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_GetActivatedCheats
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UCheatManagerBlueprintHelper::BPF_GetActivatedCheats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_GetActivatedCheats");

	Params::CheatManagerBlueprintHelper_BPF_GetActivatedCheats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_HasAppliedCheats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCheatManagerBlueprintHelper::BPF_HasAppliedCheats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_HasAppliedCheats");

	Params::CheatManagerBlueprintHelper_BPF_HasAppliedCheats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_IsCheatActivated
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _cheatToFind                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCheatManagerBlueprintHelper::BPF_IsCheatActivated(const struct FGameplayTag& _cheatToFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_IsCheatActivated");

	Params::CheatManagerBlueprintHelper_BPF_IsCheatActivated Parms{};

	Parms._cheatToFind = std::move(_cheatToFind);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.CheatManagerBlueprintHelper.BPF_UnapplyCheats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bDeactivateCheats                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheatManagerBlueprintHelper::BPF_UnapplyCheats(bool _bDeactivateCheats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CheatManagerBlueprintHelper", "BPF_UnapplyCheats");

	Params::CheatManagerBlueprintHelper_BPF_UnapplyCheats Parms{};

	Parms._bDeactivateCheats = _bDeactivateCheats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCollisionLibrary.BPF_CalculateStaticMeshMass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      _staticMesh                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCCollisionLibrary::BPF_CalculateStaticMeshMass(class UStaticMesh* _staticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_CalculateStaticMeshMass");

	Params::SCCollisionLibrary_BPF_CalculateStaticMeshMass Parms{};

	Parms._staticMesh = _staticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_DefaultResponseContainer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECollisionResponse                      _eDefaultResponse                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCollisionResponseContainer      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCollisionResponseContainer USCCollisionLibrary::BPF_DefaultResponseContainer(ECollisionResponse _eDefaultResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_DefaultResponseContainer");

	Params::SCCollisionLibrary_BPF_DefaultResponseContainer Parms{};

	Parms._eDefaultResponse = _eDefaultResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_DefaultResponseContainer_OneException
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECollisionResponse                      _eDefaultResponse                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       _eExceptionChannel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionResponse                      _eExceptionResponse                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCollisionResponseContainer      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCollisionResponseContainer USCCollisionLibrary::BPF_DefaultResponseContainer_OneException(ECollisionResponse _eDefaultResponse, ECollisionChannel _eExceptionChannel, ECollisionResponse _eExceptionResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_DefaultResponseContainer_OneException");

	Params::SCCollisionLibrary_BPF_DefaultResponseContainer_OneException Parms{};

	Parms._eDefaultResponse = _eDefaultResponse;
	Parms._eExceptionChannel = _eExceptionChannel;
	Parms._eExceptionResponse = _eExceptionResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GenerateCollisionResponseContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCCollisionResponseBuilder&_builder                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FCollisionResponseContainer      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCollisionResponseContainer USCCollisionLibrary::BPF_GenerateCollisionResponseContainer(const struct FSCCollisionResponseBuilder& _builder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GenerateCollisionResponseContainer");

	Params::SCCollisionLibrary_BPF_GenerateCollisionResponseContainer Parms{};

	Parms._builder = std::move(_builder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GetAllCollisionProfileDescriptions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSCCollisionProfileDescription>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSCCollisionProfileDescription> USCCollisionLibrary::BPF_GetAllCollisionProfileDescriptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GetAllCollisionProfileDescriptions");

	Params::SCCollisionLibrary_BPF_GetAllCollisionProfileDescriptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GetCollisionProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             _collisionProfileName                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCCollisionResponseTemplate*    _outTemplatee                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCCollisionLibrary::BPF_GetCollisionProfile(class FName _collisionProfileName, struct FSCCollisionResponseTemplate* _outTemplatee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GetCollisionProfile");

	Params::SCCollisionLibrary_BPF_GetCollisionProfile Parms{};

	Parms._collisionProfileName = _collisionProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outTemplatee != nullptr)
		*_outTemplatee = std::move(Parms._outTemplatee);

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GetCollisionResponse
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FCollisionResponseContainer&_responseContainer                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       _eCollisionChannel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionResponse                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionResponse USCCollisionLibrary::BPF_GetCollisionResponse(const struct FCollisionResponseContainer& _responseContainer, ECollisionChannel _eCollisionChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GetCollisionResponse");

	Params::SCCollisionLibrary_BPF_GetCollisionResponse Parms{};

	Parms._responseContainer = std::move(_responseContainer);
	Parms._eCollisionChannel = _eCollisionChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GetGroundSimplePhysicalMaterial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCharacterMovementComponent*      _movementComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* USCCollisionLibrary::BPF_GetGroundSimplePhysicalMaterial(class UCharacterMovementComponent* _movementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GetGroundSimplePhysicalMaterial");

	Params::SCCollisionLibrary_BPF_GetGroundSimplePhysicalMaterial Parms{};

	Parms._movementComponent = _movementComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_GetSimplePhysicalMaterial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* USCCollisionLibrary::BPF_GetSimplePhysicalMaterial(class UPrimitiveComponent* _primitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_GetSimplePhysicalMaterial");

	Params::SCCollisionLibrary_BPF_GetSimplePhysicalMaterial Parms{};

	Parms._primitiveComponent = _primitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_ObjectTypeQueryToCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EObjectTypeQuery                        _eObjectType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionChannel USCCollisionLibrary::BPF_ObjectTypeQueryToCollisionChannel(EObjectTypeQuery _eObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_ObjectTypeQueryToCollisionChannel");

	Params::SCCollisionLibrary_BPF_ObjectTypeQueryToCollisionChannel Parms{};

	Parms._eObjectType = _eObjectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_PrepareContainerForTraceMulti
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCollisionResponseContainer&     _responses                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_PrepareContainerForTraceMulti(struct FCollisionResponseContainer& _responses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_PrepareContainerForTraceMulti");

	Params::SCCollisionLibrary_BPF_PrepareContainerForTraceMulti Parms{};

	Parms._responses = std::move(_responses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_responses = std::move(Parms._responses);
}


// Function SCCore.SCCollisionLibrary.BPF_SetCollisionResponseFromPreset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCCollisionResponsePreset&_preset                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_SetCollisionResponseFromPreset(class UPrimitiveComponent* _primitiveComponent, const struct FSCCollisionResponsePreset& _preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_SetCollisionResponseFromPreset");

	Params::SCCollisionLibrary_BPF_SetCollisionResponseFromPreset Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._preset = std::move(_preset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCollisionLibrary.BPF_SetCollisionResponseFromTemplate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCCollisionResponseTemplate&_template                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_SetCollisionResponseFromTemplate(class UPrimitiveComponent* _primitiveComponent, const struct FSCCollisionResponseTemplate& _template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_SetCollisionResponseFromTemplate");

	Params::SCCollisionLibrary_BPF_SetCollisionResponseFromTemplate Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._template = std::move(_template);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCollisionLibrary.BPF_SetCollisionResponseToChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&_newReponses                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_SetCollisionResponseToChannels(class UPrimitiveComponent* _primitiveComponent, const struct FCollisionResponseContainer& _newReponses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_SetCollisionResponseToChannels");

	Params::SCCollisionLibrary_BPF_SetCollisionResponseToChannels Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._newReponses = std::move(_newReponses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCollisionLibrary.BPF_ToContainerForTraceMulti
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FCollisionResponseContainer&_responses                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FCollisionResponseContainer      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCollisionResponseContainer USCCollisionLibrary::BPF_ToContainerForTraceMulti(const struct FCollisionResponseContainer& _responses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_ToContainerForTraceMulti");

	Params::SCCollisionLibrary_BPF_ToContainerForTraceMulti Parms{};

	Parms._responses = std::move(_responses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_TraceTypeQueryToCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ETraceTypeQuery                         _eTraceType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionChannel USCCollisionLibrary::BPF_TraceTypeQueryToCollisionChannel(ETraceTypeQuery _eTraceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_TraceTypeQueryToCollisionChannel");

	Params::SCCollisionLibrary_BPF_TraceTypeQueryToCollisionChannel Parms{};

	Parms._eTraceType = _eTraceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCCollisionLibrary.BPF_VisualLogCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _categoryName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_VisualLogCollision(class UPrimitiveComponent* _primitiveComponent, class FName _categoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_VisualLogCollision");

	Params::SCCollisionLibrary_BPF_VisualLogCollision Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._categoryName = _categoryName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCCollisionLibrary.BPF_VisualLogStatusCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCCollisionLibrary::BPF_VisualLogStatusCollision(class UPrimitiveComponent* _primitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCCollisionLibrary", "BPF_VisualLogStatusCollision");

	Params::SCCollisionLibrary_BPF_VisualLogStatusCollision Parms{};

	Parms._primitiveComponent = _primitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCColorHelpers.BPF_ApplyColorblindness
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EColorblindness                         _colorblindness                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USCColorHelpers::BPF_ApplyColorblindness(EColorblindness _colorblindness, const struct FLinearColor& _color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ApplyColorblindness");

	Params::SCColorHelpers_BPF_ApplyColorblindness Parms{};

	Parms._colorblindness = _colorblindness;
	Parms._color = std::move(_color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_CIE2000Squared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dLightness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dChroma                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dHue                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_CIE2000Squared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dLightness, double _dChroma, double _dHue, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_CIE2000Squared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_CIE2000Squared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dLightness = _dLightness;
	Parms._dChroma = _dChroma;
	Parms._dHue = _dHue;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_CIE76Squared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dLightness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dRedGreen                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dBlueYellow                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_CIE76Squared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dLightness, double _dRedGreen, double _dBlueYellow, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_CIE76Squared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_CIE76Squared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dLightness = _dLightness;
	Parms._dRedGreen = _dRedGreen;
	Parms._dBlueYellow = _dBlueYellow;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_CIELUVDistSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dLightness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dUComponent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dVComponent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_CIELUVDistSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dLightness, double _dUComponent, double _dVComponent, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_CIELUVDistSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_CIELUVDistSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dLightness = _dLightness;
	Parms._dUComponent = _dUComponent;
	Parms._dVComponent = _dVComponent;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_Composite
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    _weights                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_Composite(const struct FLinearColor& _color0, const struct FLinearColor& _color1, const TArray<float>& _weights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_Composite");

	Params::SCColorHelpers_BPF_ComputeColorDifference_Composite Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._weights = std::move(_weights);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_EuclideanSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dR                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dG                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dB                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_EuclideanSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dR, double _dG, double _dB, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_EuclideanSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_EuclideanSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dR = _dR;
	Parms._dG = _dG;
	Parms._dB = _dB;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_LChDistSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dLightness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dChroma                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dHue                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_LChDistSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dLightness, double _dChroma, double _dHue, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_LChDistSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_LChDistSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dLightness = _dLightness;
	Parms._dChroma = _dChroma;
	Parms._dHue = _dHue;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_LMSDistSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dR                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dG                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dB                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_LMSDistSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dR, double _dG, double _dB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_LMSDistSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_LMSDistSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dR = _dR;
	Parms._dG = _dG;
	Parms._dB = _dB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_Luminance
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_Luminance(const struct FLinearColor& _color0, const struct FLinearColor& _color1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_Luminance");

	Params::SCColorHelpers_BPF_ComputeColorDifference_Luminance Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_RGBLDistSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dR                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dG                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dB                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dLightness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_RGBLDistSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dR, double _dG, double _dB, double _dLightness, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_RGBLDistSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_RGBLDistSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dR = _dR;
	Parms._dG = _dG;
	Parms._dB = _dB;
	Parms._dLightness = _dLightness;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCColorHelpers.BPF_ComputeColorDifference_WeightedEuclideanSquared
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              _color0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dR                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dG                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dB                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGammaCorrection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCColorHelpers::BPF_ComputeColorDifference_WeightedEuclideanSquared(const struct FLinearColor& _color0, const struct FLinearColor& _color1, double _dR, double _dG, double _dB, bool _bGammaCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCColorHelpers", "BPF_ComputeColorDifference_WeightedEuclideanSquared");

	Params::SCColorHelpers_BPF_ComputeColorDifference_WeightedEuclideanSquared Parms{};

	Parms._color0 = std::move(_color0);
	Parms._color1 = std::move(_color1);
	Parms._dR = _dR;
	Parms._dG = _dG;
	Parms._dB = _dB;
	Parms._bGammaCorrection = _bGammaCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_CloseDebugOverlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_CloseDebugOverlay(const class UObject* _worldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_CloseDebugOverlay");

	Params::SCDebugDisplaySubsystem_BPF_CloseDebugOverlay Parms{};

	Parms._worldContext = _worldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_IsOnScreenDebugDisplayOpen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldCtxt                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCDebugDisplaySubsystem::BPF_IsOnScreenDebugDisplayOpen(const class UObject* _worldCtxt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_IsOnScreenDebugDisplayOpen");

	Params::SCDebugDisplaySubsystem_BPF_IsOnScreenDebugDisplayOpen Parms{};

	Parms._worldCtxt = _worldCtxt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_IsOnScreenDisplayPathEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _objectOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCDebugDisplaySubsystem::BPF_IsOnScreenDisplayPathEnabled(const class UObject* _objectOwner, const class FString& _displayPath, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_IsOnScreenDisplayPathEnabled");

	Params::SCDebugDisplaySubsystem_BPF_IsOnScreenDisplayPathEnabled Parms{};

	Parms._objectOwner = _objectOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_LogValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _Value                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _userName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPersistant                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCDebugDisplayOutputType               _eOutput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_LogValue(const class UObject* _worldContext, const class FString& _name, const class FString& _Value, const class FString& _displayPath, const class FString& _userName, bool _bPersistant, ESCDebugDisplayOutputType _eOutput, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_LogValue");

	Params::SCDebugDisplaySubsystem_BPF_LogValue Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = std::move(_name);
	Parms._Value = std::move(_Value);
	Parms._displayPath = std::move(_displayPath);
	Parms._userName = std::move(_userName);
	Parms._bPersistant = _bPersistant;
	Parms._eOutput = _eOutput;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_LogValueFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _userName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPersistant                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCDebugDisplayOutputType               _eOutput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_LogValueFloat(const class UObject* _worldContext, const class FString& _name, float _fValue, const class FString& _displayPath, const class FString& _userName, bool _bPersistant, ESCDebugDisplayOutputType _eOutput, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_LogValueFloat");

	Params::SCDebugDisplaySubsystem_BPF_LogValueFloat Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = std::move(_name);
	Parms._fValue = _fValue;
	Parms._displayPath = std::move(_displayPath);
	Parms._userName = std::move(_userName);
	Parms._bPersistant = _bPersistant;
	Parms._eOutput = _eOutput;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_LogValueInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _userName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPersistant                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCDebugDisplayOutputType               _eOutput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_LogValueInt(const class UObject* _worldContext, const class FString& _name, int32 _iValue, const class FString& _displayPath, const class FString& _userName, bool _bPersistant, ESCDebugDisplayOutputType _eOutput, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_LogValueInt");

	Params::SCDebugDisplaySubsystem_BPF_LogValueInt Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = std::move(_name);
	Parms._iValue = _iValue;
	Parms._displayPath = std::move(_displayPath);
	Parms._userName = std::move(_userName);
	Parms._bPersistant = _bPersistant;
	Parms._eOutput = _eOutput;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_LogValueVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _userName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPersistant                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCDebugDisplayOutputType               _eOutput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_LogValueVector(const class UObject* _worldContext, const class FString& _name, const struct FVector& _vValue, const class FString& _displayPath, const class FString& _userName, bool _bPersistant, ESCDebugDisplayOutputType _eOutput, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_LogValueVector");

	Params::SCDebugDisplaySubsystem_BPF_LogValueVector Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = std::move(_name);
	Parms._vValue = std::move(_vValue);
	Parms._displayPath = std::move(_displayPath);
	Parms._userName = std::move(_userName);
	Parms._bPersistant = _bPersistant;
	Parms._eOutput = _eOutput;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_RegisterDebugMenuAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class FName ActionName)>&_event                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _path                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_RegisterDebugMenuAction(const class UObject* _worldContext, class FName _name, const TDelegate<void(class FName ActionName)>& _event, const class FString& _path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_RegisterDebugMenuAction");

	Params::SCDebugDisplaySubsystem_BPF_RegisterDebugMenuAction Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = _name;
	Parms._event = _event;
	Parms._path = std::move(_path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_RegisterDebugMenuToggleAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class FName ActionName)>&_event                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class FName ActionName)>&_isToggledEvent                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_RegisterDebugMenuToggleAction(const class UObject* _worldContext, class FName _name, const TDelegate<void(class FName ActionName)>& _event, const TDelegate<void(class FName ActionName)>& _isToggledEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_RegisterDebugMenuToggleAction");

	Params::SCDebugDisplaySubsystem_BPF_RegisterDebugMenuToggleAction Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = _name;
	Parms._event = _event;
	Parms._isToggledEvent = _isToggledEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_RegisterDebugMenuToggleActionCVar
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(bool bToggled)>&   _event                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _command                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              _parents                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bExecuteEvent                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bDefaultValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_RegisterDebugMenuToggleActionCVar(const class UObject* _worldContext, class FName _name, const TDelegate<void(bool bToggled)>& _event, const class FString& _command, const TArray<class FName>& _parents, bool _bExecuteEvent, bool _bDefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_RegisterDebugMenuToggleActionCVar");

	Params::SCDebugDisplaySubsystem_BPF_RegisterDebugMenuToggleActionCVar Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = _name;
	Parms._event = _event;
	Parms._command = std::move(_command);
	Parms._parents = std::move(_parents);
	Parms._bExecuteEvent = _bExecuteEvent;
	Parms._bDefaultValue = _bDefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_UnRegisterAllDebugMenuActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _path                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_UnRegisterAllDebugMenuActions(const class UObject* _worldContext, const class FString& _path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_UnRegisterAllDebugMenuActions");

	Params::SCDebugDisplaySubsystem_BPF_UnRegisterAllDebugMenuActions Parms{};

	Parms._worldContext = _worldContext;
	Parms._path = std::move(_path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugDisplaySubsystem.BPF_UnRegisterDebugMenuAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _path                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCDebugDisplaySubsystem::BPF_UnRegisterDebugMenuAction(const class UObject* _worldContext, class FName _name, const class FString& _path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCDebugDisplaySubsystem", "BPF_UnRegisterDebugMenuAction");

	Params::SCDebugDisplaySubsystem_BPF_UnRegisterDebugMenuAction Parms{};

	Parms._worldContext = _worldContext;
	Parms._name = _name;
	Parms._path = std::move(_path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugNamedOject.SetDebugColor
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FColor&                    _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISCDebugNamedOject::SetDebugColor(const struct FColor& _color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCDebugNamedOject", "SetDebugColor");

	Params::SCDebugNamedOject_SetDebugColor Parms{};

	Parms._color = std::move(_color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugNamedOject.SetDebugName
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             _name                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISCDebugNamedOject::SetDebugName(class FName _name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCDebugNamedOject", "SetDebugName");

	Params::SCDebugNamedOject_SetDebugName Parms{};

	Parms._name = _name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCDebugNamedOject.GetDebugColor
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ISCDebugNamedOject::GetDebugColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCDebugNamedOject", "GetDebugColor");

	Params::SCDebugNamedOject_GetDebugColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCDebugNamedOject.GetDebugName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ISCDebugNamedOject::GetDebugName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCDebugNamedOject", "GetDebugName");

	Params::SCDebugNamedOject_GetDebugName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SpeedDescriptionDB.BPF_ComputeSpeedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCharacterSpeedState USpeedDescriptionDB::BPF_ComputeSpeedState(const class AActor* _actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpeedDescriptionDB", "BPF_ComputeSpeedState");

	Params::SpeedDescriptionDB_BPF_ComputeSpeedState Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SpeedDescriptionDB.BPF_ComputeSpeedStateFromInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   _fInputSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCharacterSpeedState USpeedDescriptionDB::BPF_ComputeSpeedStateFromInput(float _fInputSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpeedDescriptionDB", "BPF_ComputeSpeedStateFromInput");

	Params::SpeedDescriptionDB_BPF_ComputeSpeedStateFromInput Parms{};

	Parms._fInputSize = _fInputSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SpeedDescriptionDB.BPF_ComputeSpeedStateWithRawSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   _fSpeed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fForwardToVelocityAngle                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCharacterSpeedState USpeedDescriptionDB::BPF_ComputeSpeedStateWithRawSpeed(float _fSpeed, float _fForwardToVelocityAngle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpeedDescriptionDB", "BPF_ComputeSpeedStateWithRawSpeed");

	Params::SpeedDescriptionDB_BPF_ComputeSpeedStateWithRawSpeed Parms{};

	Parms._fSpeed = _fSpeed;
	Parms._fForwardToVelocityAngle = _fForwardToVelocityAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCEnvQueryHelpers.BPF_RunEQSQueryWithParams
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnvQuery*                        _queryTemplate                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          _querier                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEnvQueryRunMode                        _runMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UEnvQueryInstanceBlueprintWrapper>_wrapperClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FEnvNamedValue>&    _queryParams                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UEnvQueryInstanceBlueprintWrapper*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQueryInstanceBlueprintWrapper* USCEnvQueryHelpers::BPF_RunEQSQueryWithParams(class UObject* _worldContextObject, class UEnvQuery* _queryTemplate, class UObject* _querier, EEnvQueryRunMode _runMode, TSubclassOf<class UEnvQueryInstanceBlueprintWrapper> _wrapperClass, const TArray<struct FEnvNamedValue>& _queryParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCEnvQueryHelpers", "BPF_RunEQSQueryWithParams");

	Params::SCEnvQueryHelpers_BPF_RunEQSQueryWithParams Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._queryTemplate = _queryTemplate;
	Parms._querier = _querier;
	Parms._runMode = _runMode;
	Parms._wrapperClass = _wrapperClass;
	Parms._queryParams = std::move(_queryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCErrorHelpers.BPF_Ensure
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _message                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCErrorHelpers::BPF_Ensure(bool _bValue, const class FString& _message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCErrorHelpers", "BPF_Ensure");

	Params::SCErrorHelpers_BPF_Ensure Parms{};

	Parms._bValue = _bValue;
	Parms._message = std::move(_message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCErrorHelpers.BPF_EnsureData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _owner                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _title                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _message                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCErrorHelpers::BPF_EnsureData(const class UObject* _owner, bool _bValue, class FName _title, const class FString& _message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCErrorHelpers", "BPF_EnsureData");

	Params::SCErrorHelpers_BPF_EnsureData Parms{};

	Parms._owner = _owner;
	Parms._bValue = _bValue;
	Parms._title = _title;
	Parms._message = std::move(_message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCErrorHelpers.BPF_ShowMessageLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESCMessageLogSeverity                   _eSeverity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _textContent                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _categoryName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bNotify                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCErrorHelpers::BPF_ShowMessageLog(ESCMessageLogSeverity _eSeverity, const class FString& _textContent, class FName _categoryName, bool _bNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCErrorHelpers", "BPF_ShowMessageLog");

	Params::SCErrorHelpers_BPF_ShowMessageLog Parms{};

	Parms._eSeverity = _eSeverity;
	Parms._textContent = std::move(_textContent);
	Parms._categoryName = _categoryName;
	Parms._bNotify = _bNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCExpandableWidgetInterface.BPE_Collapse
// (Event, Public, BlueprintEvent)

void ISCExpandableWidgetInterface::BPE_Collapse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCExpandableWidgetInterface", "BPE_Collapse");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function SCCore.SCExpandableWidgetInterface.BPE_Expand
// (Event, Public, BlueprintEvent)

void ISCExpandableWidgetInterface::BPE_Expand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCExpandableWidgetInterface", "BPE_Expand");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function SCCore.SCExpandableWidgetInterface.BPE_IsExpanded
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISCExpandableWidgetInterface::BPE_IsExpanded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCExpandableWidgetInterface", "BPE_IsExpanded");

	Params::SCExpandableWidgetInterface_BPE_IsExpanded Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraph.BPF_TryGoToNextState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCFlowGraph::BPF_TryGoToNextState(const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraph", "BPF_TryGoToNextState");

	Params::SCFlowGraph_BPF_TryGoToNextState Parms{};

	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraph.BPF_TryGoToState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _stateTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCFlowGraph::BPF_TryGoToState(const struct FGameplayTag& _stateTag, const struct FGameplayAbilityTargetDataHandle& _payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraph", "BPF_TryGoToState");

	Params::SCFlowGraph_BPF_TryGoToState Parms{};

	Parms._stateTag = std::move(_stateTag);
	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCFlowGraph.BPF_GetCurrentNodeTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USCFlowGraph::BPF_GetCurrentNodeTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraph", "BPF_GetCurrentNodeTag");

	Params::SCFlowGraph_BPF_GetCurrentNodeTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraph.BPF_IsInStateId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _ID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCFlowGraph::BPF_IsInStateId(class FName _ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraph", "BPF_IsInStateId");

	Params::SCFlowGraph_BPF_IsInStateId Parms{};

	Parms._ID = _ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCFlowGraphConduitNode.BPE_GetConditionTarget
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USCFlowGraphConduitNode::BPE_GetConditionTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCFlowGraphConduitNode", "BPE_GetConditionTarget");

	Params::SCFlowGraphConduitNode_BPE_GetConditionTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.FootIkDataStatics.BPF_GetLastFoundGround
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCFootIkData&             _inFootIkData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutNormal                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFootIkDataStatics::BPF_GetLastFoundGround(const struct FSCFootIkData& _inFootIkData, struct FVector* _vOutLocation, struct FVector* _vOutNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FootIkDataStatics", "BPF_GetLastFoundGround");

	Params::FootIkDataStatics_BPF_GetLastFoundGround Parms{};

	Parms._inFootIkData = std::move(_inFootIkData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutLocation != nullptr)
		*_vOutLocation = std::move(Parms._vOutLocation);

	if (_vOutNormal != nullptr)
		*_vOutNormal = std::move(Parms._vOutNormal);

	return Parms.ReturnValue;
}


// Function SCCore.FootIkDataStatics.BPF_IsFootPlanted
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCFootIkData&             _inFootIkData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFootIkDataStatics::BPF_IsFootPlanted(const struct FSCFootIkData& _inFootIkData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FootIkDataStatics", "BPF_IsFootPlanted");

	Params::FootIkDataStatics_BPF_IsFootPlanted Parms{};

	Parms._inFootIkData = std::move(_inFootIkData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlow.BPF_FindStartState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameFlowStartState*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCGameFlowStartState* USCGameFlow::BPF_FindStartState(const struct FGameplayTag& _tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlow", "BPF_FindStartState");

	Params::SCGameFlow_BPF_FindStartState Parms{};

	Parms._tag = std::move(_tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlow.BPF_FindState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameFlowState*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCGameFlowState* USCGameFlow::BPF_FindState(const struct FGameplayTag& _tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlow", "BPF_FindState");

	Params::SCGameFlow_BPF_FindState Parms{};

	Parms._tag = std::move(_tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_IsGameFlowEnabledInCurrentWorldType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_IsGameFlowEnabledInCurrentWorldType(const class UObject* _worldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameFlowSubsystem", "BPF_IsGameFlowEnabledInCurrentWorldType");

	Params::SCGameFlowSubsystem_BPF_IsGameFlowEnabledInCurrentWorldType Parms{};

	Parms._worldContext = _worldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.GetOwningGameFlowSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USCUserWidget*              _widget                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCGameFlowSubsystem*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCGameFlowSubsystem* USCGameFlowSubsystem::GetOwningGameFlowSubsystem(const class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameFlowSubsystem", "GetOwningGameFlowSubsystem");

	Params::SCGameFlowSubsystem_GetOwningGameFlowSubsystem Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.GetPlayersSynchroHandler
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlayersSynchroHandler*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlayersSynchroHandler* USCGameFlowSubsystem::GetPlayersSynchroHandler(const class UObject* _worldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameFlowSubsystem", "GetPlayersSynchroHandler");

	Params::SCGameFlowSubsystem_GetPlayersSynchroHandler Parms{};

	Parms._worldContext = _worldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPE_OnSFXStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowSubsystem::BPE_OnSFXStateChanged(const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPE_OnSFXStateChanged");

	Params::SCGameFlowSubsystem_BPE_OnSFXStateChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameFlowSubsystem.BPE_StateChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              _previousState                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _currentState                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowSubsystem::BPE_StateChanged(const struct FGameplayTag& _previousState, const struct FGameplayTag& _currentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPE_StateChanged");

	Params::SCGameFlowSubsystem_BPE_StateChanged Parms{};

	Parms._previousState = std::move(_previousState);
	Parms._currentState = std::move(_currentState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameFlowSubsystem.BPF_ClearMenusStack
// (Final, Native, Public, BlueprintCallable)

void USCGameFlowSubsystem::BPF_ClearMenusStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_ClearMenusStack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowSubsystem.BPF_CloseTopMenu
// (Final, Native, Public, BlueprintCallable)

void USCGameFlowSubsystem::BPF_CloseTopMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_CloseTopMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetAvailableTransitionsFromMenu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>*                    _outTransitions                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             _menuClass                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowSubsystem::BPF_GetAvailableTransitionsFromMenu(TArray<class FName>* _outTransitions, TSoftClassPtr<class UClass> _menuClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetAvailableTransitionsFromMenu");

	Params::SCGameFlowSubsystem_BPF_GetAvailableTransitionsFromMenu Parms{};

	Parms._menuClass = _menuClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outTransitions != nullptr)
		*_outTransitions = std::move(Parms._outTransitions);
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetNextStateByTransitionName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag USCGameFlowSubsystem::BPF_GetNextStateByTransitionName(class FName _transitionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetNextStateByTransitionName");

	Params::SCGameFlowSubsystem_BPF_GetNextStateByTransitionName Parms{};

	Parms._transitionName = _transitionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GotoPreviousState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _reloadMap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_GotoPreviousState(bool _reloadMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GotoPreviousState");

	Params::SCGameFlowSubsystem_BPF_GotoPreviousState Parms{};

	Parms._reloadMap = _reloadMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GotoSiblingStateByTransitionName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCBasePlayerController*          _pc                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForceLocal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_GotoSiblingStateByTransitionName(class FName _transitionName, class ASCBasePlayerController* _pc, uint8 _uiIndex, bool _bForceLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GotoSiblingStateByTransitionName");

	Params::SCGameFlowSubsystem_BPF_GotoSiblingStateByTransitionName Parms{};

	Parms._transitionName = _transitionName;
	Parms._pc = _pc;
	Parms._uiIndex = _uiIndex;
	Parms._bForceLocal = _bForceLocal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GotoStateByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _stateTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_GotoStateByTag(const struct FGameplayTag& _stateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GotoStateByTag");

	Params::SCGameFlowSubsystem_BPF_GotoStateByTag Parms{};

	Parms._stateTag = std::move(_stateTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GotoStateByTransitionName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASCBasePlayerController*          _pc                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForceLocal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_GotoStateByTransitionName(class FName _transitionName, class ASCBasePlayerController* _pc, uint8 _uiIndex, bool _bForceLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GotoStateByTransitionName");

	Params::SCGameFlowSubsystem_BPF_GotoStateByTransitionName Parms{};

	Parms._transitionName = _transitionName;
	Parms._pc = _pc;
	Parms._uiIndex = _uiIndex;
	Parms._bForceLocal = _bForceLocal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GotoStateWithCustomTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _stateTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_GotoStateWithCustomTransition(const struct FGameplayTag& _stateTag, class FName _transitionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GotoStateWithCustomTransition");

	Params::SCGameFlowSubsystem_BPF_GotoStateWithCustomTransition Parms{};

	Parms._stateTag = std::move(_stateTag);
	Parms._transitionName = _transitionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_RestartCurrentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESCFFlowGraphError                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCFFlowGraphError USCGameFlowSubsystem::BPF_RestartCurrentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_RestartCurrentState");

	Params::SCGameFlowSubsystem_BPF_RestartCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_SetNextTransitionOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCGameFlowTransitionOptions&_options                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameFlowSubsystem::BPF_SetNextTransitionOptions(const struct FSCGameFlowTransitionOptions& _options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_SetNextTransitionOptions");

	Params::SCGameFlowSubsystem_BPF_SetNextTransitionOptions Parms{};

	Parms._options = std::move(_options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowSubsystem.BPF_TryToSkipPlayerSynchro
// (Final, Native, Public, BlueprintCallable)

void USCGameFlowSubsystem::BPF_TryToSkipPlayerSynchro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_TryToSkipPlayerSynchro");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowSubsystem.BPF_ValidateSynchro
// (Final, Native, Public, BlueprintCallable)

void USCGameFlowSubsystem::BPF_ValidateSynchro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_ValidateSynchro");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameFlowSubsystem.BPF_CanSkipPlayerSynchro
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_CanSkipPlayerSynchro() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_CanSkipPlayerSynchro");

	Params::SCGameFlowSubsystem_BPF_CanSkipPlayerSynchro Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetActiveLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag USCGameFlowSubsystem::BPF_GetActiveLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetActiveLayer");

	Params::SCGameFlowSubsystem_BPF_GetActiveLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetClientDisconnectionStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag USCGameFlowSubsystem::BPF_GetClientDisconnectionStateTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetClientDisconnectionStateTag");

	Params::SCGameFlowSubsystem_BPF_GetClientDisconnectionStateTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetCurrentLevelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USCGameFlowSubsystem::BPF_GetCurrentLevelName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetCurrentLevelName");

	Params::SCGameFlowSubsystem_BPF_GetCurrentLevelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag USCGameFlowSubsystem::BPF_GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetCurrentState");

	Params::SCGameFlowSubsystem_BPF_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetCurrentSynchroInitStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCSynchroGameStateInitStep             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCSynchroGameStateInitStep USCGameFlowSubsystem::BPF_GetCurrentSynchroInitStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetCurrentSynchroInitStep");

	Params::SCGameFlowSubsystem_BPF_GetCurrentSynchroInitStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetFlowStateMaxDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameFlowSubsystem::BPF_GetFlowStateMaxDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetFlowStateMaxDuration");

	Params::SCGameFlowSubsystem_BPF_GetFlowStateMaxDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetFlowStateRemainingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameFlowSubsystem::BPF_GetFlowStateRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetFlowStateRemainingTime");

	Params::SCGameFlowSubsystem_BPF_GetFlowStateRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetGameFlow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCGameFlow*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCGameFlow* USCGameFlowSubsystem::BPF_GetGameFlow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetGameFlow");

	Params::SCGameFlowSubsystem_BPF_GetGameFlow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetGameServerIdleStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag USCGameFlowSubsystem::BPF_GetGameServerIdleStateTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetGameServerIdleStateTag");

	Params::SCGameFlowSubsystem_BPF_GetGameServerIdleStateTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetPlayerSynchroInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlayerSynchroInfos              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPlayerSynchroInfos USCGameFlowSubsystem::BPF_GetPlayerSynchroInfos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetPlayerSynchroInfos");

	Params::SCGameFlowSubsystem_BPF_GetPlayerSynchroInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_GetTransitionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCGameFlowTransitionType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCGameFlowTransitionType USCGameFlowSubsystem::BPF_GetTransitionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_GetTransitionType");

	Params::SCGameFlowSubsystem_BPF_GetTransitionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_HasOutputTransitionByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             _transitionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_HasOutputTransitionByName(class FName _transitionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_HasOutputTransitionByName");

	Params::SCGameFlowSubsystem_BPF_HasOutputTransitionByName Parms{};

	Parms._transitionName = _transitionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_IsEnabledInCurrentWorldType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_IsEnabledInCurrentWorldType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_IsEnabledInCurrentWorldType");

	Params::SCGameFlowSubsystem_BPF_IsEnabledInCurrentWorldType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_IsServerWaitingForSynchro
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _synchro                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_IsServerWaitingForSynchro(const struct FGameplayTag& _synchro) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_IsServerWaitingForSynchro");

	Params::SCGameFlowSubsystem_BPF_IsServerWaitingForSynchro Parms{};

	Parms._synchro = std::move(_synchro);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_IsServerWaitingForSynchroValidation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_IsServerWaitingForSynchroValidation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_IsServerWaitingForSynchroValidation");

	Params::SCGameFlowSubsystem_BPF_IsServerWaitingForSynchroValidation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_IsWidgetActiveLayerRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_IsWidgetActiveLayerRoot(class USCUserWidget* _widget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_IsWidgetActiveLayerRoot");

	Params::SCGameFlowSubsystem_BPF_IsWidgetActiveLayerRoot Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_ShouldSkipFirstLaunch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::BPF_ShouldSkipFirstLaunch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_ShouldSkipFirstLaunch");

	Params::SCGameFlowSubsystem_BPF_ShouldSkipFirstLaunch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.BPF_StateLevelNames
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              _stateTag                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USCGameFlowSubsystem::BPF_StateLevelNames(const struct FGameplayTag& _stateTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "BPF_StateLevelNames");

	Params::SCGameFlowSubsystem_BPF_StateLevelNames Parms{};

	Parms._stateTag = std::move(_stateTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowSubsystem.ShouldUseRealGameFlow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameFlowSubsystem::ShouldUseRealGameFlow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowSubsystem", "ShouldUseRealGameFlow");

	Params::SCGameFlowSubsystem_ShouldUseRealGameFlow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameFlowViewModel.OnPlayerSynchroChanged
// (Final, Native, Protected)
// Parameters:
// class ASCGameState*                     _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameFlowViewModel::OnPlayerSynchroChanged(class ASCGameState* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameFlowViewModel", "OnPlayerSynchroChanged");

	Params::SCGameFlowViewModel_OnPlayerSynchroChanged Parms{};

	Parms._gameState = _gameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameMode.BPE_InitGameState
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASCGameState*                     _gameState                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCGameMode::BPE_InitGameState(class ASCGameState* _gameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameMode", "BPE_InitGameState");

	Params::SCGameMode_BPE_InitGameState Parms{};

	Parms._gameState = _gameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameMode.CanLeaveSpectate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class APlayerController*                _newPlayerController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCGameMode::CanLeaveSpectate(class APlayerController* _newPlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameMode", "CanLeaveSpectate");

	Params::SCGameMode_CanLeaveSpectate Parms{};

	Parms._newPlayerController = _newPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_AbilityExecEnumToOutput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin*                     _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_AbilityExecEnumToOutput(EAbilityExecOrigin _eIn, EAbilityExecOrigin* _eOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AbilityExecEnumToOutput");

	Params::SCGameplayAbility_BPF_AbilityExecEnumToOutput Parms{};

	Parms._eIn = _eIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;
}


// Function SCCore.SCGameplayAbility.BPF_AbilityTargetDataFromBlendParams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fDuration                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _dynamicByTimeRatio                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_AbilityTargetDataFromBlendParams(float _fDuration, class UCurveFloat* _dynamicByTimeRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AbilityTargetDataFromBlendParams");

	Params::SCGameplayAbility_BPF_AbilityTargetDataFromBlendParams Parms{};

	Parms._fDuration = _fDuration;
	Parms._dynamicByTimeRatio = _dynamicByTimeRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_AbilityTargetDataFromDirection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vInDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_AbilityTargetDataFromDirection(const struct FVector& _vInDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AbilityTargetDataFromDirection");

	Params::SCGameplayAbility_BPF_AbilityTargetDataFromDirection Parms{};

	Parms._vInDirection = std::move(_vInDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_AbilityTargetDataFromTransition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_AbilityTargetDataFromTransition(const struct FSCTransition& _transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AbilityTargetDataFromTransition");

	Params::SCGameplayAbility_BPF_AbilityTargetDataFromTransition Parms{};

	Parms._transition = std::move(_transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_AddAnimSequencePlayInfosToAbilityPayload
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USCGameplayAbility*               _ability                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimSequencePlayInfos&    _sequencePlayInfos                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_AddAnimSequencePlayInfosToAbilityPayload(class USCGameplayAbility* _ability, const struct FAnimSequencePlayInfos& _sequencePlayInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AddAnimSequencePlayInfosToAbilityPayload");

	Params::SCGameplayAbility_BPF_AddAnimSequencePlayInfosToAbilityPayload Parms{};

	Parms._ability = _ability;
	Parms._sequencePlayInfos = std::move(_sequencePlayInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPF_AddTaskToScope
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTaskScope&                      _scope                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGameplayTask*                    _task                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_AddTaskToScope(struct FTaskScope& _scope, class UGameplayTask* _task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_AddTaskToScope");

	Params::SCGameplayAbility_BPF_AddTaskToScope Parms{};

	Parms._scope = std::move(_scope);
	Parms._task = _task;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_scope = std::move(Parms._scope);
}


// Function SCCore.SCGameplayAbility.BPF_BlendParamsFromAbilityTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetData_BlendParamsReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetData_BlendParams USCGameplayAbility::BPF_BlendParamsFromAbilityTargetData(const struct FGameplayAbilityTargetDataHandle& _handle, int32 _iIndex, bool* _bOutFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_BlendParamsFromAbilityTargetData");

	Params::SCGameplayAbility_BPF_BlendParamsFromAbilityTargetData Parms{};

	Parms._handle = std::move(_handle);
	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutFound != nullptr)
		*_bOutFound = Parms._bOutFound;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_CombineOrReplaceTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_CombineOrReplaceTargetData(const struct FGameplayAbilityTargetDataHandle& _handle, const struct FGameplayAbilityTargetDataHandle& _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_CombineOrReplaceTargetData");

	Params::SCGameplayAbility_BPF_CombineOrReplaceTargetData Parms{};

	Parms._handle = std::move(_handle);
	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_CombineTargetDataCommutative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&A                                                      (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&B                                                      (Parm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_CombineTargetDataCommutative(const struct FGameplayAbilityTargetDataHandle& A, const struct FGameplayAbilityTargetDataHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_CombineTargetDataCommutative");

	Params::SCGameplayAbility_BPF_CombineTargetDataCommutative Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_CombineTargetDatas
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FGameplayAbilityTargetDataHandle>&_data                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_CombineTargetDatas(const TArray<struct FGameplayAbilityTargetDataHandle>& _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_CombineTargetDatas");

	Params::SCGameplayAbility_BPF_CombineTargetDatas Parms{};

	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_EndTaskIfValid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayTask*                    _task                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_EndTaskIfValid(class UGameplayTask* _task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_EndTaskIfValid");

	Params::SCGameplayAbility_BPF_EndTaskIfValid Parms{};

	Parms._task = _task;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPF_EndTasksAndClear
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UGameplayTask*>&           _tasks                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_EndTasksAndClear(TArray<class UGameplayTask*>& _tasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_EndTasksAndClear");

	Params::SCGameplayAbility_BPF_EndTasksAndClear Parms{};

	Parms._tasks = std::move(_tasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_tasks = std::move(Parms._tasks);
}


// Function SCCore.SCGameplayAbility.BPF_EndTaskScope
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTaskScope&                      _scope                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_EndTaskScope(struct FTaskScope& _scope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_EndTaskScope");

	Params::SCGameplayAbility_BPF_EndTaskScope Parms{};

	Parms._scope = std::move(_scope);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_scope = std::move(Parms._scope);
}


// Function SCCore.SCGameplayAbility.BPF_FilterTargetDataByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UScriptStruct*                    _type                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _name                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_FilterTargetDataByName(const struct FGameplayAbilityTargetDataHandle& _handle, class UScriptStruct* _type, const struct FGameplayTag& _name, bool _bEnsure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_FilterTargetDataByName");

	Params::SCGameplayAbility_BPF_FilterTargetDataByName Parms{};

	Parms._handle = std::move(_handle);
	Parms._type = _type;
	Parms._name = std::move(_name);
	Parms._bEnsure = _bEnsure;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_FilterTargetDataByType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UScriptStruct*                    _type                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_FilterTargetDataByType(const struct FGameplayAbilityTargetDataHandle& _handle, class UScriptStruct* _type, bool _bEnsure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_FilterTargetDataByType");

	Params::SCGameplayAbility_BPF_FilterTargetDataByType Parms{};

	Parms._handle = std::move(_handle);
	Parms._type = _type;
	Parms._bEnsure = _bEnsure;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_FilterTargetDatasByType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UScriptStruct*                    _type                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle USCGameplayAbility::BPF_FilterTargetDatasByType(const struct FGameplayAbilityTargetDataHandle& _handle, class UScriptStruct* _type, bool _bEnsure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_FilterTargetDatasByType");

	Params::SCGameplayAbility_BPF_FilterTargetDatasByType Parms{};

	Parms._handle = std::move(_handle);
	Parms._type = _type;
	Parms._bEnsure = _bEnsure;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_FindInputTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputGameplayAbilityTargetData* _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::BPF_FindInputTargetData(const struct FGameplayAbilityTargetDataHandle& _data, struct FInputGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_FindInputTargetData");

	Params::SCGameplayAbility_BPF_FindInputTargetData Parms{};

	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_GetGameplayTagsFromQuery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagQuery&         _query                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FGameplayTag>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGameplayTag> USCGameplayAbility::BPF_GetGameplayTagsFromQuery(const struct FGameplayTagQuery& _query)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_GetGameplayTagsFromQuery");

	Params::SCGameplayAbility_BPF_GetGameplayTagsFromQuery Parms{};

	Parms._query = std::move(_query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAllEffectTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAllEffectTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAllEffectTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAllEffectTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAllOwningTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAllOwningTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAllOwningTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAllOwningTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAllSourceTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAllSourceTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAllSourceTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAllSourceTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAnyEffectTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAnyEffectTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAnyEffectTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAnyEffectTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAnyOwningTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAnyOwningTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAnyOwningTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAnyOwningTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchAnySourceTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchAnySourceTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchAnySourceTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchAnySourceTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchNoEffectTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchNoEffectTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchNoEffectTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchNoEffectTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchNoOwningTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchNoOwningTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchNoOwningTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchNoOwningTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_MakeQuery_MatchNoSourceTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (Parm, NativeAccessSpecifierPublic)
// struct FGameplayEffectQuery             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameplayEffectQuery USCGameplayAbility::BPF_MakeQuery_MatchNoSourceTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_MakeQuery_MatchNoSourceTags");

	Params::SCGameplayAbility_BPF_MakeQuery_MatchNoSourceTags Parms{};

	Parms.InTags = std::move(InTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_SetContextInCueParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayCueParameters&    _inParameter                                           (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayEffectContextHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters*          _outResult                                             (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_SetContextInCueParameters(const struct FGameplayCueParameters& _inParameter, const struct FGameplayEffectContextHandle& _context, struct FGameplayCueParameters* _outResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_SetContextInCueParameters");

	Params::SCGameplayAbility_BPF_SetContextInCueParameters Parms{};

	Parms._inParameter = std::move(_inParameter);
	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.SCGameplayAbility.BPF_SetRefTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle&_data                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_Value                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_SetRefTargetData(struct FGameplayAbilityTargetDataHandle& _data, const struct FGameplayAbilityTargetDataHandle& _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_SetRefTargetData");

	Params::SCGameplayAbility_BPF_SetRefTargetData Parms{};

	Parms._data = std::move(_data);
	Parms._Value = std::move(_Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_data = std::move(Parms._data);
}


// Function SCCore.SCGameplayAbility.BPF_TransitionFromAbilityTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   _bOutFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCTransitionGameplayAbilityTargetDataReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSCTransitionGameplayAbilityTargetData USCGameplayAbility::BPF_TransitionFromAbilityTargetData(const struct FGameplayAbilityTargetDataHandle& _handle, bool* _bOutFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "BPF_TransitionFromAbilityTargetData");

	Params::SCGameplayAbility_BPF_TransitionFromAbilityTargetData Parms{};

	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutFound != nullptr)
		*_bOutFound = Parms._bOutFound;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.GetTargetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UScriptStruct*              _scriptStruct                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iStartIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCGameplayAbilityTargetData*    _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::GetTargetData(const struct FGameplayAbilityTargetDataHandle& _handle, const class UScriptStruct* _scriptStruct, bool _bEnsure, int32 _iStartIndex, struct FSCGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "GetTargetData");

	Params::SCGameplayAbility_GetTargetData Parms{};

	Parms._handle = std::move(_handle);
	Parms._scriptStruct = _scriptStruct;
	Parms._bEnsure = _bEnsure;
	Parms._iStartIndex = _iStartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.GetTargetDataNamed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _name                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UScriptStruct*              _scriptStruct                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iStartIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCGameplayAbilityTargetData*    _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::GetTargetDataNamed(const struct FGameplayTag& _name, const struct FGameplayAbilityTargetDataHandle& _handle, const class UScriptStruct* _scriptStruct, bool _bEnsure, int32 _iStartIndex, struct FSCGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "GetTargetDataNamed");

	Params::SCGameplayAbility_GetTargetDataNamed Parms{};

	Parms._name = std::move(_name);
	Parms._handle = std::move(_handle);
	Parms._scriptStruct = _scriptStruct;
	Parms._bEnsure = _bEnsure;
	Parms._iStartIndex = _iStartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.GetTargetDataNamedPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _name                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UScriptStruct*              _scriptStruct                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iStartIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCGameplayAbilityTargetData*    _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::GetTargetDataNamedPure(const struct FGameplayTag& _name, const struct FGameplayAbilityTargetDataHandle& _handle, const class UScriptStruct* _scriptStruct, bool _bEnsure, int32 _iStartIndex, struct FSCGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "GetTargetDataNamedPure");

	Params::SCGameplayAbility_GetTargetDataNamedPure Parms{};

	Parms._name = std::move(_name);
	Parms._handle = std::move(_handle);
	Parms._scriptStruct = _scriptStruct;
	Parms._bEnsure = _bEnsure;
	Parms._iStartIndex = _iStartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.GetTargetDataPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UScriptStruct*              _scriptStruct                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnsure                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iStartIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCGameplayAbilityTargetData*    _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::GetTargetDataPure(const struct FGameplayAbilityTargetDataHandle& _handle, const class UScriptStruct* _scriptStruct, bool _bEnsure, int32 _iStartIndex, struct FSCGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "GetTargetDataPure");

	Params::SCGameplayAbility_GetTargetDataPure Parms{};

	Parms._handle = std::move(_handle);
	Parms._scriptStruct = _scriptStruct;
	Parms._bEnsure = _bEnsure;
	Parms._iStartIndex = _iStartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.MakeTargetDataHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UScriptStruct*              _scriptStruct                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bNeedsPostMake                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_outHandle                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FSCGameplayAbilityTargetData&_data                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::MakeTargetDataHandle(const class UScriptStruct* _scriptStruct, bool _bNeedsPostMake, struct FGameplayAbilityTargetDataHandle* _outHandle, const struct FSCGameplayAbilityTargetData& _data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayAbility", "MakeTargetDataHandle");

	Params::SCGameplayAbility_MakeTargetDataHandle Parms{};

	Parms._scriptStruct = _scriptStruct;
	Parms._bNeedsPostMake = _bNeedsPostMake;
	Parms._data = std::move(_data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outHandle != nullptr)
		*_outHandle = std::move(Parms._outHandle);
}


// Function SCCore.SCGameplayAbility.AbilityEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _eventName                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::AbilityEvent(const struct FGameplayTag& _eventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "AbilityEvent");

	Params::SCGameplayAbility_AbilityEvent Parms{};

	Parms._eventName = std::move(_eventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BP_CheckAbilityCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      _effect                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::BP_CheckAbilityCost(TSubclassOf<class UGameplayEffect> _effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BP_CheckAbilityCost");

	Params::SCGameplayAbility_BP_CheckAbilityCost Parms{};

	Parms._effect = _effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BP_CommitAbilityCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      _effect                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::BP_CommitAbilityCost(TSubclassOf<class UGameplayEffect> _effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BP_CommitAbilityCost");

	Params::SCGameplayAbility_BP_CommitAbilityCost Parms{};

	Parms._effect = _effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPE_BuildPayload
// (Event, Public, BlueprintEvent)

void USCGameplayAbility::BPE_BuildPayload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPE_BuildPayload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCGameplayAbility.BPF_ApplyScopedGameplayEffectSpecsToOwner
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGameplayEffectSpecHandle>&_effectSpecHandle                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FActiveGameplayEffectHandle>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FActiveGameplayEffectHandle> USCGameplayAbility::BPF_ApplyScopedGameplayEffectSpecsToOwner(const TArray<struct FGameplayEffectSpecHandle>& _effectSpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ApplyScopedGameplayEffectSpecsToOwner");

	Params::SCGameplayAbility_BPF_ApplyScopedGameplayEffectSpecsToOwner Parms{};

	Parms._effectSpecHandle = std::move(_effectSpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_ApplyScopedGameplayEffectSpecToOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayEffectSpecHandle& _effectSpecHandle                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle USCGameplayAbility::BPF_ApplyScopedGameplayEffectSpecToOwner(const struct FGameplayEffectSpecHandle& _effectSpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ApplyScopedGameplayEffectSpecToOwner");

	Params::SCGameplayAbility_BPF_ApplyScopedGameplayEffectSpecToOwner Parms{};

	Parms._effectSpecHandle = std::move(_effectSpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_ApplyScopedGameplayEffectSpecToTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayEffectSpecHandle& _effectSpecHandle                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _target                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle USCGameplayAbility::BPF_ApplyScopedGameplayEffectSpecToTarget(const struct FGameplayEffectSpecHandle& _effectSpecHandle, class UAbilitySystemComponent* _target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ApplyScopedGameplayEffectSpecToTarget");

	Params::SCGameplayAbility_BPF_ApplyScopedGameplayEffectSpecToTarget Parms{};

	Parms._effectSpecHandle = std::move(_effectSpecHandle);
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_ApplyScopedGameplayEffectToOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      _gameplayEffectClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iGameplayEffectLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle USCGameplayAbility::BPF_ApplyScopedGameplayEffectToOwner(TSubclassOf<class UGameplayEffect> _gameplayEffectClass, int32 _iGameplayEffectLevel, int32 Stacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ApplyScopedGameplayEffectToOwner");

	Params::SCGameplayAbility_BPF_ApplyScopedGameplayEffectToOwner Parms{};

	Parms._gameplayEffectClass = _gameplayEffectClass;
	Parms._iGameplayEffectLevel = _iGameplayEffectLevel;
	Parms.Stacks = Stacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_ApplyScopedGameplayEffectToTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      _gameplayEffectClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          _target                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iGameplayEffectLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle USCGameplayAbility::BPF_ApplyScopedGameplayEffectToTarget(TSubclassOf<class UGameplayEffect> _gameplayEffectClass, class UAbilitySystemComponent* _target, int32 _iGameplayEffectLevel, int32 Stacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ApplyScopedGameplayEffectToTarget");

	Params::SCGameplayAbility_BPF_ApplyScopedGameplayEffectToTarget Parms{};

	Parms._gameplayEffectClass = _gameplayEffectClass;
	Parms._target = _target;
	Parms._iGameplayEffectLevel = _iGameplayEffectLevel;
	Parms.Stacks = Stacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_CopyActiveEffectToOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FActiveGameplayEffectHandle&_activeEffect                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bScoped                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle USCGameplayAbility::BPF_CopyActiveEffectToOwner(const struct FActiveGameplayEffectHandle& _activeEffect, bool _bScoped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_CopyActiveEffectToOwner");

	Params::SCGameplayAbility_BPF_CopyActiveEffectToOwner Parms{};

	Parms._activeEffect = std::move(_activeEffect);
	Parms._bScoped = _bScoped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_FindCurrentInputTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputGameplayAbilityTargetData* _outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::BPF_FindCurrentInputTargetData(struct FInputGameplayAbilityTargetData* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_FindCurrentInputTargetData");

	Params::SCGameplayAbility_BPF_FindCurrentInputTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_Log
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDisplayLevel                           _eVerbosity                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _subCat                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _inString                                              (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_Log(EDisplayLevel _eVerbosity, const class FString& _subCat, const class FString& _inString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_Log");

	Params::SCGameplayAbility_BPF_Log Parms{};

	Parms._eVerbosity = _eVerbosity;
	Parms._subCat = std::move(_subCat);
	Parms._inString = std::move(_inString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPF_MakeGameplaySpecWithContext
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayEffectContextHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      _gameplayEffectClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _iGameplayEffectLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpecHandle*       _outResult                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_MakeGameplaySpecWithContext(const struct FGameplayEffectContextHandle& _context, TSubclassOf<class UGameplayEffect> _gameplayEffectClass, float _iGameplayEffectLevel, struct FGameplayEffectSpecHandle* _outResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_MakeGameplaySpecWithContext");

	Params::SCGameplayAbility_BPF_MakeGameplaySpecWithContext Parms{};

	Parms._context = std::move(_context);
	Parms._gameplayEffectClass = _gameplayEffectClass;
	Parms._iGameplayEffectLevel = _iGameplayEffectLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = std::move(Parms._outResult);
}


// Function SCCore.SCGameplayAbility.BPF_PopBufferAvailabilityLayer
// (Final, Native, Public, BlueprintCallable)

void USCGameplayAbility::BPF_PopBufferAvailabilityLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_PopBufferAvailabilityLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPF_ResetInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_ResetInputAction(const class APlayerController* _PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_ResetInputAction");

	Params::SCGameplayAbility_BPF_ResetInputAction Parms{};

	Parms._PlayerController = _PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPF_SetCameraAbilityRefTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                _inTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_SetCameraAbilityRefTransform(const struct FTransform& _inTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_SetCameraAbilityRefTransform");

	Params::SCGameplayAbility_BPF_SetCameraAbilityRefTransform Parms{};

	Parms._inTransform = std::move(_inTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BuildPayloadFromManifest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              _manifest                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_result                                                (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BuildPayloadFromManifest(TSubclassOf<class UObject> _manifest, EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, const struct FGameplayAbilityTargetDataHandle& _payload, const struct FGameplayAbilityTargetDataHandle& _context, struct FGameplayAbilityTargetDataHandle* _result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BuildPayloadFromManifest");

	Params::SCGameplayAbility_BuildPayloadFromManifest Parms{};

	Parms._manifest = _manifest;
	Parms._eIn = _eIn;
	Parms._payload = std::move(_payload);
	Parms._context = std::move(_context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	if (_result != nullptr)
		*_result = std::move(Parms._result);
}


// Function SCCore.SCGameplayAbility.BuildPayloadFromProvidedManifest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAbilityExecOrigin                      _eIn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAbilityExecOutputWithValidation*       _eOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_payload                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_result                                                (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BuildPayloadFromProvidedManifest(EAbilityExecOrigin _eIn, EAbilityExecOutputWithValidation* _eOut, const struct FGameplayAbilityTargetDataHandle& _payload, struct FGameplayAbilityTargetDataHandle* _result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BuildPayloadFromProvidedManifest");

	Params::SCGameplayAbility_BuildPayloadFromProvidedManifest Parms{};

	Parms._eIn = _eIn;
	Parms._payload = std::move(_payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_eOut != nullptr)
		*_eOut = Parms._eOut;

	if (_result != nullptr)
		*_result = std::move(Parms._result);
}


// Function SCCore.SCGameplayAbility.IsToggledDebug
// (Final, Native, Public)
// Parameters:
// class FName                             _actionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayAbility::IsToggledDebug(class FName _actionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "IsToggledDebug");

	Params::SCGameplayAbility_IsToggledDebug Parms{};

	Parms._actionName = _actionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.OnToggleDebug
// (Final, Native, Public)
// Parameters:
// class FName                             _actionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::OnToggleDebug(class FName _actionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "OnToggleDebug");

	Params::SCGameplayAbility_OnToggleDebug Parms{};

	Parms._actionName = _actionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.BPE_ClientPreparePayload
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class USCAbilitySystemComponent*  _component                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_result                                                (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPE_ClientPreparePayload(const struct FGameplayAbilityTargetDataHandle& _handle, const class USCAbilitySystemComponent* _component, struct FGameplayAbilityTargetDataHandle* _result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPE_ClientPreparePayload");

	Params::SCGameplayAbility_BPE_ClientPreparePayload Parms{};

	Parms._handle = std::move(_handle);
	Parms._component = _component;

	UObject::ProcessEvent(Func, &Parms);

	if (_result != nullptr)
		*_result = std::move(Parms._result);
}


// Function SCCore.SCGameplayAbility.BPE_DebugLog
// (Event, Protected, BlueprintEvent, Const)

void USCGameplayAbility::BPE_DebugLog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPE_DebugLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCGameplayAbility.BPF_DrawDebug
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCAbilitySystemComponent*  _component                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_DrawDebug(const class AActor* _actor, const class USCAbilitySystemComponent* _component, bool _bActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_DrawDebug");

	Params::SCGameplayAbility_BPF_DrawDebug Parms{};

	Parms._actor = _actor;
	Parms._component = _component;
	Parms._bActive = _bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCGameplayAbility.BPF_GetAbilityTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCGameplayAbility::BPF_GetAbilityTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetAbilityTags");

	Params::SCGameplayAbility_BPF_GetAbilityTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_GetBuildPayloadTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_GetBuildPayloadTargetData(struct FGameplayAbilityTargetDataHandle* _outData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetBuildPayloadTargetData");

	Params::SCGameplayAbility_BPF_GetBuildPayloadTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);
}


// Function SCCore.SCGameplayAbility.BPF_GetCharacterAbilitySystemComponentFromActorInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCCharacterAbilitySystemComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCCharacterAbilitySystemComponent* USCGameplayAbility::BPF_GetCharacterAbilitySystemComponentFromActorInfos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetCharacterAbilitySystemComponentFromActorInfos");

	Params::SCGameplayAbility_BPF_GetCharacterAbilitySystemComponentFromActorInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_GetProvidedTargetData
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_GetProvidedTargetData(struct FGameplayAbilityTargetDataHandle* _outData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetProvidedTargetData");

	Params::SCGameplayAbility_BPF_GetProvidedTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);
}


// Function SCCore.SCGameplayAbility.BPF_GetSCAbilitySystemComponentFromActorInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCAbilitySystemComponent* USCGameplayAbility::BPF_GetSCAbilitySystemComponentFromActorInfos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetSCAbilitySystemComponentFromActorInfos");

	Params::SCGameplayAbility_BPF_GetSCAbilitySystemComponentFromActorInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_GetVLogContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    _category                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCGameplayAbility::BPF_GetVLogContext(const class FString& _category) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_GetVLogContext");

	Params::SCGameplayAbility_BPF_GetVLogContext Parms{};

	Parms._category = std::move(_category);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayAbility.BPF_LogTargetDataHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    _sLogPrefix                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayAbility::BPF_LogTargetDataHandle(const struct FGameplayAbilityTargetDataHandle& _handle, const class FString& _sLogPrefix) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "BPF_LogTargetDataHandle");

	Params::SCGameplayAbility_BPF_LogTargetDataHandle Parms{};

	Parms._handle = std::move(_handle);
	Parms._sLogPrefix = std::move(_sLogPrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayAbility.GetProvidedTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityTargetDataHandle*_outData                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USCGameplayAbility::GetProvidedTargetData(struct FGameplayAbilityTargetDataHandle* _outData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameplayAbility", "GetProvidedTargetData");

	Params::SCGameplayAbility_GetProvidedTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);
}


// Function SCCore.SCGameplayStatics.BPF_AsyncGetGameState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AGameStateBase**                  _outGameState                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_AsyncGetGameState(const class UObject* _worldContextObject, const struct FLatentActionInfo& _inLatentInfo, class AGameStateBase** _outGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_AsyncGetGameState");

	Params::SCGameplayStatics_BPF_AsyncGetGameState Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._inLatentInfo = std::move(_inLatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outGameState != nullptr)
		*_outGameState = Parms._outGameState;
}


// Function SCCore.SCGameplayStatics.BPF_AsyncGetPlayerStateFromController
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AController*                _inController                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerState**                    _outPlayerState                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_AsyncGetPlayerStateFromController(const class AController* _inController, const struct FLatentActionInfo& _inLatentInfo, class APlayerState** _outPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_AsyncGetPlayerStateFromController");

	Params::SCGameplayStatics_BPF_AsyncGetPlayerStateFromController Parms{};

	Parms._inController = _inController;
	Parms._inLatentInfo = std::move(_inLatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outPlayerState != nullptr)
		*_outPlayerState = Parms._outPlayerState;
}


// Function SCCore.SCGameplayStatics.BPF_AsyncGetPlayerStateFromPawn
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APawn*                      _inPawn                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerState**                    _outPlayerState                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_AsyncGetPlayerStateFromPawn(const class APawn* _inPawn, const struct FLatentActionInfo& _inLatentInfo, class APlayerState** _outPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_AsyncGetPlayerStateFromPawn");

	Params::SCGameplayStatics_BPF_AsyncGetPlayerStateFromPawn Parms{};

	Parms._inPawn = _inPawn;
	Parms._inLatentInfo = std::move(_inLatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outPlayerState != nullptr)
		*_outPlayerState = Parms._outPlayerState;
}


// Function SCCore.SCGameplayStatics.BPF_DisplayErrorMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             _title                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _message                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_DisplayErrorMessage(class FName _title, const class FString& _message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_DisplayErrorMessage");

	Params::SCGameplayStatics_BPF_DisplayErrorMessage Parms{};

	Parms._title = _title;
	Parms._message = std::move(_message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayStatics.BPF_ForceRefresh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_ForceRefresh(class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_ForceRefresh");

	Params::SCGameplayStatics_BPF_ForceRefresh Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayStatics.BPF_GetActorSimpleCollisionHalfHeight
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     _inActor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameplayStatics::BPF_GetActorSimpleCollisionHalfHeight(const class AActor* _inActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetActorSimpleCollisionHalfHeight");

	Params::SCGameplayStatics_BPF_GetActorSimpleCollisionHalfHeight Parms{};

	Parms._inActor = _inActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetActorSimpleCollisionRadius
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     _inActor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameplayStatics::BPF_GetActorSimpleCollisionRadius(const class AActor* _inActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetActorSimpleCollisionRadius");

	Params::SCGameplayStatics_BPF_GetActorSimpleCollisionRadius Parms{};

	Parms._inActor = _inActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetBlendTimeToGo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerCameraManager*             _cameraManager                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameplayStatics::BPF_GetBlendTimeToGo(class APlayerCameraManager* _cameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetBlendTimeToGo");

	Params::SCGameplayStatics_BPF_GetBlendTimeToGo Parms{};

	Parms._cameraManager = _cameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetChildComponentsByClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*                  _sceneComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USceneComponent>      _componentClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeAllDescendants                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USceneComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USceneComponent*> USCGameplayStatics::BPF_GetChildComponentsByClass(class USceneComponent* _sceneComponent, TSubclassOf<class USceneComponent> _componentClass, bool bIncludeAllDescendants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetChildComponentsByClass");

	Params::SCGameplayStatics_BPF_GetChildComponentsByClass Parms{};

	Parms._sceneComponent = _sceneComponent;
	Parms._componentClass = _componentClass;
	Parms.bIncludeAllDescendants = bIncludeAllDescendants;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetCurrentPlayWorld
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* USCGameplayStatics::BPF_GetCurrentPlayWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetCurrentPlayWorld");

	Params::SCGameplayStatics_BPF_GetCurrentPlayWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetFirstLocalPlayerPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* USCGameplayStatics::BPF_GetFirstLocalPlayerPawn(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetFirstLocalPlayerPawn");

	Params::SCGameplayStatics_BPF_GetFirstLocalPlayerPawn Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetNumPlayers
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCGameplayStatics::BPF_GetNumPlayers(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetNumPlayers");

	Params::SCGameplayStatics_BPF_GetNumPlayers Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetNumPlayersAndBots
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCGameplayStatics::BPF_GetNumPlayersAndBots(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetNumPlayersAndBots");

	Params::SCGameplayStatics_BPF_GetNumPlayersAndBots Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetNumPlayersAndSpectators
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCGameplayStatics::BPF_GetNumPlayersAndSpectators(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetNumPlayersAndSpectators");

	Params::SCGameplayStatics_BPF_GetNumPlayersAndSpectators Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetNumSpectators
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCGameplayStatics::BPF_GetNumSpectators(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetNumSpectators");

	Params::SCGameplayStatics_BPF_GetNumSpectators Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetObjectRandomSeededColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _context                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    _obj                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor USCGameplayStatics::BPF_GetObjectRandomSeededColor(const class UObject* _context, const class UObject* _obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetObjectRandomSeededColor");

	Params::SCGameplayStatics_BPF_GetObjectRandomSeededColor Parms{};

	Parms._context = _context;
	Parms._obj = _obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetScalableValueAtLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FScalableFloat&            _scalableFloat                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _contextString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCGameplayStatics::BPF_GetScalableValueAtLevel(const struct FScalableFloat& _scalableFloat, float _fLevel, const class FString& _contextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetScalableValueAtLevel");

	Params::SCGameplayStatics_BPF_GetScalableValueAtLevel Parms{};

	Parms._scalableFloat = std::move(_scalableFloat);
	Parms._fLevel = _fLevel;
	Parms._contextString = std::move(_contextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetScreenSpaceTargetPosRatio
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          _controller                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _cameraTransformUsed                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _targetPos                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EProjectionComputeBehavior        _eProjectionClampMethod                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _instigatorNameForDebuging                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCGameplayStatics::BPF_GetScreenSpaceTargetPosRatio(const class APlayerController* _controller, const struct FTransform& _cameraTransformUsed, const struct FVector& _targetPos, const EProjectionComputeBehavior _eProjectionClampMethod, const class FString& _instigatorNameForDebuging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetScreenSpaceTargetPosRatio");

	Params::SCGameplayStatics_BPF_GetScreenSpaceTargetPosRatio Parms{};

	Parms._controller = _controller;
	Parms._cameraTransformUsed = std::move(_cameraTransformUsed);
	Parms._targetPos = std::move(_targetPos);
	Parms._eProjectionClampMethod = _eProjectionClampMethod;
	Parms._instigatorNameForDebuging = std::move(_instigatorNameForDebuging);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_GetViewTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerCameraManager*             _cameraManager                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USCGameplayStatics::BPF_GetViewTarget(class APlayerCameraManager* _cameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_GetViewTarget");

	Params::SCGameplayStatics_BPF_GetViewTarget Parms{};

	Parms._cameraManager = _cameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_IsBuildDev
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_IsBuildDev()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_IsBuildDev");

	Params::SCGameplayStatics_BPF_IsBuildDev Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_IsBuildShipping
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_IsBuildShipping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_IsBuildShipping");

	Params::SCGameplayStatics_BPF_IsBuildShipping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_IsBuildTest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_IsBuildTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_IsBuildTest");

	Params::SCGameplayStatics_BPF_IsBuildTest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_IsGamePaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_IsGamePaused(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_IsGamePaused");

	Params::SCGameplayStatics_BPF_IsGamePaused Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_IsPlaySessionPaused
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_IsPlaySessionPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_IsPlaySessionPaused");

	Params::SCGameplayStatics_BPF_IsPlaySessionPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_ProjectScreenToWorldWithTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vInScreenPosition                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutWorldPosition                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutWorldDir                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _cameraTransform                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_ProjectScreenToWorldWithTransform(class APlayerController* _player, const struct FVector2D& _vInScreenPosition, struct FVector* _vOutWorldPosition, struct FVector* _vOutWorldDir, const struct FTransform& _cameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_ProjectScreenToWorldWithTransform");

	Params::SCGameplayStatics_BPF_ProjectScreenToWorldWithTransform Parms{};

	Parms._player = _player;
	Parms._vInScreenPosition = std::move(_vInScreenPosition);
	Parms._cameraTransform = std::move(_cameraTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutWorldPosition != nullptr)
		*_vOutWorldPosition = std::move(Parms._vOutWorldPosition);

	if (_vOutWorldDir != nullptr)
		*_vOutWorldDir = std::move(Parms._vOutWorldDir);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_ProjectWorldToScreenWithTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vWorldPosition                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutScreenPosition                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _cameraTransform                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPlayerViewportRelative                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EProjectionComputeBehavior              _eComputeBehavior                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCGameplayStatics::BPF_ProjectWorldToScreenWithTransform(class APlayerController* _player, const struct FVector& _vWorldPosition, struct FVector2D* _vOutScreenPosition, const struct FTransform& _cameraTransform, bool _bPlayerViewportRelative, EProjectionComputeBehavior _eComputeBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_ProjectWorldToScreenWithTransform");

	Params::SCGameplayStatics_BPF_ProjectWorldToScreenWithTransform Parms{};

	Parms._player = _player;
	Parms._vWorldPosition = std::move(_vWorldPosition);
	Parms._cameraTransform = std::move(_cameraTransform);
	Parms._bPlayerViewportRelative = _bPlayerViewportRelative;
	Parms._eComputeBehavior = _eComputeBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutScreenPosition != nullptr)
		*_vOutScreenPosition = std::move(Parms._vOutScreenPosition);

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_SetCurrentPrimitiveDataAsDefault
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_SetCurrentPrimitiveDataAsDefault(class UPrimitiveComponent* _primitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_SetCurrentPrimitiveDataAsDefault");

	Params::SCGameplayStatics_BPF_SetCurrentPrimitiveDataAsDefault Parms{};

	Parms._primitiveComponent = _primitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayStatics.BPF_SetGamePaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPaused                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCGameplayStatics::BPF_SetGamePaused(const class UObject* _worldContextObject, bool _bPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_SetGamePaused");

	Params::SCGameplayStatics_BPF_SetGamePaused Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._bPaused = _bPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameplayStatics.BPF_SpawnEmitterAtLocationFromPool
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PoolType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystemComponent* USCGameplayStatics::BPF_SpawnEmitterAtLocationFromPool(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class FName PoolType, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_SpawnEmitterAtLocationFromPool");

	Params::SCGameplayStatics_BPF_SpawnEmitterAtLocationFromPool Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.PoolType = PoolType;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameplayStatics.BPF_SpawnEmitterAttachedFromPool
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PoolType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystemComponent* USCGameplayStatics::BPF_SpawnEmitterAttachedFromPool(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName PoolType, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCGameplayStatics", "BPF_SpawnEmitterAttachedFromPool");

	Params::SCGameplayStatics_BPF_SpawnEmitterAttachedFromPool Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.PoolType = PoolType;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.LocationType = LocationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameState.OnRep_NetEmulationProfile
// (Final, Native, Private)

void ASCGameState::OnRep_NetEmulationProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "OnRep_NetEmulationProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameState.OnRep_PlayerArrayCompleteOnClients
// (Final, Native, Private, HasOutParams)
// Parameters:
// const bool&                             _bOldValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCGameState::OnRep_PlayerArrayCompleteOnClients(const bool& _bOldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "OnRep_PlayerArrayCompleteOnClients");

	Params::SCGameState_OnRep_PlayerArrayCompleteOnClients Parms{};

	Parms._bOldValue = _bOldValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameState.OnRep_SynchroArray
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPlayerSynchroInfoContainer&_oldReplicatedSynchroArray                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASCGameState::OnRep_SynchroArray(const struct FPlayerSynchroInfoContainer& _oldReplicatedSynchroArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "OnRep_SynchroArray");

	Params::SCGameState_OnRep_SynchroArray Parms{};

	Parms._oldReplicatedSynchroArray = std::move(_oldReplicatedSynchroArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCGameState.BPF_GetPlayerStateFromPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _playerId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* ASCGameState::BPF_GetPlayerStateFromPlayerId(int32 _playerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "BPF_GetPlayerStateFromPlayerId");

	Params::SCGameState_BPF_GetPlayerStateFromPlayerId Parms{};

	Parms._playerId = _playerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameState.BPF_HasBeenReplicatedOnce
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCGameState::BPF_HasBeenReplicatedOnce() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "BPF_HasBeenReplicatedOnce");

	Params::SCGameState_BPF_HasBeenReplicatedOnce Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCGameState.BPF_IsPlayerArrayCompleteOnClients
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCGameState::BPF_IsPlayerArrayCompleteOnClients() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCGameState", "BPF_IsPlayerArrayCompleteOnClients");

	Params::SCGameState_BPF_IsPlayerArrayCompleteOnClients Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_AbortCurrentSlowMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _context                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsRelevantForGameplay                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_AbortCurrentSlowMotion(class UObject* _context, bool _bIsRelevantForGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_AbortCurrentSlowMotion");

	Params::SCHelpers_BPF_AbortCurrentSlowMotion Parms{};

	Parms._context = _context;
	Parms._bIsRelevantForGameplay = _bIsRelevantForGameplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_AbortSlowMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _context                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iSlowMoID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsRelevantForGameplay                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_AbortSlowMotion(class UObject* _context, int32 _iSlowMoID, bool _bIsRelevantForGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_AbortSlowMotion");

	Params::SCHelpers_BPF_AbortSlowMotion Parms{};

	Parms._context = _context;
	Parms._iSlowMoID = _iSlowMoID;
	Parms._bIsRelevantForGameplay = _bIsRelevantForGameplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_BoolToTypedValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCTypedValue                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSCTypedValue USCHelpers::BPF_BoolToTypedValue(bool _bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_BoolToTypedValue");

	Params::SCHelpers_BPF_BoolToTypedValue Parms{};

	Parms._bValue = _bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_ColorToHex
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FColor&                    _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCHelpers::BPF_ColorToHex(const struct FColor& _color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_ColorToHex");

	Params::SCHelpers_BPF_ColorToHex Parms{};

	Parms._color = std::move(_color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_Contains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FFloatRange&               _FloatRange                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_Contains(const struct FFloatRange& _FloatRange, float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_Contains");

	Params::SCHelpers_BPF_Contains Parms{};

	Parms._FloatRange = std::move(_FloatRange);
	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_EndTasks
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UAbilityTask*>&      _tasks                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USCHelpers::BPF_EndTasks(const TArray<class UAbilityTask*>& _tasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_EndTasks");

	Params::SCHelpers_BPF_EndTasks Parms{};

	Parms._tasks = std::move(_tasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_FloatToTypedValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCTypedValue                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSCTypedValue USCHelpers::BPF_FloatToTypedValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_FloatToTypedValue");

	Params::SCHelpers_BPF_FloatToTypedValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GameplayTagToGameplayTagContainer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _gameplayTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCHelpers::BPF_GameplayTagToGameplayTagContainer(const struct FGameplayTag& _gameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GameplayTagToGameplayTagContainer");

	Params::SCHelpers_BPF_GameplayTagToGameplayTagContainer Parms{};

	Parms._gameplayTag = std::move(_gameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetActorClassDefaultComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      _actorComponentClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UActorComponent*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UActorComponent* USCHelpers::BPF_GetActorClassDefaultComponent(const class AActor* _actor, TSubclassOf<class UActorComponent> _actorComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetActorClassDefaultComponent");

	Params::SCHelpers_BPF_GetActorClassDefaultComponent Parms{};

	Parms._actor = _actor;
	Parms._actorComponentClass = _actorComponentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetActorOfClassInWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USCHelpers::BPF_GetActorOfClassInWorld(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetActorOfClassInWorld");

	Params::SCHelpers_BPF_GetActorOfClassInWorld Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetAllPrimaryAssetTypes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FPrimaryAssetType>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FPrimaryAssetType> USCHelpers::BPF_GetAllPrimaryAssetTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetAllPrimaryAssetTypes");

	Params::SCHelpers_BPF_GetAllPrimaryAssetTypes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetBuildChangeList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCHelpers::BPF_GetBuildChangeList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetBuildChangeList");

	Params::SCHelpers_BPF_GetBuildChangeList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetBuildVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCHelpers::BPF_GetBuildVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetBuildVersion");

	Params::SCHelpers_BPF_GetBuildVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetEditorWorld
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* USCHelpers::BPF_GetEditorWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetEditorWorld");

	Params::SCHelpers_BPF_GetEditorWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetGameplayTagChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _rootTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCHelpers::BPF_GetGameplayTagChildren(const struct FGameplayTag& _rootTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetGameplayTagChildren");

	Params::SCHelpers_BPF_GetGameplayTagChildren Parms{};

	Parms._rootTag = std::move(_rootTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetIsoCultureToDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FString, class FText>  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, class FText> USCHelpers::BPF_GetIsoCultureToDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetIsoCultureToDisplayName");

	Params::SCHelpers_BPF_GetIsoCultureToDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetMapPathAndName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString*                          _path                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          _mapName                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_GetMapPathAndName(class FString* _path, class FString* _mapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetMapPathAndName");

	Params::SCHelpers_BPF_GetMapPathAndName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_path != nullptr)
		*_path = std::move(Parms._path);

	if (_mapName != nullptr)
		*_mapName = std::move(Parms._mapName);
}


// Function SCCore.SCHelpers.BPF_GetPrimaryAssetIdsFromAssetTypes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FPrimaryAssetType>& _assetTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId>*         _outAssetIds                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USCHelpers::BPF_GetPrimaryAssetIdsFromAssetTypes(const TArray<struct FPrimaryAssetType>& _assetTypes, TArray<struct FPrimaryAssetId>* _outAssetIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetPrimaryAssetIdsFromAssetTypes");

	Params::SCHelpers_BPF_GetPrimaryAssetIdsFromAssetTypes Parms{};

	Parms._assetTypes = std::move(_assetTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outAssetIds != nullptr)
		*_outAssetIds = std::move(Parms._outAssetIds);
}


// Function SCCore.SCHelpers.BPF_GetSlowMotionDebugCoef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCHelpers::BPF_GetSlowMotionDebugCoef()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetSlowMotionDebugCoef");

	Params::SCHelpers_BPF_GetSlowMotionDebugCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetSlowMotionDebugUserValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCHelpers::BPF_GetSlowMotionDebugUserValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetSlowMotionDebugUserValue");

	Params::SCHelpers_BPF_GetSlowMotionDebugUserValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_GetTableRowEmbeddedStructByType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UScriptStruct*                    _valueType                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDataTableRowHandle&       _handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGenericStruct*                  _outData                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USCHelpers::BPF_GetTableRowEmbeddedStructByType(class UScriptStruct* _valueType, const struct FDataTableRowHandle& _handle, struct FGenericStruct* _outData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_GetTableRowEmbeddedStructByType");

	Params::SCHelpers_BPF_GetTableRowEmbeddedStructByType Parms{};

	Parms._valueType = _valueType;
	Parms._handle = std::move(_handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outData != nullptr)
		*_outData = std::move(Parms._outData);
}


// Function SCCore.SCHelpers.BPF_HexToColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    _hex                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor USCHelpers::BPF_HexToColor(const class FString& _hex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_HexToColor");

	Params::SCHelpers_BPF_HexToColor Parms{};

	Parms._hex = std::move(_hex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_InstantSlowMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _context                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsRelevantForGameplay                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCHelpers::BPF_InstantSlowMotion(class UObject* _context, float _fScale, bool _bIsRelevantForGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_InstantSlowMotion");

	Params::SCHelpers_BPF_InstantSlowMotion Parms{};

	Parms._context = _context;
	Parms._fScale = _fScale;
	Parms._bIsRelevantForGameplay = _bIsRelevantForGameplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_Int32RangeContains
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInt32Range&               _range                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_Int32RangeContains(const struct FInt32Range& _range, int32 _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_Int32RangeContains");

	Params::SCHelpers_BPF_Int32RangeContains Parms{};

	Parms._range = std::move(_range);
	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_IntToTypedValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCTypedValue                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSCTypedValue USCHelpers::BPF_IntToTypedValue(int32 _iValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_IntToTypedValue");

	Params::SCHelpers_BPF_IntToTypedValue Parms{};

	Parms._iValue = _iValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_IsObjectDefault
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _object                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_IsObjectDefault(const class UObject* _object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_IsObjectDefault");

	Params::SCHelpers_BPF_IsObjectDefault Parms{};

	Parms._object = _object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_IsSamePlayerId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUniqueNetIdRepl&          _playerIdA                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUniqueNetIdRepl&          _playerIdB                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_IsSamePlayerId(const struct FUniqueNetIdRepl& _playerIdA, const struct FUniqueNetIdRepl& _playerIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_IsSamePlayerId");

	Params::SCHelpers_BPF_IsSamePlayerId Parms{};

	Parms._playerIdA = std::move(_playerIdA);
	Parms._playerIdB = std::move(_playerIdB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_IsSlowMotionEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_IsSlowMotionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_IsSlowMotionEnabled");

	Params::SCHelpers_BPF_IsSlowMotionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_IsStatEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _statName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_IsStatEnabled(const class UObject* _worldContextObject, const class FString& _statName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_IsStatEnabled");

	Params::SCHelpers_BPF_IsStatEnabled Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._statName = std::move(_statName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_Niagara_DeactivateImmediate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                _niagaraComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_Niagara_DeactivateImmediate(class UNiagaraComponent* _niagaraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_Niagara_DeactivateImmediate");

	Params::SCHelpers_BPF_Niagara_DeactivateImmediate Parms{};

	Parms._niagaraComponent = _niagaraComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_PopBlockSlowmotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   _iHandle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUnFreezeAnySlowmotion                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_PopBlockSlowmotion(int32 _iHandle, bool _bUnFreezeAnySlowmotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_PopBlockSlowmotion");

	Params::SCHelpers_BPF_PopBlockSlowmotion Parms{};

	Parms._iHandle = _iHandle;
	Parms._bUnFreezeAnySlowmotion = _bUnFreezeAnySlowmotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_PushBlockSlowmotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bFreezeAnySlowmotion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCHelpers::BPF_PushBlockSlowmotion(bool _bFreezeAnySlowmotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_PushBlockSlowmotion");

	Params::SCHelpers_BPF_PushBlockSlowmotion Parms{};

	Parms._bFreezeAnySlowmotion = _bFreezeAnySlowmotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_RandomBoolFromProbability
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const float                             _fProba                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_RandomBoolFromProbability(const float _fProba)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_RandomBoolFromProbability");

	Params::SCHelpers_BPF_RandomBoolFromProbability Parms{};

	Parms._fProba = _fProba;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_RebuildBSP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class ABrush*>&            _brushActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USCHelpers::BPF_RebuildBSP(const TArray<class ABrush*>& _brushActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_RebuildBSP");

	Params::SCHelpers_BPF_RebuildBSP Parms{};

	Parms._brushActors = std::move(_brushActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_ResolveObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TSoftObjectPtr<class UObject>&    _obj                                                   (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bAllowSyncLoad                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bErrorIfSyncLoads                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USCHelpers::BPF_ResolveObject(const TSoftObjectPtr<class UObject>& _obj, bool _bAllowSyncLoad, bool _bErrorIfSyncLoads, const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_ResolveObject");

	Params::SCHelpers_BPF_ResolveObject Parms{};

	Parms._obj = _obj;
	Parms._bAllowSyncLoad = _bAllowSyncLoad;
	Parms._bErrorIfSyncLoads = _bErrorIfSyncLoads;
	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_SetLocalizationPreviewLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _inCulture                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_SetLocalizationPreviewLanguage(const class FString& _inCulture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_SetLocalizationPreviewLanguage");

	Params::SCHelpers_BPF_SetLocalizationPreviewLanguage Parms{};

	Parms._inCulture = std::move(_inCulture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_SetStatEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _statName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCHelpers::BPF_SetStatEnabled(const class UObject* _worldContextObject, const class FString& _statName, bool _bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_SetStatEnabled");

	Params::SCHelpers_BPF_SetStatEnabled Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._statName = std::move(_statName);
	Parms._bEnabled = _bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCHelpers.BPF_SlowMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _context                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _curve                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsRelevantForGameplay                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCHelpers::BPF_SlowMotion(class UObject* _context, class UCurveFloat* _curve, float _fScale, bool _bIsRelevantForGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_SlowMotion");

	Params::SCHelpers_BPF_SlowMotion Parms{};

	Parms._context = _context;
	Parms._curve = _curve;
	Parms._fScale = _fScale;
	Parms._bIsRelevantForGameplay = _bIsRelevantForGameplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_SlowMotionFinisher
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _context                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _curve                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsRelevantForGameplay                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopOnOtherSlomo                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCHelpers::BPF_SlowMotionFinisher(class UObject* _context, class UCurveFloat* _curve, TDelegate<void()> _onFinished, float _fScale, bool _bIsRelevantForGameplay, bool _bStopOnOtherSlomo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_SlowMotionFinisher");

	Params::SCHelpers_BPF_SlowMotionFinisher Parms{};

	Parms._context = _context;
	Parms._curve = _curve;
	Parms._onFinished = _onFinished;
	Parms._fScale = _fScale;
	Parms._bIsRelevantForGameplay = _bIsRelevantForGameplay;
	Parms._bStopOnOtherSlomo = _bStopOnOtherSlomo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_TestExpressionFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCMathExpressionFloat&    _expression                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fInputValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_TestExpressionFloat(const struct FSCMathExpressionFloat& _expression, float _fInputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_TestExpressionFloat");

	Params::SCHelpers_BPF_TestExpressionFloat Parms{};

	Parms._expression = std::move(_expression);
	Parms._fInputValue = _fInputValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCHelpers.BPF_TestExpressionInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSCMathExpressionInteger&  _expression                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   _iInputValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCHelpers::BPF_TestExpressionInt(const struct FSCMathExpressionInteger& _expression, int32 _iInputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCHelpers", "BPF_TestExpressionInt");

	Params::SCHelpers_BPF_TestExpressionInt Parms{};

	Parms._expression = std::move(_expression);
	Parms._iInputValue = _iInputValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetAchievementConditionFromTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _achievementTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAchievementUnlockCondition*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAchievementUnlockCondition* USCInGameAchievementsManagerBlueprintHelper::BPF_GetAchievementConditionFromTag(const struct FGameplayTag& _achievementTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetAchievementConditionFromTag");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetAchievementConditionFromTag Parms{};

	Parms._achievementTag = std::move(_achievementTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetAchievementManagerSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCInGameAchievementsManagerSettings*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCInGameAchievementsManagerSettings* USCInGameAchievementsManagerBlueprintHelper::BPF_GetAchievementManagerSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetAchievementManagerSettings");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetAchievementManagerSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetAllAchievementsToUnlock
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UAchievementUnlockCondition*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAchievementUnlockCondition*> USCInGameAchievementsManagerBlueprintHelper::BPF_GetAllAchievementsToUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetAllAchievementsToUnlock");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetAllAchievementsToUnlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetCurrentAchievementsToUnlock
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UAchievementUnlockCondition*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAchievementUnlockCondition*> USCInGameAchievementsManagerBlueprintHelper::BPF_GetCurrentAchievementsToUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetCurrentAchievementsToUnlock");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetCurrentAchievementsToUnlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetObjectsNewlyUnlocked
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _newlyUnlockCategory                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USCInGameAchievementsManagerBlueprintHelper::BPF_GetObjectsNewlyUnlocked(const struct FGameplayTag& _newlyUnlockCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetObjectsNewlyUnlocked");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetObjectsNewlyUnlocked Parms{};

	Parms._newlyUnlockCategory = std::move(_newlyUnlockCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_GetObjectUnlockInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              _objectTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAchievementUnlockConditionStruct*_outObjectUnlockCondition                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCInGameAchievementsManagerBlueprintHelper::BPF_GetObjectUnlockInfo(const struct FGameplayTag& _objectTag, struct FAchievementUnlockConditionStruct* _outObjectUnlockCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_GetObjectUnlockInfo");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_GetObjectUnlockInfo Parms{};

	Parms._objectTag = std::move(_objectTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outObjectUnlockCondition != nullptr)
		*_outObjectUnlockCondition = std::move(Parms._outObjectUnlockCondition);

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_IsAchievementUnlocked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _achievementTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCInGameAchievementsManagerBlueprintHelper::BPF_IsAchievementUnlocked(const struct FGameplayTag& _achievementTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_IsAchievementUnlocked");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_IsAchievementUnlocked Parms{};

	Parms._achievementTag = std::move(_achievementTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_IsObjectNewlyUnlocked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _newlyUnlockedCategory                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _objectTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCInGameAchievementsManagerBlueprintHelper::BPF_IsObjectNewlyUnlocked(const struct FGameplayTag& _newlyUnlockedCategory, const struct FGameplayTag& _objectTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_IsObjectNewlyUnlocked");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_IsObjectNewlyUnlocked Parms{};

	Parms._newlyUnlockedCategory = std::move(_newlyUnlockedCategory);
	Parms._objectTag = std::move(_objectTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_IsObjectUnlocked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _objectTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCInGameAchievementsManagerBlueprintHelper::BPF_IsObjectUnlocked(const struct FGameplayTag& _objectTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_IsObjectUnlocked");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_IsObjectUnlocked Parms{};

	Parms._objectTag = std::move(_objectTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_OnMatchEnded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bHasWon                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCInGameAchievementsManagerBlueprintHelper::BPF_OnMatchEnded(bool _bHasWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_OnMatchEnded");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_OnMatchEnded Parms{};

	Parms._bHasWon = _bHasWon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCInGameAchievementsManagerBlueprintHelper.BPF_RemoveObjectFromNewlyUnlocked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _newlyUnlockedCategory                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _objectToRemove                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCInGameAchievementsManagerBlueprintHelper::BPF_RemoveObjectFromNewlyUnlocked(const struct FGameplayTag& _newlyUnlockedCategory, const struct FGameplayTag& _objectToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInGameAchievementsManagerBlueprintHelper", "BPF_RemoveObjectFromNewlyUnlocked");

	Params::SCInGameAchievementsManagerBlueprintHelper_BPF_RemoveObjectFromNewlyUnlocked Parms{};

	Parms._newlyUnlockedCategory = std::move(_newlyUnlockedCategory);
	Parms._objectToRemove = std::move(_objectToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCInputComponent.BPF_ListenForSCInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inAction                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eWatchTrigger                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPassive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConsume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)>_callback                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCInputComponent::BPF_ListenForSCInputAction(class USCInputAction* _inAction, EInputWatchTrigger _eWatchTrigger, bool _bPassive, bool bConsume, TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)> _callback, int32 _iPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCInputComponent", "BPF_ListenForSCInputAction");

	Params::SCInputComponent_BPF_ListenForSCInputAction Parms{};

	Parms._inAction = _inAction;
	Parms._eWatchTrigger = _eWatchTrigger;
	Parms._bPassive = _bPassive;
	Parms.bConsume = bConsume;
	Parms._callback = _callback;
	Parms._iPriority = _iPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCInputComponent.BPF_StopListeningForSCInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCInputAction*                   _inAction                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputWatchTrigger                      _eWatchTrigger                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)>_callback                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCInputComponent::BPF_StopListeningForSCInputAction(class USCInputAction* _inAction, EInputWatchTrigger _eWatchTrigger, TDelegate<void(const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)> _callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCInputComponent", "BPF_StopListeningForSCInputAction");

	Params::SCInputComponent_BPF_StopListeningForSCInputAction Parms{};

	Parms._inAction = _inAction;
	Parms._eWatchTrigger = _eWatchTrigger;
	Parms._callback = _callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCInputComponent.BPF_StopListeningForSCInputActionByID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iListenerID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCInputComponent::BPF_StopListeningForSCInputActionByID(int32 _iListenerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCInputComponent", "BPF_StopListeningForSCInputActionByID");

	Params::SCInputComponent_BPF_StopListeningForSCInputActionByID Parms{};

	Parms._iListenerID = _iListenerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCInputComponent.BPF_GetListenerState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iListenerID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionState*               _outState                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCInputComponent::BPF_GetListenerState(int32 _iListenerID, struct FInputActionState* _outState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCInputComponent", "BPF_GetListenerState");

	Params::SCInputComponent_BPF_GetListenerState Parms{};

	Parms._iListenerID = _iListenerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outState != nullptr)
		*_outState = std::move(Parms._outState);

	return Parms.ReturnValue;
}


// Function SCCore.SCInstancedStructHelpers.GetInstancedStructValuePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInstancedStruct&          InstancedStruct                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCInstancedStructHelpers::GetInstancedStructValuePure(const struct FInstancedStruct& InstancedStruct, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInstancedStructHelpers", "GetInstancedStructValuePure");

	Params::SCInstancedStructHelpers_GetInstancedStructValuePure Parms{};

	Parms.InstancedStruct = std::move(InstancedStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function SCCore.SCInstancedStructHelpers.MakeInstancedStructPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32&                            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInstancedStruct                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInstancedStruct USCInstancedStructHelpers::MakeInstancedStructPure(const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCInstancedStructHelpers", "MakeInstancedStructPure");

	Params::SCInstancedStructHelpers_MakeInstancedStructPure Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCLDCameraActor.BPE_SwitchToGameplayCamera
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASCLDCameraActor::BPE_SwitchToGameplayCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLDCameraActor", "BPE_SwitchToGameplayCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLDCameraActor.BPE_SwitchToLDCamera
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*                     _actorToFollowRef                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actorToLookAtRef                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCCameraData>        _overrideCamera                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCLDCameraActor::BPE_SwitchToLDCamera(const class AActor* _actorToFollowRef, const class AActor* _actorToLookAtRef, TSubclassOf<class USCCameraData> _overrideCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLDCameraActor", "BPE_SwitchToLDCamera");

	Params::SCLDCameraActor_BPE_SwitchToLDCamera Parms{};

	Parms._actorToFollowRef = _actorToFollowRef;
	Parms._actorToLookAtRef = _actorToLookAtRef;
	Parms._overrideCamera = _overrideCamera;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCLDCameraActor.BPF_EnsureBlackBoardKeyIsValid
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      _keyName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCLDCameraActor::BPF_EnsureBlackBoardKeyIsValid(const class FName& _keyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLDCameraActor", "BPF_EnsureBlackBoardKeyIsValid");

	Params::SCLDCameraActor_BPF_EnsureBlackBoardKeyIsValid Parms{};

	Parms._keyName = _keyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCLDCameraActor.BPF_GetPlayerCamera
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USCCameraComponent**              _outCameraComponentRef                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCLDCameraActor::BPF_GetPlayerCamera(class USCCameraComponent** _outCameraComponentRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLDCameraActor", "BPF_GetPlayerCamera");

	Params::SCLDCameraActor_BPF_GetPlayerCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outCameraComponentRef != nullptr)
		*_outCameraComponentRef = Parms._outCameraComponentRef;
}


// Function SCCore.SCLDCameraActor.BPF_GetPlayerCameraBlackBoard
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBlackboardComponent**            _outCameraBlackBoardRef                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCLDCameraActor::BPF_GetPlayerCameraBlackBoard(class UBlackboardComponent** _outCameraBlackBoardRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLDCameraActor", "BPF_GetPlayerCameraBlackBoard");

	Params::SCLDCameraActor_BPF_GetPlayerCameraBlackBoard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outCameraBlackBoardRef != nullptr)
		*_outCameraBlackBoardRef = Parms._outCameraBlackBoardRef;
}


// Function SCCore.SCLevelScriptActor.BPE_OnLevelSequenceSkipped
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASCLevelSequenceActor*            _levelSequenceActor                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCLevelScriptActor::BPE_OnLevelSequenceSkipped(class ASCLevelSequenceActor* _levelSequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelScriptActor", "BPE_OnLevelSequenceSkipped");

	Params::SCLevelScriptActor_BPE_OnLevelSequenceSkipped Parms{};

	Parms._levelSequenceActor = _levelSequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCLevelScriptActor.BPE_OnUpdatedFromSave
// (Event, Public, BlueprintEvent)

void ASCLevelScriptActor::BPE_OnUpdatedFromSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelScriptActor", "BPE_OnUpdatedFromSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SCCore.SCLevelSequencePlayer.IsSkippable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCLevelSequencePlayer::IsSkippable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCLevelSequencePlayer", "IsSkippable");

	Params::SCLevelSequencePlayer_IsSkippable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCListViewWidget.BPF_ResetSelectedChild
// (Final, Native, Public, BlueprintCallable)

void USCListViewWidget::BPF_ResetSelectedChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_ResetSelectedChild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SelectNextChild
// (Final, Native, Public, BlueprintCallable)

void USCListViewWidget::BPF_SelectNextChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SelectNextChild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SelectPreviousChild
// (Final, Native, Public, BlueprintCallable)

void USCListViewWidget::BPF_SelectPreviousChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SelectPreviousChild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SetMaxElements
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iNum                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::BPF_SetMaxElements(int32 _iNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SetMaxElements");

	Params::SCListViewWidget_BPF_SetMaxElements Parms{};

	Parms._iNum = _iNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SetMinElements
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iNum                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::BPF_SetMinElements(int32 _iNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SetMinElements");

	Params::SCListViewWidget_BPF_SetMinElements Parms{};

	Parms._iNum = _iNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SetSelectedChildAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::BPF_SetSelectedChildAt(int32 _iIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SetSelectedChildAt");

	Params::SCListViewWidget_BPF_SetSelectedChildAt Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_SetSources
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class USCViewModel*>&      _source                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USCListViewWidget::BPF_SetSources(const TArray<class USCViewModel*>& _source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_SetSources");

	Params::SCListViewWidget_BPF_SetSources Parms{};

	Parms._source = std::move(_source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.OnChildClicked
// (Final, Native, Private)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::OnChildClicked(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "OnChildClicked");

	Params::SCListViewWidget_OnChildClicked Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.OnChildFocusLost
// (Final, Native, Private)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::OnChildFocusLost(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "OnChildFocusLost");

	Params::SCListViewWidget_OnChildFocusLost Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.OnChildFocusReceived
// (Final, Native, Private)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             _eCause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCListViewWidget::OnChildFocusReceived(class USCUserWidget* _widget, EFocusCause _eCause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "OnChildFocusReceived");

	Params::SCListViewWidget_OnChildFocusReceived Parms{};

	Parms._widget = _widget;
	Parms._eCause = _eCause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCListViewWidget.BPF_GetElementsWidgets
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USCUserWidget*>*           _widgets                                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USCListViewWidget::BPF_GetElementsWidgets(TArray<class USCUserWidget*>* _widgets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_GetElementsWidgets");

	Params::SCListViewWidget_BPF_GetElementsWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_widgets != nullptr)
		*_widgets = std::move(Parms._widgets);
}


// Function SCCore.SCListViewWidget.BPF_GetRootPanel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPanelWidget*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelWidget* USCListViewWidget::BPF_GetRootPanel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_GetRootPanel");

	Params::SCListViewWidget_BPF_GetRootPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCListViewWidget.BPF_GetWidgetAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCUserWidget* USCListViewWidget::BPF_GetWidgetAt(int32 _iIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCListViewWidget", "BPF_GetWidgetAt");

	Params::SCListViewWidget_BPF_GetWidgetAt Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCAnimLookAtHelpers.BPF_ResetTargetTimers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCAnimLookAtHandler&            _handler                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCAnimLookAtHelpers::BPF_ResetTargetTimers(struct FSCAnimLookAtHandler& _handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimLookAtHelpers", "BPF_ResetTargetTimers");

	Params::SCAnimLookAtHelpers_BPF_ResetTargetTimers Parms{};

	Parms._handler = std::move(_handler);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_handler = std::move(Parms._handler);
}


// Function SCCore.SCAnimLookAtHelpers.BPF_SetRawTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCAnimLookAtHandler&            _handler                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCLookAtTargetEnumHandler&_eTargetType                                           (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _target                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimLookAtHelpers::BPF_SetRawTarget(struct FSCAnimLookAtHandler& _handler, const struct FSCLookAtTargetEnumHandler& _eTargetType, class AActor* _target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimLookAtHelpers", "BPF_SetRawTarget");

	Params::SCAnimLookAtHelpers_BPF_SetRawTarget Parms{};

	Parms._handler = std::move(_handler);
	Parms._eTargetType = std::move(_eTargetType);
	Parms._target = _target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_handler = std::move(Parms._handler);
}


// Function SCCore.SCAnimLookAtHelpers.BPF_SetTargetDynamicGetter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCAnimLookAtHandler&            _handler                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCLookAtTargetEnumHandler&_eTargetType                                           (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<const class AActor*()>& _getter                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimLookAtHelpers::BPF_SetTargetDynamicGetter(struct FSCAnimLookAtHandler& _handler, const struct FSCLookAtTargetEnumHandler& _eTargetType, const TDelegate<const class AActor*()>& _getter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimLookAtHelpers", "BPF_SetTargetDynamicGetter");

	Params::SCAnimLookAtHelpers_BPF_SetTargetDynamicGetter Parms{};

	Parms._handler = std::move(_handler);
	Parms._eTargetType = std::move(_eTargetType);
	Parms._getter = _getter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_handler = std::move(Parms._handler);
}


// Function SCCore.SCAnimLookAtHelpers.BPF_UseTargetDefaultData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSCAnimLookAtHandler&            _handler                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSCLookAtTargetEnumHandler&_eTargetType                                           (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCAnimLookAtHelpers::BPF_UseTargetDefaultData(struct FSCAnimLookAtHandler& _handler, const struct FSCLookAtTargetEnumHandler& _eTargetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCAnimLookAtHelpers", "BPF_UseTargetDefaultData");

	Params::SCAnimLookAtHelpers_BPF_UseTargetDefaultData Parms{};

	Parms._handler = std::move(_handler);
	Parms._eTargetType = std::move(_eTargetType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_handler = std::move(Parms._handler);
}


// Function SCCore.SCMaterialSubsystem.BPF_Blend_MaterialParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         _material                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCBlendMaterialSubsystemParamInstance&_params                                                (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialSubsystem::BPF_Blend_MaterialParameter(class UObject* _owner, class UMaterialInstanceDynamic* _material, const struct FSCBlendMaterialSubsystemParamInstance& _params, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialSubsystem", "BPF_Blend_MaterialParameter");

	Params::SCMaterialSubsystem_BPF_Blend_MaterialParameter Parms{};

	Parms._owner = _owner;
	Parms._material = _material;
	Parms._params = std::move(_params);
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialSubsystem.BPF_Blend_Stop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         _material                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bBroacastFinishEvent                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLastUpdateAtEndTime                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialSubsystem::BPF_Blend_Stop(class UObject* _owner, class UMaterialInstanceDynamic* _material, bool _bBroacastFinishEvent, bool _bLastUpdateAtEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialSubsystem", "BPF_Blend_Stop");

	Params::SCMaterialSubsystem_BPF_Blend_Stop Parms{};

	Parms._owner = _owner;
	Parms._material = _material;
	Parms._bBroacastFinishEvent = _bBroacastFinishEvent;
	Parms._bLastUpdateAtEndTime = _bLastUpdateAtEndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMaterialSubsystem.BPF_IsBlending_MaterialParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         _material                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMaterialSubsystem::BPF_IsBlending_MaterialParameter(class UObject* _owner, class UMaterialInstanceDynamic* _material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialSubsystem", "BPF_IsBlending_MaterialParameter");

	Params::SCMaterialSubsystem_BPF_IsBlending_MaterialParameter Parms{};

	Parms._owner = _owner;
	Parms._material = _material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMaterialSubsystem.BPF_Set_MaterialParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         _material                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCBlendMaterialSubsystemParamInstance&_params                                                (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   _fWantedTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       _onFinished                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMaterialSubsystem::BPF_Set_MaterialParameter(class UObject* _owner, class UMaterialInstanceDynamic* _material, const struct FSCBlendMaterialSubsystemParamInstance& _params, float _fWantedTime, TDelegate<void()> _onFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMaterialSubsystem", "BPF_Set_MaterialParameter");

	Params::SCMaterialSubsystem_BPF_Set_MaterialParameter Parms{};

	Parms._owner = _owner;
	Parms._material = _material;
	Parms._params = std::move(_params);
	Parms._fWantedTime = _fWantedTime;
	Parms._onFinished = _onFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMathTools.AngleBetweenVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// double*                                 _fHorizontalAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double*                                 _fVerticalAngle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v1Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v2Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMathTools::AngleBetweenVector(double* _fHorizontalAngle, double* _fVerticalAngle, const struct FVector& _v1Normalized, const struct FVector& _v2Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "AngleBetweenVector");

	Params::SCMathTools_AngleBetweenVector Parms{};

	Parms._v1Normalized = std::move(_v1Normalized);
	Parms._v2Normalized = std::move(_v2Normalized);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fHorizontalAngle != nullptr)
		*_fHorizontalAngle = Parms._fHorizontalAngle;

	if (_fVerticalAngle != nullptr)
		*_fVerticalAngle = Parms._fVerticalAngle;
}


// Function SCCore.SCMathTools.AngleBetweenVectorAbsolute
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _v1Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v2Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vAxisNormalized                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::AngleBetweenVectorAbsolute(const struct FVector& _v1Normalized, const struct FVector& _v2Normalized, const struct FVector& _vAxisNormalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "AngleBetweenVectorAbsolute");

	Params::SCMathTools_AngleBetweenVectorAbsolute Parms{};

	Parms._v1Normalized = std::move(_v1Normalized);
	Parms._v2Normalized = std::move(_v2Normalized);
	Parms._vAxisNormalized = std::move(_vAxisNormalized);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.AngleBetweenVectorHorizontal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _v1Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v2Normalized                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::AngleBetweenVectorHorizontal(const struct FVector& _v1Normalized, const struct FVector& _v2Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "AngleBetweenVectorHorizontal");

	Params::SCMathTools_AngleBetweenVectorHorizontal Parms{};

	Parms._v1Normalized = std::move(_v1Normalized);
	Parms._v2Normalized = std::move(_v2Normalized);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_ClampHorizontalVectorAngle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vFrom                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDir                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMinAngleDeg                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMaxAngleDeg                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::BPF_ClampHorizontalVectorAngle(const struct FVector& _vFrom, const struct FVector& _vDir, float _fMinAngleDeg, float _fMaxAngleDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_ClampHorizontalVectorAngle");

	Params::SCMathTools_BPF_ClampHorizontalVectorAngle Parms{};

	Parms._vFrom = std::move(_vFrom);
	Parms._vDir = std::move(_vDir);
	Parms._fMinAngleDeg = _fMinAngleDeg;
	Parms._fMaxAngleDeg = _fMaxAngleDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_ClearBitMaskFromIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMathTools::BPF_ClearBitMaskFromIndex(int32 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_ClearBitMaskFromIndex");

	Params::SCMathTools_BPF_ClearBitMaskFromIndex Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_ClearBitMaskFromIndex_64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USCMathTools::BPF_ClearBitMaskFromIndex_64(int64 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_ClearBitMaskFromIndex_64");

	Params::SCMathTools_BPF_ClearBitMaskFromIndex_64 Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_ComputeIncrementedIndexInArray
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             _iArrayNum                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             _iCurrentIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iIncrementCount                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMathTools::BPF_ComputeIncrementedIndexInArray(const int32 _iArrayNum, const int32 _iCurrentIndex, int32 _iIncrementCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_ComputeIncrementedIndexInArray");

	Params::SCMathTools_BPF_ComputeIncrementedIndexInArray Parms{};

	Parms._iArrayNum = _iArrayNum;
	Parms._iCurrentIndex = _iCurrentIndex;
	Parms._iIncrementCount = _iIncrementCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_CreateBitMaskFromIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMathTools::BPF_CreateBitMaskFromIndex(uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_CreateBitMaskFromIndex");

	Params::SCMathTools_BPF_CreateBitMaskFromIndex Parms{};

	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_CreateBitMaskFromIndex_64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USCMathTools::BPF_CreateBitMaskFromIndex_64(uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_CreateBitMaskFromIndex_64");

	Params::SCMathTools_BPF_CreateBitMaskFromIndex_64 Parms{};

	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_GaussRand
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fSigma                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::BPF_GaussRand(float _fSigma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GaussRand");

	Params::SCMathTools_BPF_GaussRand Parms{};

	Parms._fSigma = _fSigma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_GetBoundFromFloatRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FFloatRange&               _FloatRange                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutLowerBoundValue                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutUpperBoundValue                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMathTools::BPF_GetBoundFromFloatRange(const struct FFloatRange& _FloatRange, float* _fOutLowerBoundValue, float* _fOutUpperBoundValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetBoundFromFloatRange");

	Params::SCMathTools_BPF_GetBoundFromFloatRange Parms{};

	Parms._FloatRange = std::move(_FloatRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutLowerBoundValue != nullptr)
		*_fOutLowerBoundValue = Parms._fOutLowerBoundValue;

	if (_fOutUpperBoundValue != nullptr)
		*_fOutUpperBoundValue = Parms._fOutUpperBoundValue;
}


// Function SCCore.SCMathTools.BPF_GetFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeFloatCurve&        _curve                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::BPF_GetFloatValue(const struct FRuntimeFloatCurve& _curve, float _fTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetFloatValue");

	Params::SCMathTools_BPF_GetFloatValue Parms{};

	Parms._curve = std::move(_curve);
	Parms._fTime = _fTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_GetLocationAsSphericalUV
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCMathTools::BPF_GetLocationAsSphericalUV(const struct FVector& _vLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetLocationAsSphericalUV");

	Params::SCMathTools_BPF_GetLocationAsSphericalUV Parms{};

	Parms._vLocation = std::move(_vLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_GetRotatorEulerInDouble
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  _inRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// double*                                 _dRoll                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double*                                 _dPitch                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double*                                 _dYaw                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMathTools::BPF_GetRotatorEulerInDouble(const struct FRotator& _inRotation, double* _dRoll, double* _dPitch, double* _dYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetRotatorEulerInDouble");

	Params::SCMathTools_BPF_GetRotatorEulerInDouble Parms{};

	Parms._inRotation = std::move(_inRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_dRoll != nullptr)
		*_dRoll = Parms._dRoll;

	if (_dPitch != nullptr)
		*_dPitch = Parms._dPitch;

	if (_dYaw != nullptr)
		*_dYaw = Parms._dYaw;
}


// Function SCCore.SCMathTools.BPF_GetSplineRatioFromLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           _spline                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRangeMin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRangeMax                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::BPF_GetSplineRatioFromLocation(const struct FVector& _vLocation, const class USplineComponent* _spline, float _fRangeMin, float _fRangeMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetSplineRatioFromLocation");

	Params::SCMathTools_BPF_GetSplineRatioFromLocation Parms{};

	Parms._vLocation = std::move(_vLocation);
	Parms._spline = _spline;
	Parms._fRangeMin = _fRangeMin;
	Parms._fRangeMax = _fRangeMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_GetVectorValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeVectorCurve&       _curve                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::BPF_GetVectorValue(const struct FRuntimeVectorCurve& _curve, float _fTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_GetVectorValue");

	Params::SCMathTools_BPF_GetVectorValue Parms{};

	Parms._curve = std::move(_curve);
	Parms._fTime = _fTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_HasBit
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::BPF_HasBit(int32 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_HasBit");

	Params::SCMathTools_BPF_HasBit Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_HasBit_64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::BPF_HasBit_64(int64 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_HasBit_64");

	Params::SCMathTools_BPF_HasBit_64 Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_IsPointInsideEllipse
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _ellipseTransform                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vEllipseSize                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vPointLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fPointRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::BPF_IsPointInsideEllipse(const struct FTransform& _ellipseTransform, const struct FVector2D& _vEllipseSize, const struct FVector& _vPointLocation, float _fPointRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_IsPointInsideEllipse");

	Params::SCMathTools_BPF_IsPointInsideEllipse Parms{};

	Parms._ellipseTransform = std::move(_ellipseTransform);
	Parms._vEllipseSize = std::move(_vEllipseSize);
	Parms._vPointLocation = std::move(_vPointLocation);
	Parms._fPointRadius = _fPointRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_MakeLowerBoundFloatRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fLowerBound                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFloatRange                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFloatRange USCMathTools::BPF_MakeLowerBoundFloatRange(float _fLowerBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_MakeLowerBoundFloatRange");

	Params::SCMathTools_BPF_MakeLowerBoundFloatRange Parms{};

	Parms._fLowerBound = _fLowerBound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_MakeOpenFloatRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFloatRange                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFloatRange USCMathTools::BPF_MakeOpenFloatRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_MakeOpenFloatRange");

	Params::SCMathTools_BPF_MakeOpenFloatRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_MakeUpperBoundFloatRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fUpperBound                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFloatRange                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFloatRange USCMathTools::BPF_MakeUpperBoundFloatRange(float _fUpperBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_MakeUpperBoundFloatRange");

	Params::SCMathTools_BPF_MakeUpperBoundFloatRange Parms{};

	Parms._fUpperBound = _fUpperBound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_RandomWithWeight
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<float>&                    _weights                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FRandomStream&             _inOutStream                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMathTools::BPF_RandomWithWeight(const TArray<float>& _weights, const struct FRandomStream& _inOutStream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_RandomWithWeight");

	Params::SCMathTools_BPF_RandomWithWeight Parms{};

	Parms._weights = std::move(_weights);
	Parms._inOutStream = std::move(_inOutStream);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_SetBitMaskFromIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCMathTools::BPF_SetBitMaskFromIndex(int32 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_SetBitMaskFromIndex");

	Params::SCMathTools_BPF_SetBitMaskFromIndex Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.BPF_SetBitMaskFromIndex_64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   _iBitMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _iBitIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USCMathTools::BPF_SetBitMaskFromIndex_64(int64 _iBitMask, uint8 _iBitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "BPF_SetBitMaskFromIndex_64");

	Params::SCMathTools_BPF_SetBitMaskFromIndex_64 Parms{};

	Parms._iBitMask = _iBitMask;
	Parms._iBitIndex = _iBitIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ComputeBlendRatio
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fRatio                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCBlendType                            _eBlendType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      _blendCurve                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::ComputeBlendRatio(float _fRatio, ESCBlendType _eBlendType, class UCurveFloat* _blendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ComputeBlendRatio");

	Params::SCMathTools_ComputeBlendRatio Parms{};

	Parms._fRatio = _fRatio;
	Parms._eBlendType = _eBlendType;
	Parms._blendCurve = _blendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ComputeCardinalPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vRefDir                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vOtherVector                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints USCMathTools::ComputeCardinalPoint(const struct FVector& _vRefDir, const struct FVector& _vOtherVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ComputeCardinalPoint");

	Params::SCMathTools_ComputeCardinalPoint Parms{};

	Parms._vRefDir = std::move(_vRefDir);
	Parms._vOtherVector = std::move(_vOtherVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ComputeCardinalPointEastWest
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vRefDir                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vOtherVector                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints USCMathTools::ComputeCardinalPointEastWest(const struct FVector& _vRefDir, const struct FVector& _vOtherVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ComputeCardinalPointEastWest");

	Params::SCMathTools_ComputeCardinalPointEastWest Parms{};

	Parms._vRefDir = std::move(_vRefDir);
	Parms._vOtherVector = std::move(_vOtherVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ComputeCardinalPointWithCustomAngles
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vRefDir                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vOtherVector                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fNorthAngleDeg                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fSouthAngleDeg                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints USCMathTools::ComputeCardinalPointWithCustomAngles(const struct FVector& _vRefDir, const struct FVector& _vOtherVector, float _fNorthAngleDeg, float _fSouthAngleDeg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ComputeCardinalPointWithCustomAngles");

	Params::SCMathTools_ComputeCardinalPointWithCustomAngles Parms{};

	Parms._vRefDir = std::move(_vRefDir);
	Parms._vOtherVector = std::move(_vOtherVector);
	Parms._fNorthAngleDeg = _fNorthAngleDeg;
	Parms._fSouthAngleDeg = _fSouthAngleDeg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.Cursorized
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fLeftMargin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRightMargin                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bClamp                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::Cursorized(float _fValue, float _fLeftMargin, float _fRightMargin, bool _bClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "Cursorized");

	Params::SCMathTools_Cursorized Parms{};

	Parms._fValue = _fValue;
	Parms._fLeftMargin = _fLeftMargin;
	Parms._fRightMargin = _fRightMargin;
	Parms._bClamp = _bClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.FloatCriticalSpringInterp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// double                                  _fCurrent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const double&                           _fTarget                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double&                                 _fInOutVelocity                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _fSpeedFactor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::FloatCriticalSpringInterp(double _fCurrent, const double& _fTarget, double& _fInOutVelocity, double _fSpeedFactor, float _fDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "FloatCriticalSpringInterp");

	Params::SCMathTools_FloatCriticalSpringInterp Parms{};

	Parms._fCurrent = _fCurrent;
	Parms._fTarget = _fTarget;
	Parms._fInOutVelocity = _fInOutVelocity;
	Parms._fSpeedFactor = _fSpeedFactor;
	Parms._fDeltaTime = _fDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_fInOutVelocity = Parms._fInOutVelocity;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetAngle2Pi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  _dAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::GetAngle2Pi(double _dAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetAngle2Pi");

	Params::SCMathTools_GetAngle2Pi Parms{};

	Parms._dAngle = _dAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetAngleBlendWay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fSource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDest                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCRotationWay USCMathTools::GetAngleBlendWay(float _fSource, float _fDest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetAngleBlendWay");

	Params::SCMathTools_GetAngleBlendWay Parms{};

	Parms._fSource = _fSource;
	Parms._fDest = _fDest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetAngleNegPiToPi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  _dAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::GetAngleNegPiToPi(double _dAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetAngleNegPiToPi");

	Params::SCMathTools_GetAngleNegPiToPi Parms{};

	Parms._dAngle = _dAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetBlendAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fSource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDest                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBlendCoef                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCMathTools::GetBlendAngle(float _fSource, float _fDest, float _fBlendCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetBlendAngle");

	Params::SCMathTools_GetBlendAngle Parms{};

	Parms._fSource = _fSource;
	Parms._fDest = _fDest;
	Parms._fBlendCoef = _fBlendCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetBlendAngleForceWay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  _dSource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dDest                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBlendCoef                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          _eBlendWay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iExtra2Pi                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::GetBlendAngleForceWay(double _dSource, double _dDest, float _fBlendCoef, ESCRotationWay _eBlendWay, int32 _iExtra2Pi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetBlendAngleForceWay");

	Params::SCMathTools_GetBlendAngleForceWay Parms{};

	Parms._dSource = _dSource;
	Parms._dDest = _dDest;
	Parms._fBlendCoef = _fBlendCoef;
	Parms._eBlendWay = _eBlendWay;
	Parms._iExtra2Pi = _iExtra2Pi;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetDestinationAngleForceWay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  _dSource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dDest                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          _eBlendWay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iExtra2Pi                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::GetDestinationAngleForceWay(double _dSource, double _dDest, ESCRotationWay _eBlendWay, int32 _iExtra2Pi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetDestinationAngleForceWay");

	Params::SCMathTools_GetDestinationAngleForceWay Parms{};

	Parms._dSource = _dSource;
	Parms._dDest = _dDest;
	Parms._eBlendWay = _eBlendWay;
	Parms._iExtra2Pi = _iExtra2Pi;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetDiffAngleForceWay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  _dSource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _dDest                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCRotationWay                          _eBlendWay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCMathTools::GetDiffAngleForceWay(double _dSource, double _dDest, ESCRotationWay _eBlendWay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetDiffAngleForceWay");

	Params::SCMathTools_GetDiffAngleForceWay Parms{};

	Parms._dSource = _dSource;
	Parms._dDest = _dDest;
	Parms._eBlendWay = _eBlendWay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetGlobalToLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     _qBase                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vGlobal                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetGlobalToLocal(const struct FQuat& _qBase, const struct FVector& _vGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetGlobalToLocal");

	Params::SCMathTools_GetGlobalToLocal Parms{};

	Parms._qBase = std::move(_qBase);
	Parms._vGlobal = std::move(_vGlobal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetGlobalToLocalRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  _rotator                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   _vGlobal                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetGlobalToLocalRotator(const struct FRotator& _rotator, const struct FVector& _vGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetGlobalToLocalRotator");

	Params::SCMathTools_GetGlobalToLocalRotator Parms{};

	Parms._rotator = std::move(_rotator);
	Parms._vGlobal = std::move(_vGlobal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetLocalLookAtYaw
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _fLookAtDirection                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            _fRefBoneYawInDegrees                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMaxAngleInDegrees                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bAlwaysLookAt                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutLocalYaw                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutIsLookAtValid                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMathTools::GetLocalLookAtYaw(const struct FVector& _fLookAtDirection, const float& _fRefBoneYawInDegrees, float _fMaxAngleInDegrees, bool _bAlwaysLookAt, float* _fOutLocalYaw, bool* _bOutIsLookAtValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetLocalLookAtYaw");

	Params::SCMathTools_GetLocalLookAtYaw Parms{};

	Parms._fLookAtDirection = std::move(_fLookAtDirection);
	Parms._fRefBoneYawInDegrees = _fRefBoneYawInDegrees;
	Parms._fMaxAngleInDegrees = _fMaxAngleInDegrees;
	Parms._bAlwaysLookAt = _bAlwaysLookAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_fOutLocalYaw != nullptr)
		*_fOutLocalYaw = Parms._fOutLocalYaw;

	if (_bOutIsLookAtValid != nullptr)
		*_bOutIsLookAtValid = Parms._bOutIsLookAtValid;
}


// Function SCCore.SCMathTools.GetLocalToGlobal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     _qBase                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocal                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetLocalToGlobal(const struct FQuat& _qBase, const struct FVector& _vLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetLocalToGlobal");

	Params::SCMathTools_GetLocalToGlobal Parms{};

	Parms._qBase = std::move(_qBase);
	Parms._vLocal = std::move(_vLocal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetLocalToGlobalRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  _rotator                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocal                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetLocalToGlobalRotator(const struct FRotator& _rotator, const struct FVector& _vLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetLocalToGlobalRotator");

	Params::SCMathTools_GetLocalToGlobalRotator Parms{};

	Parms._rotator = std::move(_rotator);
	Parms._vLocal = std::move(_vLocal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetPlaneFromDir
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDir                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fMaxSlopeAngleInRad                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPlane USCMathTools::GetPlaneFromDir(const struct FVector& _vLocation, const struct FVector& _vDir, float _fMaxSlopeAngleInRad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetPlaneFromDir");

	Params::SCMathTools_GetPlaneFromDir Parms{};

	Parms._vLocation = std::move(_vLocation);
	Parms._vDir = std::move(_vDir);
	Parms._fMaxSlopeAngleInRad = _fMaxSlopeAngleInRad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetPositionGlobalToLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transformBase                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _globalLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetPositionGlobalToLocal(const struct FTransform& _transformBase, const struct FVector& _globalLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetPositionGlobalToLocal");

	Params::SCMathTools_GetPositionGlobalToLocal Parms{};

	Parms._transformBase = std::move(_transformBase);
	Parms._globalLocation = std::move(_globalLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetPositionLocalToGlobal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transformBase                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _localLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::GetPositionLocalToGlobal(const struct FTransform& _transformBase, const struct FVector& _localLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetPositionLocalToGlobal");

	Params::SCMathTools_GetPositionLocalToGlobal Parms{};

	Parms._transformBase = std::move(_transformBase);
	Parms._localLocation = std::move(_localLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetQuat
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transform                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USCMathTools::GetQuat(const struct FTransform& _transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetQuat");

	Params::SCMathTools_GetQuat Parms{};

	Parms._transform = std::move(_transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetQuatGlobalToLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     _qBase                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     _qGlobal                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USCMathTools::GetQuatGlobalToLocal(const struct FQuat& _qBase, const struct FQuat& _qGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetQuatGlobalToLocal");

	Params::SCMathTools_GetQuatGlobalToLocal Parms{};

	Parms._qBase = std::move(_qBase);
	Parms._qGlobal = std::move(_qGlobal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetQuatLocalToGlobal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     _qBase                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     _qLocal                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USCMathTools::GetQuatLocalToGlobal(const struct FQuat& _qBase, const struct FQuat& _qLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetQuatLocalToGlobal");

	Params::SCMathTools_GetQuatLocalToGlobal Parms{};

	Parms._qBase = std::move(_qBase);
	Parms._qLocal = std::move(_qLocal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetTransformGlobalToLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transformBase                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _globalTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCMathTools::GetTransformGlobalToLocal(const struct FTransform& _transformBase, const struct FTransform& _globalTransform, bool _bWithScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetTransformGlobalToLocal");

	Params::SCMathTools_GetTransformGlobalToLocal Parms{};

	Parms._transformBase = std::move(_transformBase);
	Parms._globalTransform = std::move(_globalTransform);
	Parms._bWithScale = _bWithScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.GetTransformLocalToGlobal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _transformBase                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _localTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCMathTools::GetTransformLocalToGlobal(const struct FTransform& _transformBase, const struct FTransform& _localTransform, bool _bWithScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "GetTransformLocalToGlobal");

	Params::SCMathTools_GetTransformLocalToGlobal Parms{};

	Parms._transformBase = std::move(_transformBase);
	Parms._localTransform = std::move(_localTransform);
	Parms._bWithScale = _bWithScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IntersectionCircleCircle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D*                       _vOutPointA                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutPointB                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vCenter1                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fRadius1                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vCenter2                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fRadius2                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IntersectionCircleCircle(struct FVector2D* _vOutPointA, struct FVector2D* _vOutPointB, const struct FVector2D& _vCenter1, const float _fRadius1, const struct FVector2D& _vCenter2, const float _fRadius2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IntersectionCircleCircle");

	Params::SCMathTools_IntersectionCircleCircle Parms{};

	Parms._vCenter1 = std::move(_vCenter1);
	Parms._fRadius1 = _fRadius1;
	Parms._vCenter2 = std::move(_vCenter2);
	Parms._fRadius2 = _fRadius2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutPointA != nullptr)
		*_vOutPointA = std::move(Parms._vOutPointA);

	if (_vOutPointB != nullptr)
		*_vOutPointB = std::move(Parms._vOutPointB);

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IntersectionLineSphereIntersection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector*                         _vOutIntersection1                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutIntersection2                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLineDeltaPosition                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLineDirNormalized                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSphereOrigin                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fSphereRadius                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIgnoreNegativeDot                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IntersectionLineSphereIntersection(struct FVector* _vOutIntersection1, struct FVector* _vOutIntersection2, const struct FVector& _vLineDeltaPosition, const struct FVector& _vLineDirNormalized, const struct FVector& _vSphereOrigin, const float _fSphereRadius, bool _bIgnoreNegativeDot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IntersectionLineSphereIntersection");

	Params::SCMathTools_IntersectionLineSphereIntersection Parms{};

	Parms._vLineDeltaPosition = std::move(_vLineDeltaPosition);
	Parms._vLineDirNormalized = std::move(_vLineDirNormalized);
	Parms._vSphereOrigin = std::move(_vSphereOrigin);
	Parms._fSphereRadius = _fSphereRadius;
	Parms._bIgnoreNegativeDot = _bIgnoreNegativeDot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutIntersection1 != nullptr)
		*_vOutIntersection1 = std::move(Parms._vOutIntersection1);

	if (_vOutIntersection2 != nullptr)
		*_vOutIntersection2 = std::move(Parms._vOutIntersection2);

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IntersectionSegmentSphereIntersection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector*                         _vOutIntersection1                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         _vOutIntersection2                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vStart                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDirNormalized                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _vLength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSphereOrigin                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             _fSphereRadius                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IntersectionSegmentSphereIntersection(struct FVector* _vOutIntersection1, struct FVector* _vOutIntersection2, const struct FVector& _vStart, const struct FVector& _vDirNormalized, float _vLength, const struct FVector& _vSphereOrigin, const float _fSphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IntersectionSegmentSphereIntersection");

	Params::SCMathTools_IntersectionSegmentSphereIntersection Parms{};

	Parms._vStart = std::move(_vStart);
	Parms._vDirNormalized = std::move(_vDirNormalized);
	Parms._vLength = _vLength;
	Parms._vSphereOrigin = std::move(_vSphereOrigin);
	Parms._fSphereRadius = _fSphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutIntersection1 != nullptr)
		*_vOutIntersection1 = std::move(Parms._vOutIntersection1);

	if (_vOutIntersection2 != nullptr)
		*_vOutIntersection2 = std::move(Parms._vOutIntersection2);

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IsBetween
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBound1                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fBound2                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bInclusive                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IsBetween(float _fValue, float _fBound1, float _fBound2, bool _bInclusive, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IsBetween");

	Params::SCMathTools_IsBetween Parms{};

	Parms._fValue = _fValue;
	Parms._fBound1 = _fBound1;
	Parms._fBound2 = _fBound2;
	Parms._bInclusive = _bInclusive;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IsGreaterWithEpsilon
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValueA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValueB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IsGreaterWithEpsilon(float _fValueA, float _fValueB, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IsGreaterWithEpsilon");

	Params::SCMathTools_IsGreaterWithEpsilon Parms{};

	Parms._fValueA = _fValueA;
	Parms._fValueB = _fValueB;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IsLesserWithEpsilon
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValueA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValueB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IsLesserWithEpsilon(float _fValueA, float _fValueB, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IsLesserWithEpsilon");

	Params::SCMathTools_IsLesserWithEpsilon Parms{};

	Parms._fValueA = _fValueA;
	Parms._fValueB = _fValueB;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IsNearlyGreaterOrEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValueA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValueB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IsNearlyGreaterOrEqual(float _fValueA, float _fValueB, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IsNearlyGreaterOrEqual");

	Params::SCMathTools_IsNearlyGreaterOrEqual Parms{};

	Parms._fValueA = _fValueA;
	Parms._fValueB = _fValueB;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.IsNearlyLesserOrEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fValueA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValueB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTolerance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMathTools::IsNearlyLesserOrEqual(float _fValueA, float _fValueB, float _fTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "IsNearlyLesserOrEqual");

	Params::SCMathTools_IsNearlyLesserOrEqual Parms{};

	Parms._fValueA = _fValueA;
	Parms._fValueB = _fValueB;
	Parms._fTolerance = _fTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.LerpTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                _a                                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _b                                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAlpha                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USCMathTools::LerpTransform(const struct FTransform& _a, const struct FTransform& _b, float _fAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "LerpTransform");

	Params::SCMathTools_LerpTransform Parms{};

	Parms._a = std::move(_a);
	Parms._b = std::move(_b);
	Parms._fAlpha = _fAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ProjectPointOnLine
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vA                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vDir                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vPointToTest                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::ProjectPointOnLine(const struct FVector& _vA, const struct FVector& _vDir, const struct FVector& _vPointToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ProjectPointOnLine");

	Params::SCMathTools_ProjectPointOnLine Parms{};

	Parms._vA = std::move(_vA);
	Parms._vDir = std::move(_vDir);
	Parms._vPointToTest = std::move(_vPointToTest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.ProjectPointOnSegment
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   _vA                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vB                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vPointToTest                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::ProjectPointOnSegment(const struct FVector& _vA, const struct FVector& _vB, const struct FVector& _vPointToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "ProjectPointOnSegment");

	Params::SCMathTools_ProjectPointOnSegment Parms{};

	Parms._vA = std::move(_vA);
	Parms._vB = std::move(_vB);
	Parms._vPointToTest = std::move(_vPointToTest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.RotateCardinalPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const ESCCardinalPoints                 _eCardinalPoint                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             _iClockwiseSteps                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCardinalPoints USCMathTools::RotateCardinalPoint(const ESCCardinalPoints _eCardinalPoint, const int32 _iClockwiseSteps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "RotateCardinalPoint");

	Params::SCMathTools_RotateCardinalPoint Parms{};

	Parms._eCardinalPoint = _eCardinalPoint;
	Parms._iClockwiseSteps = _iClockwiseSteps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.Rotator_Quat
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  _rot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USCMathTools::Rotator_Quat(const struct FRotator& _rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "Rotator_Quat");

	Params::SCMathTools_Rotator_Quat Parms{};

	Parms._rot = std::move(_rot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.SelectVector4
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector4&                  _vA                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector4&                  _vB                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSelectA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 USCMathTools::SelectVector4(const struct FVector4& _vA, const struct FVector4& _vB, bool _bSelectA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "SelectVector4");

	Params::SCMathTools_SelectVector4 Parms{};

	Parms._vA = std::move(_vA);
	Parms._vB = std::move(_vB);
	Parms._bSelectA = _bSelectA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMathTools.VectorCriticalSpringInterp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   _vCurrent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vTarget                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector&                         _vInOutVelocity                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  _fSpeedFactor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USCMathTools::VectorCriticalSpringInterp(const struct FVector& _vCurrent, const struct FVector& _vTarget, struct FVector& _vInOutVelocity, double _fSpeedFactor, float _fDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMathTools", "VectorCriticalSpringInterp");

	Params::SCMathTools_VectorCriticalSpringInterp Parms{};

	Parms._vCurrent = std::move(_vCurrent);
	Parms._vTarget = std::move(_vTarget);
	Parms._vInOutVelocity = std::move(_vInOutVelocity);
	Parms._fSpeedFactor = _fSpeedFactor;
	Parms._fDeltaTime = _fDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_vInOutVelocity = std::move(Parms._vInOutVelocity);

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuAction.BPE_OnActionTriggered
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UObject*                          _worldContext                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    _instigator                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuAction::BPE_OnActionTriggered(class UObject* _worldContext, class USCUserWidget* _instigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuAction", "BPE_OnActionTriggered");

	Params::SCMenuAction_BPE_OnActionTriggered Parms{};

	Parms._worldContext = _worldContext;
	Parms._instigator = _instigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCMenuComponent.BPE_OnCurrentMenuChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _prevMenu                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCMenuWidget>        _newMenu                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::BPE_OnCurrentMenuChanged(TSubclassOf<class USCMenuWidget> _prevMenu, TSubclassOf<class USCMenuWidget> _newMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPE_OnCurrentMenuChanged");

	Params::SCMenuComponent_BPE_OnCurrentMenuChanged Parms{};

	Parms._prevMenu = _prevMenu;
	Parms._newMenu = _newMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCMenuComponent.BPF_ClearMenuStack
// (Final, Native, Public, BlueprintCallable)

void USCMenuComponent::BPF_ClearMenuStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_ClearMenuStack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_GetOrCreateMenuInstance
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCMenuComponent::BPF_GetOrCreateMenuInstance(TSubclassOf<class USCMenuWidget> _menuClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetOrCreateMenuInstance");

	Params::SCMenuComponent_BPF_GetOrCreateMenuInstance Parms{};

	Parms._menuClass = _menuClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_PopMenu
// (Final, Native, Public, BlueprintCallable)

void USCMenuComponent::BPF_PopMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_PopMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_PopMenuStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuEnum                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncluded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::BPF_PopMenuStack(TSubclassOf<class USCMenuWidget> _menuEnum, bool _bIncluded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_PopMenuStack");

	Params::SCMenuComponent_BPF_PopMenuStack Parms{};

	Parms._menuEnum = _menuEnum;
	Parms._bIncluded = _bIncluded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_PushMenu
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menu                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSetUIInputMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     _container                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCMenuComponent::BPF_PushMenu(TSubclassOf<class USCMenuWidget> _menu, bool _bSetUIInputMode, class UPanelWidget* _container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_PushMenu");

	Params::SCMenuComponent_BPF_PushMenu Parms{};

	Parms._menu = _menu;
	Parms._bSetUIInputMode = _bSetUIInputMode;
	Parms._container = _container;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_RemoveMenuFromStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuEnum                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::BPF_RemoveMenuFromStack(TSubclassOf<class USCMenuWidget> _menuEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_RemoveMenuFromStack");

	Params::SCMenuComponent_BPF_RemoveMenuFromStack Parms{};

	Parms._menuEnum = _menuEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_SetCurrentMenu
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuEnum                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::BPF_SetCurrentMenu(TSubclassOf<class USCMenuWidget> _menuEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_SetCurrentMenu");

	Params::SCMenuComponent_BPF_SetCurrentMenu Parms{};

	Parms._menuEnum = _menuEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_SetUIInputModeEnabled
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menu                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::BPF_SetUIInputModeEnabled(TSubclassOf<class USCMenuWidget> _menu, bool _bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_SetUIInputModeEnabled");

	Params::SCMenuComponent_BPF_SetUIInputModeEnabled Parms{};

	Parms._menu = _menu;
	Parms._bEnabled = _bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.OnTransitionOutFinished
// (Final, Native, Protected)
// Parameters:
// class USCMenuWidget*                    _menu                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMenuComponent::OnTransitionOutFinished(class USCMenuWidget* _menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "OnTransitionOutFinished");

	Params::SCMenuComponent_OnTransitionOutFinished Parms{};

	Parms._menu = _menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMenuComponent.BPF_GetCurrentMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCMenuWidget>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCMenuWidget> USCMenuComponent::BPF_GetCurrentMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetCurrentMenu");

	Params::SCMenuComponent_BPF_GetCurrentMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_GetMenuInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuEnum                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCMenuComponent::BPF_GetMenuInstance(TSubclassOf<class USCMenuWidget> _menuEnum) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetMenuInstance");

	Params::SCMenuComponent_BPF_GetMenuInstance Parms{};

	Parms._menuEnum = _menuEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_GetParentMenu
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCMenuWidget>*       _outMenuEnum                                           (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCMenuComponent::BPF_GetParentMenu(TSubclassOf<class USCMenuWidget>* _outMenuEnum, int32 _iOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetParentMenu");

	Params::SCMenuComponent_BPF_GetParentMenu Parms{};

	Parms._iOffset = _iOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outMenuEnum != nullptr)
		*_outMenuEnum = Parms._outMenuEnum;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_GetTopMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCMenuWidget>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USCMenuWidget> USCMenuComponent::BPF_GetTopMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetTopMenu");

	Params::SCMenuComponent_BPF_GetTopMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_GetTopMenuInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCMenuWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuWidget* USCMenuComponent::BPF_GetTopMenuInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_GetTopMenuInstance");

	Params::SCMenuComponent_BPF_GetTopMenuInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMenuComponent.BPF_IsMenuInStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USCMenuWidget>        _menuClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMenuComponent::BPF_IsMenuInStack(TSubclassOf<class USCMenuWidget> _menuClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCMenuComponent", "BPF_IsMenuInStack");

	Params::SCMenuComponent_BPF_IsMenuInStack Parms{};

	Parms._menuClass = _menuClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMovieSceneHelpers.BPF_GetBindingIDsFromName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UMovieSceneSequence*        _rootSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _bindingName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneObjectBindingID>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMovieSceneObjectBindingID> USCMovieSceneHelpers::BPF_GetBindingIDsFromName(const class UMovieSceneSequence* _rootSequence, class FName _bindingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMovieSceneHelpers", "BPF_GetBindingIDsFromName");

	Params::SCMovieSceneHelpers_BPF_GetBindingIDsFromName Parms{};

	Parms._rootSequence = _rootSequence;
	Parms._bindingName = _bindingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMovieSceneHelpers.BPF_IsSkippingPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMovieSceneSequencePlayer*        _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCMovieSceneHelpers::BPF_IsSkippingPlayer(class UMovieSceneSequencePlayer* _player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMovieSceneHelpers", "BPF_IsSkippingPlayer");

	Params::SCMovieSceneHelpers_BPF_IsSkippingPlayer Parms{};

	Parms._player = _player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCMovieSceneHelpers.BPF_SkipSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMovieSceneSequencePlayer*        _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fEndOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bStopAtCinematicModeEnded                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMovieSceneHelpers::BPF_SkipSequence(class UMovieSceneSequencePlayer* _player, float _fEndOffset, bool _bStopAtCinematicModeEnded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMovieSceneHelpers", "BPF_SkipSequence");

	Params::SCMovieSceneHelpers_BPF_SkipSequence Parms{};

	Parms._player = _player;
	Parms._fEndOffset = _fEndOffset;
	Parms._bStopAtCinematicModeEnded = _bStopAtCinematicModeEnded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCMovieSceneHelpers.BPF_UnbindActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULevelSequenceDirector*     _director                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCMovieSceneHelpers::BPF_UnbindActor(const class ULevelSequenceDirector* _director, class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCMovieSceneHelpers", "BPF_UnbindActor");

	Params::SCMovieSceneHelpers_BPF_UnbindActor Parms{};

	Parms._director = _director;
	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCNetBlendingFloatLibrary.BPF_GetNetBlendingFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCNetBlendingFloat&       _inNetBlendingFloat                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   _fTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCNetBlendingFloatLibrary::BPF_GetNetBlendingFloatValue(const struct FSCNetBlendingFloat& _inNetBlendingFloat, float _fTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCNetBlendingFloatLibrary", "BPF_GetNetBlendingFloatValue");

	Params::SCNetBlendingFloatLibrary_BPF_GetNetBlendingFloatValue Parms{};

	Parms._inNetBlendingFloat = std::move(_inNetBlendingFloat);
	Parms._fTime = _fTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerformanceTelemetry.BPF_CsvEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPerformanceTelemetry::BPF_CsvEvent(const class FString& _name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPerformanceTelemetry", "BPF_CsvEvent");

	Params::SCPerformanceTelemetry_BPF_CsvEvent Parms{};

	Parms._name = std::move(_name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_IsPerfSessionRunning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCPerformanceTelemetry::BPF_IsPerfSessionRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPerformanceTelemetry", "BPF_IsPerfSessionRunning");

	Params::SCPerformanceTelemetry_BPF_IsPerfSessionRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StartPerfSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCTelemetryExternalProfiler            _eExternalProfiler                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPerformanceTelemetry::BPF_StartPerfSession(const class FString& _name, ESCTelemetryExternalProfiler _eExternalProfiler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPerformanceTelemetry", "BPF_StartPerfSession");

	Params::SCPerformanceTelemetry_BPF_StartPerfSession Parms{};

	Parms._name = std::move(_name);
	Parms._eExternalProfiler = _eExternalProfiler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StopPerfSession
// (Final, Native, Static, Public, BlueprintCallable)

void USCPerformanceTelemetry::BPF_StopPerfSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPerformanceTelemetry", "BPF_StopPerfSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_PauseInsightProfile
// (Native, Public, BlueprintCallable)

void USCPerformanceTelemetry::BPF_PauseInsightProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_PauseInsightProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_ResumeInsightProfile
// (Native, Public, BlueprintCallable)

void USCPerformanceTelemetry::BPF_ResumeInsightProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_ResumeInsightProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StartInsightToFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _file                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPerformanceTelemetry::BPF_StartInsightToFile(const class FString& _file)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_StartInsightToFile");

	Params::SCPerformanceTelemetry_BPF_StartInsightToFile Parms{};

	Parms._file = std::move(_file);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StartInsightToNetwork
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _host                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPerformanceTelemetry::BPF_StartInsightToNetwork(const class FString& _host)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_StartInsightToNetwork");

	Params::SCPerformanceTelemetry_BPF_StartInsightToNetwork Parms{};

	Parms._host = std::move(_host);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StartSuperluminalCapture
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iMaxDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPerformanceTelemetry::BPF_StartSuperluminalCapture(int32 _iMaxDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_StartSuperluminalCapture");

	Params::SCPerformanceTelemetry_BPF_StartSuperluminalCapture Parms{};

	Parms._iMaxDuration = _iMaxDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_StopInsightProfile
// (Final, Native, Public, BlueprintCallable)

void USCPerformanceTelemetry::BPF_StopInsightProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_StopInsightProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPerformanceTelemetry.BPF_IsInsightProfiling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCPerformanceTelemetry::BPF_IsInsightProfiling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_IsInsightProfiling");

	Params::SCPerformanceTelemetry_BPF_IsInsightProfiling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerformanceTelemetry.BPF_IsSuperluminalCaptureRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCPerformanceTelemetry::BPF_IsSuperluminalCaptureRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceTelemetry", "BPF_IsSuperluminalCaptureRunning");

	Params::SCPerformanceTelemetry_BPF_IsSuperluminalCaptureRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPlayerCameraManager.OnPossessedPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            _oldPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            _newPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCPlayerCameraManager::OnPossessedPawnChanged(class APawn* _oldPawn, class APawn* _newPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayerCameraManager", "OnPossessedPawnChanged");

	Params::SCPlayerCameraManager_OnPossessedPawnChanged Parms{};

	Parms._oldPawn = _oldPawn;
	Parms._newPawn = _newPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPlayerInput.BPF_SwapPIEControllers
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    _bReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPlayerInput::BPF_SwapPIEControllers(bool _bReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPlayerInput", "BPF_SwapPIEControllers");

	Params::SCPlayerInput_BPF_SwapPIEControllers Parms{};

	Parms._bReverse = _bReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPlayerInput.BPF_GetInputDataForAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCInputAction*                   _eAction                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputConditionData*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputConditionData* USCPlayerInput::BPF_GetInputDataForAction(class USCInputAction* _eAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayerInput", "BPF_GetInputDataForAction");

	Params::SCPlayerInput_BPF_GetInputDataForAction Parms{};

	Parms._eAction = _eAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPlayersScoreSubsystem.OnClientPlayerInitialReplication
// (Final, Native, Protected)
// Parameters:
// class ASCPlayerState*                   _playerState                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPlayersScoreSubsystem::OnClientPlayerInitialReplication(class ASCPlayerState* _playerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayersScoreSubsystem", "OnClientPlayerInitialReplication");

	Params::SCPlayersScoreSubsystem_OnClientPlayerInitialReplication Parms{};

	Parms._playerState = _playerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPlayersScoreSubsystem.OnIsSpectatorReplicated
// (Final, Native, Protected)
// Parameters:
// class ASCPlayerState*                   _playerState                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPlayersScoreSubsystem::OnIsSpectatorReplicated(class ASCPlayerState* _playerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayersScoreSubsystem", "OnIsSpectatorReplicated");

	Params::SCPlayersScoreSubsystem_OnIsSpectatorReplicated Parms{};

	Parms._playerState = _playerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPlayersScoreSubsystem.BPF_GetScoreEventInfos
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>&      _softStatClass                                         (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCScoreEventInfos               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSCScoreEventInfos USCPlayersScoreSubsystem::BPF_GetScoreEventInfos(const TSoftClassPtr<class UClass>& _softStatClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayersScoreSubsystem", "BPF_GetScoreEventInfos");

	Params::SCPlayersScoreSubsystem_BPF_GetScoreEventInfos Parms{};

	Parms._softStatClass = _softStatClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPlayersScoreSubsystem.BPF_GetScoreFromEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>&      _softStatClass                                         (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCPlayersScoreSubsystem::BPF_GetScoreFromEvent(const TSoftClassPtr<class UClass>& _softStatClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayersScoreSubsystem", "BPF_GetScoreFromEvent");

	Params::SCPlayersScoreSubsystem_BPF_GetScoreFromEvent Parms{};

	Parms._softStatClass = _softStatClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPlayerVolumeActor.BPF_GetPlayerVolumeComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCPlayerVolumeComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCPlayerVolumeComponent* ASCPlayerVolumeActor::BPF_GetPlayerVolumeComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPlayerVolumeActor", "BPF_GetPlayerVolumeComponent");

	Params::SCPlayerVolumeActor_BPF_GetPlayerVolumeComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolableActor.OnPoolablePostInitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActor::OnPoolablePostInitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActor", "OnPoolablePostInitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolableActor.OnPoolablePostUninitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActor::OnPoolablePostUninitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActor", "OnPoolablePostUninitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolableActor.OnPoolablePreInitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActor::OnPoolablePreInitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActor", "OnPoolablePreInitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolableActor.OnPoolablePreUninitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActor::OnPoolablePreUninitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActor", "OnPoolablePreUninitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolableActorComponent.OnPoolableOwnerInitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActorComponent::OnPoolableOwnerInitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActorComponent", "OnPoolableOwnerInitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolableActorComponent.OnPoolableOwnerUninitializeComponents
// (Native, Event, Public, BlueprintEvent)

void ISCPoolableActorComponent::OnPoolableOwnerUninitializeComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SCPoolableActorComponent", "OnPoolableOwnerUninitializeComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPoolHelpers.BPF_DestroyPoolableActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutWasPooled                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPoolHelpers::BPF_DestroyPoolableActor(class AActor* _actor, bool* _bOutWasPooled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPoolHelpers", "BPF_DestroyPoolableActor");

	Params::SCPoolHelpers_BPF_DestroyPoolableActor Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutWasPooled != nullptr)
		*_bOutWasPooled = Parms._bOutWasPooled;
}


// Function SCCore.SCPoolHelpers.BPF_GetPoolContextInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           _class                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  _iActiveCount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  _iInativeActiveCount                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPoolHelpers::BPF_GetPoolContextInfos(class UClass* _class, int32* _iActiveCount, int32* _iInativeActiveCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPoolHelpers", "BPF_GetPoolContextInfos");

	Params::SCPoolHelpers_BPF_GetPoolContextInfos Parms{};

	Parms._class = _class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_iActiveCount != nullptr)
		*_iActiveCount = Parms._iActiveCount;

	if (_iInativeActiveCount != nullptr)
		*_iInativeActiveCount = Parms._iInativeActiveCount;
}


// Function SCCore.SCPoolHelpers.BPF_IsActorPooled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutIsActive                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCPoolHelpers::BPF_IsActorPooled(const class AActor* _actor, bool* _bOutIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPoolHelpers", "BPF_IsActorPooled");

	Params::SCPoolHelpers_BPF_IsActorPooled Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutIsActive != nullptr)
		*_bOutIsActive = Parms._bOutIsActive;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolHelpers.BPF_IsActorValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCPoolHelpers::BPF_IsActorValid(const class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPoolHelpers", "BPF_IsActorValid");

	Params::SCPoolHelpers_BPF_IsActorValid Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPoolHelpers.BPF_SpawnPoolableActor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           _worldCtxt                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           _class                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                _transform                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _poolName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bGrow                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bFailIfNoPoolFound                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USCPoolHelpers::BPF_SpawnPoolableActor(class AActor* _worldCtxt, class UClass* _class, const struct FTransform& _transform, class FName _poolName, bool _bGrow, bool _bFailIfNoPoolFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPoolHelpers", "BPF_SpawnPoolableActor");

	Params::SCPoolHelpers_BPF_SpawnPoolableActor Parms{};

	Parms._worldCtxt = _worldCtxt;
	Parms._class = _class;
	Parms._transform = std::move(_transform);
	Parms._poolName = _poolName;
	Parms._bGrow = _bGrow;
	Parms._bFailIfNoPoolFound = _bFailIfNoPoolFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPopupWidget.OnPopupValidated
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCInputAction*             _inputAction                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidget::OnPopupValidated(const struct FGameplayTag& _tag, const class USCInputAction* _inputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidget", "OnPopupValidated");

	Params::SCPopupWidget_OnPopupValidated Parms{};

	Parms._tag = std::move(_tag);
	Parms._inputAction = _inputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPopupWidgetComponent.BPF_ShowPopup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _inPlayerController                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCPopupContent&           _content                                               (Parm, NativeAccessSpecifierPublic)
// struct FGameplayTag*                    _outSelectedOptionTag                                  (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction**                  _outSelectedAction                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USCGameFlowSubsystem*             _gameFlowSystem                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_ShowPopup(const class APlayerController* _inPlayerController, const struct FSCPopupContent& _content, struct FGameplayTag* _outSelectedOptionTag, class USCInputAction** _outSelectedAction, const struct FLatentActionInfo& _inLatentInfo, class USCGameFlowSubsystem* _gameFlowSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPopupWidgetComponent", "BPF_ShowPopup");

	Params::SCPopupWidgetComponent_BPF_ShowPopup Parms{};

	Parms._inPlayerController = _inPlayerController;
	Parms._content = std::move(_content);
	Parms._inLatentInfo = std::move(_inLatentInfo);
	Parms._gameFlowSystem = _gameFlowSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSelectedOptionTag != nullptr)
		*_outSelectedOptionTag = std::move(Parms._outSelectedOptionTag);

	if (_outSelectedAction != nullptr)
		*_outSelectedAction = Parms._outSelectedAction;
}


// Function SCCore.SCPopupWidgetComponent.BPF_ShowPopupByTemplate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _inPlayerController                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _templateTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _titleOverride                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      _messageOverride                                       (Parm, NativeAccessSpecifierPublic)
// class UTexture2D*                       _iconOverride                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag*                    _outSelectedOptionTag                                  (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction**                  _outSelectedAction                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FName, class USCViewModel*>&_viewModels                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_ShowPopupByTemplate(const class APlayerController* _inPlayerController, const struct FGameplayTag& _templateTag, const class FText& _titleOverride, const class FText& _messageOverride, class UTexture2D* _iconOverride, struct FGameplayTag* _outSelectedOptionTag, class USCInputAction** _outSelectedAction, const struct FLatentActionInfo& _inLatentInfo, const TMap<class FName, class USCViewModel*>& _viewModels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPopupWidgetComponent", "BPF_ShowPopupByTemplate");

	Params::SCPopupWidgetComponent_BPF_ShowPopupByTemplate Parms{};

	Parms._inPlayerController = _inPlayerController;
	Parms._templateTag = std::move(_templateTag);
	Parms._titleOverride = std::move(_titleOverride);
	Parms._messageOverride = std::move(_messageOverride);
	Parms._iconOverride = _iconOverride;
	Parms._inLatentInfo = std::move(_inLatentInfo);
	Parms._viewModels = std::move(_viewModels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSelectedOptionTag != nullptr)
		*_outSelectedOptionTag = std::move(Parms._outSelectedOptionTag);

	if (_outSelectedAction != nullptr)
		*_outSelectedAction = Parms._outSelectedAction;
}


// Function SCCore.SCPopupWidgetComponent.BPF_ShowPopupByTemplateOnSpecificGameFlow
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _inPlayerController                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _templateTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _titleOverride                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      _messageOverride                                       (Parm, NativeAccessSpecifierPublic)
// class UTexture2D*                       _iconOverride                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag*                    _outSelectedOptionTag                                  (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction**                  _outSelectedAction                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         _inLatentInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FName, class USCViewModel*>&_viewModels                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USCGameFlowSubsystem*             _gameFlowSystem                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_ShowPopupByTemplateOnSpecificGameFlow(const class APlayerController* _inPlayerController, const struct FGameplayTag& _templateTag, const class FText& _titleOverride, const class FText& _messageOverride, class UTexture2D* _iconOverride, struct FGameplayTag* _outSelectedOptionTag, class USCInputAction** _outSelectedAction, const struct FLatentActionInfo& _inLatentInfo, const TMap<class FName, class USCViewModel*>& _viewModels, class USCGameFlowSubsystem* _gameFlowSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCPopupWidgetComponent", "BPF_ShowPopupByTemplateOnSpecificGameFlow");

	Params::SCPopupWidgetComponent_BPF_ShowPopupByTemplateOnSpecificGameFlow Parms{};

	Parms._inPlayerController = _inPlayerController;
	Parms._templateTag = std::move(_templateTag);
	Parms._titleOverride = std::move(_titleOverride);
	Parms._messageOverride = std::move(_messageOverride);
	Parms._iconOverride = _iconOverride;
	Parms._inLatentInfo = std::move(_inLatentInfo);
	Parms._viewModels = std::move(_viewModels);
	Parms._gameFlowSystem = _gameFlowSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outSelectedOptionTag != nullptr)
		*_outSelectedOptionTag = std::move(Parms._outSelectedOptionTag);

	if (_outSelectedAction != nullptr)
		*_outSelectedAction = Parms._outSelectedAction;
}


// Function SCCore.SCPopupWidgetComponent.BPF_RegisterOptionWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCButtonUserWidget*              _buttonWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_RegisterOptionWidget(class USCButtonUserWidget* _buttonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidgetComponent", "BPF_RegisterOptionWidget");

	Params::SCPopupWidgetComponent_BPF_RegisterOptionWidget Parms{};

	Parms._buttonWidget = _buttonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPopupWidgetComponent.BPF_ValidateOptionByAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class USCInputAction*             _inputAction                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_ValidateOptionByAction(const class USCInputAction* _inputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidgetComponent", "BPF_ValidateOptionByAction");

	Params::SCPopupWidgetComponent_BPF_ValidateOptionByAction Parms{};

	Parms._inputAction = _inputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPopupWidgetComponent.BPF_ValidateOptionByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _tag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::BPF_ValidateOptionByTag(const struct FGameplayTag& _tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidgetComponent", "BPF_ValidateOptionByTag");

	Params::SCPopupWidgetComponent_BPF_ValidateOptionByTag Parms{};

	Parms._tag = std::move(_tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPopupWidgetComponent.OnActionPressed
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USCInputAction*             _inputAction                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputActionState&         _listenerState                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::OnActionPressed(class USCUserWidget* _widget, const class USCInputAction* _inputAction, const struct FInputActionState& _listenerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidgetComponent", "OnActionPressed");

	Params::SCPopupWidgetComponent_OnActionPressed Parms{};

	Parms._widget = _widget;
	Parms._inputAction = _inputAction;
	Parms._listenerState = std::move(_listenerState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCPopupWidgetComponent.OnClickedOptionButton
// (Final, Native, Private)
// Parameters:
// class USCButtonUserWidget*              _button                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWithMouse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCPopupWidgetComponent::OnClickedOptionButton(class USCButtonUserWidget* _button, bool _bWithMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPopupWidgetComponent", "OnClickedOptionButton");

	Params::SCPopupWidgetComponent_OnClickedOptionButton Parms{};

	Parms._button = _button;
	Parms._bWithMouse = _bWithMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCReplayHelper.BPF_IsInReplayMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCReplayHelper::BPF_IsInReplayMode(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCReplayHelper", "BPF_IsInReplayMode");

	Params::SCReplayHelper_BPF_IsInReplayMode Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCReplayHelper.BPF_IsReplayPlaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCReplayHelper::BPF_IsReplayPlaying(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCReplayHelper", "BPF_IsReplayPlaying");

	Params::SCReplayHelper_BPF_IsReplayPlaying Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCReplayHelper.BPF_IsReplayRecording
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCReplayHelper::BPF_IsReplayRecording(const class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCReplayHelper", "BPF_IsReplayRecording");

	Params::SCReplayHelper_BPF_IsReplayRecording Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveObjectPlayerProfile.BPF_RemoveSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveObjectPlayerProfile::BPF_RemoveSave(const class FString& _saveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObjectPlayerProfile", "BPF_RemoveSave");

	Params::SCSaveObjectPlayerProfile_BPF_RemoveSave Parms{};

	Parms._saveName = std::move(_saveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveObjectPlayerProfile.BPF_FindSaveByFileName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bFound                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCharacterSaveDescription        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCharacterSaveDescription USCSaveObjectPlayerProfile::BPF_FindSaveByFileName(const class FString& _fileName, bool* _bFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObjectPlayerProfile", "BPF_FindSaveByFileName");

	Params::SCSaveObjectPlayerProfile_BPF_FindSaveByFileName Parms{};

	Parms._fileName = std::move(_fileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bFound != nullptr)
		*_bFound = Parms._bFound;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveObjectPlayerProfile.BPF_IsSaveValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bTreatBackup                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveObjectPlayerProfile::BPF_IsSaveValid(const class FString& _saveName, bool _bTreatBackup) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveObjectPlayerProfile", "BPF_IsSaveValid");

	Params::SCSaveObjectPlayerProfile_BPF_IsSaveValid Parms{};

	Parms._saveName = std::move(_saveName);
	Parms._bTreatBackup = _bTreatBackup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GenerateIndexFromSaveName
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCSaveSubsystem::BPF_GenerateIndexFromSaveName(const class FString& _saveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSaveSubsystem", "BPF_GenerateIndexFromSaveName");

	Params::SCSaveSubsystem_BPF_GenerateIndexFromSaveName Parms{};

	Parms._saveName = std::move(_saveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_SwapSaveNameToAndFromBackup
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class FString&                    _currentSaveName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveSubsystem::BPF_SwapSaveNameToAndFromBackup(const class FString& _currentSaveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSaveSubsystem", "BPF_SwapSaveNameToAndFromBackup");

	Params::SCSaveSubsystem_BPF_SwapSaveNameToAndFromBackup Parms{};

	Parms._currentSaveName = std::move(_currentSaveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_ApplyPendingOptionsInSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bSave                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bApplyVideoSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_ApplyPendingOptionsInSave(bool _bSave, bool _bApplyVideoSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_ApplyPendingOptionsInSave");

	Params::SCSaveSubsystem_BPF_ApplyPendingOptionsInSave Parms{};

	Parms._bSave = _bSave;
	Parms._bApplyVideoSettings = _bApplyVideoSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_CreateNewPendingOptionsFromSave
// (Final, Native, Public, BlueprintCallable)

void USCSaveSubsystem::BPF_CreateNewPendingOptionsFromSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_CreateNewPendingOptionsFromSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_GetCrossplayWarningSeen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_GetCrossplayWarningSeen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetCrossplayWarningSeen");

	Params::SCSaveSubsystem_BPF_GetCrossplayWarningSeen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetFirstLaunchPassed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_GetFirstLaunchPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetFirstLaunchPassed");

	Params::SCSaveSubsystem_BPF_GetFirstLaunchPassed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetPreferredRegion
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveSubsystem::BPF_GetPreferredRegion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetPreferredRegion");

	Params::SCSaveSubsystem_BPF_GetPreferredRegion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_LoadSubsystemFromSaveGameObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USCSubsystem*                     _subsystem                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_LoadSubsystemFromSaveGameObject(class USCSubsystem* _subsystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_LoadSubsystemFromSaveGameObject");

	Params::SCSaveSubsystem_BPF_LoadSubsystemFromSaveGameObject Parms{};

	Parms._subsystem = _subsystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_LoadSubsystemsFromSaveGameObject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagContainer                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_LoadSubsystemsFromSaveGameObject(const struct FGameplayTagContainer& _tagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_LoadSubsystemsFromSaveGameObject");

	Params::SCSaveSubsystem_BPF_LoadSubsystemsFromSaveGameObject Parms{};

	Parms._tagContainer = std::move(_tagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestCreateProfile
// (Final, Native, Public, BlueprintCallable)

void USCSaveSubsystem::BPF_RequestCreateProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestCreateProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestCreateSaveGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iSaveIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestCreateSaveGame(int32 _iSaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestCreateSaveGame");

	Params::SCSaveSubsystem_BPF_RequestCreateSaveGame Parms{};

	Parms._iSaveIndex = _iSaveIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestDumpSaveInLog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestDumpSaveInLog(const class FString& _saveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestDumpSaveInLog");

	Params::SCSaveSubsystem_BPF_RequestDumpSaveInLog Parms{};

	Parms._saveName = std::move(_saveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestLoad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _saveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     _tagContainer                                          (Parm, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestLoad(const class FString& _saveName, const struct FGameplayTagContainer& _tagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestLoad");

	Params::SCSaveSubsystem_BPF_RequestLoad Parms{};

	Parms._saveName = std::move(_saveName);
	Parms._tagContainer = std::move(_tagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestLoadFirstSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagContainer                                          (Parm, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestLoadFirstSave(const struct FGameplayTagContainer& _tagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestLoadFirstSave");

	Params::SCSaveSubsystem_BPF_RequestLoadFirstSave Parms{};

	Parms._tagContainer = std::move(_tagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestLoadProfile
// (Final, Native, Public, BlueprintCallable)

void USCSaveSubsystem::BPF_RequestLoadProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestLoadProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestResetFromTagContainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _resetTagsContainer                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestResetFromTagContainer(const struct FGameplayTagContainer& _resetTagsContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestResetFromTagContainer");

	Params::SCSaveSubsystem_BPF_RequestResetFromTagContainer Parms{};

	Parms._resetTagsContainer = std::move(_resetTagsContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestSaveGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iSaveChunksBitmask                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestSaveGame(int32 _iSaveChunksBitmask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestSaveGame");

	Params::SCSaveSubsystem_BPF_RequestSaveGame Parms{};

	Parms._iSaveChunksBitmask = _iSaveChunksBitmask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RequestSaveGameFromTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     _tagContainer                                          (Parm, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_RequestSaveGameFromTag(const struct FGameplayTagContainer& _tagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RequestSaveGameFromTag");

	Params::SCSaveSubsystem_BPF_RequestSaveGameFromTag Parms{};

	Parms._tagContainer = std::move(_tagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_RestoreGameSettingsWithDefault
// (Final, Native, Public, BlueprintCallable)

void USCSaveSubsystem::BPF_RestoreGameSettingsWithDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_RestoreGameSettingsWithDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_SetCrossplayWarningSeen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bSeenCrossplayWarning                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_SetCrossplayWarningSeen(bool _bSeenCrossplayWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_SetCrossplayWarningSeen");

	Params::SCSaveSubsystem_BPF_SetCrossplayWarningSeen Parms{};

	Parms._bSeenCrossplayWarning = _bSeenCrossplayWarning;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_SetFirstLaunchPassed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bPassedFirstLaunch                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_SetFirstLaunchPassed(bool _bPassedFirstLaunch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_SetFirstLaunchPassed");

	Params::SCSaveSubsystem_BPF_SetFirstLaunchPassed Parms{};

	Parms._bPassedFirstLaunch = _bPassedFirstLaunch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_SetIsSavingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bIsSavingEnabled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_SetIsSavingEnabled(bool _bIsSavingEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_SetIsSavingEnabled");

	Params::SCSaveSubsystem_BPF_SetIsSavingEnabled Parms{};

	Parms._bIsSavingEnabled = _bIsSavingEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_SetPreferredRegion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _preferredRegion                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_SetPreferredRegion(const class FString& _preferredRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_SetPreferredRegion");

	Params::SCSaveSubsystem_BPF_SetPreferredRegion Parms{};

	Parms._preferredRegion = std::move(_preferredRegion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_TryApplyGameOptionsOnSaveLoad
// (Final, Native, Public, BlueprintCallable)

void USCSaveSubsystem::BPF_TryApplyGameOptionsOnSaveLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_TryApplyGameOptionsOnSaveLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_TryFirstLoadProfileOrCreateNewSynchronous
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    _bCreateIfNotFound                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::BPF_TryFirstLoadProfileOrCreateNewSynchronous(bool _bCreateIfNotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_TryFirstLoadProfileOrCreateNewSynchronous");

	Params::SCSaveSubsystem_BPF_TryFirstLoadProfileOrCreateNewSynchronous Parms{};

	Parms._bCreateIfNotFound = _bCreateIfNotFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.IsToggledDebugOption
// (Final, Native, Private)
// Parameters:
// class FName                             _actionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::IsToggledDebugOption(class FName _actionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "IsToggledDebugOption");

	Params::SCSaveSubsystem_IsToggledDebugOption Parms{};

	Parms._actionName = _actionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.OnToggleDebugOption
// (Final, Native, Private)
// Parameters:
// class FName                             _actionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSaveSubsystem::OnToggleDebugOption(class FName _actionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "OnToggleDebugOption");

	Params::SCSaveSubsystem_OnToggleDebugOption Parms{};

	Parms._actionName = _actionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSaveSubsystem.BPF_GenerateSaveNameFromIndex
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveSubsystem::BPF_GenerateSaveNameFromIndex(int32 _iIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GenerateSaveNameFromIndex");

	Params::SCSaveSubsystem_BPF_GenerateSaveNameFromIndex Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetCurrentProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCSaveObjectPlayerProfile*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSaveObjectPlayerProfile* USCSaveSubsystem::BPF_GetCurrentProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetCurrentProfile");

	Params::SCSaveSubsystem_BPF_GetCurrentProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetCurrentSaveGame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USCSaveObjectGameData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSaveObjectGameData* USCSaveSubsystem::BPF_GetCurrentSaveGame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetCurrentSaveGame");

	Params::SCSaveSubsystem_BPF_GetCurrentSaveGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetGameOptionSavedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameOption>          _optionClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCSaveSubsystem::BPF_GetGameOptionSavedValue(TSubclassOf<class UGameOption> _optionClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetGameOptionSavedValue");

	Params::SCSaveSubsystem_BPF_GetGameOptionSavedValue Parms{};

	Parms._optionClass = _optionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetPlayerSavesCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    _bOnlyValidSaves                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCSaveSubsystem::BPF_GetPlayerSavesCount(bool _bOnlyValidSaves) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetPlayerSavesCount");

	Params::SCSaveSubsystem_BPF_GetPlayerSavesCount Parms{};

	Parms._bOnlyValidSaves = _bOnlyValidSaves;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetSaveBackupSuffix
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCSaveSubsystem::BPF_GetSaveBackupSuffix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetSaveBackupSuffix");

	Params::SCSaveSubsystem_BPF_GetSaveBackupSuffix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_GetTimePlayedInCurrentSave
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USCSaveSubsystem::BPF_GetTimePlayedInCurrentSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_GetTimePlayedInCurrentSave");

	Params::SCSaveSubsystem_BPF_GetTimePlayedInCurrentSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_IsSavingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_IsSavingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_IsSavingEnabled");

	Params::SCSaveSubsystem_BPF_IsSavingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_IsUsingDebugSaveLevelInPIE
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_IsUsingDebugSaveLevelInPIE() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_IsUsingDebugSaveLevelInPIE");

	Params::SCSaveSubsystem_BPF_IsUsingDebugSaveLevelInPIE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSaveSubsystem.BPF_WasSaveRemappingReset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCSaveSubsystem::BPF_WasSaveRemappingReset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSaveSubsystem", "BPF_WasSaveRemappingReset");

	Params::SCSaveSubsystem_BPF_WasSaveRemappingReset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCScalarCrossFade.BPE_BeginOverlapInternal
// (Native, Event, Protected, BlueprintEvent)

void ASCScalarCrossFade::BPE_BeginOverlapInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_BeginOverlapInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPE_ComputeRatio
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityTargetDataHandle&_inOutTargetData                                       (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle ASCScalarCrossFade::BPE_ComputeRatio(struct FGameplayAbilityTargetDataHandle& _inOutTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_ComputeRatio");

	Params::SCScalarCrossFade_BPE_ComputeRatio Parms{};

	Parms._inOutTargetData = std::move(_inOutTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_inOutTargetData = std::move(Parms._inOutTargetData);

	return Parms.ReturnValue;
}


// Function SCCore.SCScalarCrossFade.BPE_EndOverlapInternal
// (Native, Event, Protected, BlueprintEvent)

void ASCScalarCrossFade::BPE_EndOverlapInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_EndOverlapInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPE_IsBeginOverlapAllowed
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCScalarCrossFade::BPE_IsBeginOverlapAllowed(const class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_IsBeginOverlapAllowed");

	Params::SCScalarCrossFade_BPE_IsBeginOverlapAllowed Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCScalarCrossFade.BPE_IsEndOverlapAllowed
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCScalarCrossFade::BPE_IsEndOverlapAllowed(const class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_IsEndOverlapAllowed");

	Params::SCScalarCrossFade_BPE_IsEndOverlapAllowed Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCScalarCrossFade.BPE_OnRatioUpdated
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_inOutTargetData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::BPE_OnRatioUpdated(const struct FGameplayAbilityTargetDataHandle& _inOutTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_OnRatioUpdated");

	Params::SCScalarCrossFade_BPE_OnRatioUpdated Parms{};

	Parms._inOutTargetData = std::move(_inOutTargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPE_RatioDebugDisplay
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_targetData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::BPE_RatioDebugDisplay(const struct FGameplayAbilityTargetDataHandle& _targetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPE_RatioDebugDisplay");

	Params::SCScalarCrossFade_BPE_RatioDebugDisplay Parms{};

	Parms._targetData = std::move(_targetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPF_BeginOverlapRequest
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::BPF_BeginOverlapRequest(class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPF_BeginOverlapRequest");

	Params::SCScalarCrossFade_BPF_BeginOverlapRequest Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPF_EndOverlapRequest
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::BPF_EndOverlapRequest(class AActor* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPF_EndOverlapRequest");

	Params::SCScalarCrossFade_BPF_EndOverlapRequest Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.OnBoxCollisionBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherPrimitiveComponent                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bArg                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                _hitResult                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::OnBoxCollisionBeginOverlap(class UPrimitiveComponent* _primitiveComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherPrimitiveComponent, int32 _iInt, bool _bArg, const struct FHitResult& _hitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "OnBoxCollisionBeginOverlap");

	Params::SCScalarCrossFade_OnBoxCollisionBeginOverlap Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._otherActor = _otherActor;
	Parms._otherPrimitiveComponent = _otherPrimitiveComponent;
	Parms._iInt = _iInt;
	Parms._bArg = _bArg;
	Parms._hitResult = std::move(_hitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.OnBoxCollisionEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              _primitiveComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherPrimitiveComponent                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::OnBoxCollisionEndOverlap(class UPrimitiveComponent* _primitiveComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherPrimitiveComponent, int32 _iInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "OnBoxCollisionEndOverlap");

	Params::SCScalarCrossFade_OnBoxCollisionEndOverlap Parms{};

	Parms._primitiveComponent = _primitiveComponent;
	Parms._otherActor = _otherActor;
	Parms._otherPrimitiveComponent = _otherPrimitiveComponent;
	Parms._iInt = _iInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.OnRootVolumeCollisionBeginOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::OnRootVolumeCollisionBeginOverlap(class AActor* _actor, class AActor* _otherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "OnRootVolumeCollisionBeginOverlap");

	Params::SCScalarCrossFade_OnRootVolumeCollisionBeginOverlap Parms{};

	Parms._actor = _actor;
	Parms._otherActor = _otherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.OnRootVolumeCollisionEndOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           _actor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCScalarCrossFade::OnRootVolumeCollisionEndOverlap(class AActor* _actor, class AActor* _otherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "OnRootVolumeCollisionEndOverlap");

	Params::SCScalarCrossFade_OnRootVolumeCollisionEndOverlap Parms{};

	Parms._actor = _actor;
	Parms._otherActor = _otherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCScalarCrossFade.BPF_IsOverlapped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCScalarCrossFade::BPF_IsOverlapped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCScalarCrossFade", "BPF_IsOverlapped");

	Params::SCScalarCrossFade_BPF_IsOverlapped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCShakeSubsystem.BPF_StartCameraShake
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCameraShakeBase>     _cameraShake                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraShakePlaySpace                   _ePlaySpace                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  _userPlaySpaceRot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USCShakeSubsystem::BPF_StartCameraShake(const class APlayerController* _PlayerController, const struct FGameplayTag& _tagIdentifier, TSubclassOf<class UCameraShakeBase> _cameraShake, ECameraShakePlaySpace _ePlaySpace, const struct FRotator& _userPlaySpaceRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCShakeSubsystem", "BPF_StartCameraShake");

	Params::SCShakeSubsystem_BPF_StartCameraShake Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms._cameraShake = _cameraShake;
	Parms._ePlaySpace = _ePlaySpace;
	Parms._userPlaySpaceRot = std::move(_userPlaySpaceRot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCShakeSubsystem.BPF_StopCameraShake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediately                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCShakeSubsystem::BPF_StopCameraShake(const class APlayerController* _PlayerController, const struct FGameplayTag& _tagIdentifier, bool bImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCShakeSubsystem", "BPF_StopCameraShake");

	Params::SCShakeSubsystem_BPF_StopCameraShake Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms.bImmediately = bImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCShakeSubsystem.BPF_UpdateCameraShakeAmplitude
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tagIdentifier                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAlpha                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCShakeSubsystem::BPF_UpdateCameraShakeAmplitude(const class APlayerController* _PlayerController, const struct FGameplayTag& _tagIdentifier, float _fAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCShakeSubsystem", "BPF_UpdateCameraShakeAmplitude");

	Params::SCShakeSubsystem_BPF_UpdateCameraShakeAmplitude Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._tagIdentifier = std::move(_tagIdentifier);
	Parms._fAlpha = _fAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeGroupController.BPF_OnRootVolumeBeginOverlap
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _otherBodyIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bFromSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                _sweepResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASCVolumeGroupController::BPF_OnRootVolumeBeginOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _otherBodyIndex, bool _bFromSweep, const struct FHitResult& _sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeGroupController", "BPF_OnRootVolumeBeginOverlap");

	Params::SCVolumeGroupController_BPF_OnRootVolumeBeginOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._otherBodyIndex = _otherBodyIndex;
	Parms._bFromSweep = _bFromSweep;
	Parms._sweepResult = std::move(_sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeGroupController.BPF_OnRootVolumeEndOverlap
// (Native, Protected, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              _overlappedComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              _otherComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _otherBodyIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCVolumeGroupController::BPF_OnRootVolumeEndOverlap(class UPrimitiveComponent* _overlappedComponent, class AActor* _otherActor, class UPrimitiveComponent* _otherComp, int32 _otherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeGroupController", "BPF_OnRootVolumeEndOverlap");

	Params::SCVolumeGroupController_BPF_OnRootVolumeEndOverlap Parms{};

	Parms._overlappedComponent = _overlappedComponent;
	Parms._otherActor = _otherActor;
	Parms._otherComp = _otherComp;
	Parms._otherBodyIndex = _otherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVolumeGroupController.GetValidCandidate
// (Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           _otherActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsEntering                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCVolumeGroupController::GetValidCandidate(class AActor* _otherActor, bool _bIsEntering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeGroupController", "GetValidCandidate");

	Params::SCVolumeGroupController_GetValidCandidate Parms{};

	Parms._otherActor = _otherActor;
	Parms._bIsEntering = _bIsEntering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCVolumeGroupController.BPF_IsOverlapped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCVolumeGroupController::BPF_IsOverlapped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVolumeGroupController", "BPF_IsOverlapped");

	Params::SCVolumeGroupController_BPF_IsOverlapped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSoundAreaController.BPE_SetFadeSoundRatio
// (Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   _fFadeRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     _actorRequesting                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCSoundAreaController::BPE_SetFadeSoundRatio(float _fFadeRatio, const class AActor* _actorRequesting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSoundAreaController", "BPE_SetFadeSoundRatio");

	Params::SCSoundAreaController_BPE_SetFadeSoundRatio Parms{};

	Parms._fFadeRatio = _fFadeRatio;
	Parms._actorRequesting = _actorRequesting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSoundAreaController.BPE_StartSound
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     _actorRequesting                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCSoundAreaController::BPE_StartSound(const class AActor* _actorRequesting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSoundAreaController", "BPE_StartSound");

	Params::SCSoundAreaController_BPE_StartSound Parms{};

	Parms._actorRequesting = _actorRequesting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSoundAreaController.BPE_StopSound
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     _actorRequesting                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCSoundAreaController::BPE_StopSound(const class AActor* _actorRequesting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSoundAreaController", "BPE_StopSound");

	Params::SCSoundAreaController_BPE_StopSound Parms{};

	Parms._actorRequesting = _actorRequesting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCSoundAreaController.BPF_IsPlayerInAnAttenuationZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASCSoundAreaController::BPF_IsPlayerInAnAttenuationZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSoundAreaController", "BPF_IsPlayerInAnAttenuationZone");

	Params::SCSoundAreaController_BPF_IsPlayerInAnAttenuationZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSpectatorPawn.BPF_ViewLDCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _ldCamera                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCSpectatorPawn::BPF_ViewLDCamera(class AActor* _ldCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSpectatorPawn", "BPF_ViewLDCamera");

	Params::SCSpectatorPawn_BPF_ViewLDCamera Parms{};

	Parms._ldCamera = _ldCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSpectatorPawn.BPF_ViewTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           _targetActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASCSpectatorPawn::BPF_ViewTarget(class AActor* _targetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSpectatorPawn", "BPF_ViewTarget");

	Params::SCSpectatorPawn_BPF_ViewTarget Parms{};

	Parms._targetActor = _targetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSpectatorPawn.BPF_GetLDCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASCSpectatorPawn::BPF_GetLDCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSpectatorPawn", "BPF_GetLDCamera");

	Params::SCSpectatorPawn_BPF_GetLDCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSpectatorPawn.BPF_GetTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASCSpectatorPawn::BPF_GetTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSpectatorPawn", "BPF_GetTarget");

	Params::SCSpectatorPawn_BPF_GetTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStatController.AddValue
// (Final, Native, Public)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatController::AddValue(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatController", "AddValue");

	Params::SCStatController_AddValue Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatController.BPE_OnBinderTriggeredInternal
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&_eventData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCStatController::BPE_OnBinderTriggeredInternal(const struct FGameplayAbilityTargetDataHandle& _eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatController", "BPE_OnBinderTriggeredInternal");

	Params::SCStatController_BPE_OnBinderTriggeredInternal Parms{};

	Parms._eventData = std::move(_eventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.SCStatDataCompute.BPE_Compute
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class APlayerState*               _owningPlayer                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle&_targetDataHandle                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCStatDataCompute::BPE_Compute(const class APlayerState* _owningPlayer, struct FGameplayAbilityTargetDataHandle& _targetDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatDataCompute", "BPE_Compute");

	Params::SCStatDataCompute_BPE_Compute Parms{};

	Parms._owningPlayer = _owningPlayer;
	Parms._targetDataHandle = std::move(_targetDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	_targetDataHandle = std::move(Parms._targetDataHandle);
}


// Function SCCore.StateTreeTargetDataConditionHelper.GetProvidedTargetData
// (Final, Native, Static, Private, HasOutParams)
// Parameters:
// const struct FInstancedStruct&          _structPtr                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UScriptStruct*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UScriptStruct*> UStateTreeTargetDataConditionHelper::GetProvidedTargetData(const struct FInstancedStruct& _structPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StateTreeTargetDataConditionHelper", "GetProvidedTargetData");

	Params::StateTreeTargetDataConditionHelper_GetProvidedTargetData Parms{};

	Parms._structPtr = std::move(_structPtr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStateTreeComponent.BPF_OverrideStateTreeLogic
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStateTreeReference&       _stateTreeReference                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USCStateTreeComponent::BPF_OverrideStateTreeLogic(const struct FStateTreeReference& _stateTreeReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStateTreeComponent", "BPF_OverrideStateTreeLogic");

	Params::SCStateTreeComponent_BPF_OverrideStateTreeLogic Parms{};

	Parms._stateTreeReference = std::move(_stateTreeReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStateWithAbilityNode.BPF_GetOwnerNode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USCGameplayAbility*         _ability                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCStateWithAbilityNode*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCStateWithAbilityNode* USCStateWithAbilityNode::BPF_GetOwnerNode(const class USCGameplayAbility* _ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCStateWithAbilityNode", "BPF_GetOwnerNode");

	Params::SCStateWithAbilityNode_BPF_GetOwnerNode Parms{};

	Parms._ability = _ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStatsSubsystem.OnPlayerControllerPostLogged
// (Native, Protected)
// Parameters:
// class AController*                      _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatsSubsystem::OnPlayerControllerPostLogged(class AController* _PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatsSubsystem", "OnPlayerControllerPostLogged");

	Params::SCStatsSubsystem_OnPlayerControllerPostLogged Parms{};

	Parms._PlayerController = _PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatsSubsystem.OnPlayerControllerPostLogout
// (Native, Protected)
// Parameters:
// class AController*                      _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatsSubsystem::OnPlayerControllerPostLogout(class AController* _PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatsSubsystem", "OnPlayerControllerPostLogout");

	Params::SCStatsSubsystem_OnPlayerControllerPostLogout Parms{};

	Parms._PlayerController = _PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatsSubsystem.OnPlayerStateInitialReplication
// (Final, Native, Private)
// Parameters:
// class ASCPlayerState*                   _scPlayerState                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatsSubsystem::OnPlayerStateInitialReplication(class ASCPlayerState* _scPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatsSubsystem", "OnPlayerStateInitialReplication");

	Params::SCStatsSubsystem_OnPlayerStateInitialReplication Parms{};

	Parms._scPlayerState = _scPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStatsSubsystem.SetRawStatValue
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FSCStatId&                 _statId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStatsSubsystem::SetRawStatValue(const struct FSCStatId& _statId, float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStatsSubsystem", "SetRawStatValue");

	Params::SCStatsSubsystem_SetRawStatValue Parms{};

	Parms._statId = std::move(_statId);
	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStreamingComponent.BPF_GetDistanceToPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCStreamingComponent::BPF_GetDistanceToPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingComponent", "BPF_GetDistanceToPlayer");

	Params::SCStreamingComponent_BPF_GetDistanceToPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStreamingComponent.BPF_GetStreamingState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCStreamingState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCStreamingState USCStreamingComponent::BPF_GetStreamingState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingComponent", "BPF_GetStreamingState");

	Params::SCStreamingComponent_BPF_GetStreamingState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStreamingComponent.BPF_IsStreamingIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCStreamingComponent::BPF_IsStreamingIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingComponent", "BPF_IsStreamingIn");

	Params::SCStreamingComponent_BPF_IsStreamingIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCStreamingSubsystem.OnLevelAdded
// (Final, Native, Private)
// Parameters:
// class ULevel*                           _addedLevel                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStreamingSubsystem::OnLevelAdded(class ULevel* _addedLevel, class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingSubsystem", "OnLevelAdded");

	Params::SCStreamingSubsystem_OnLevelAdded Parms{};

	Parms._addedLevel = _addedLevel;
	Parms._world = _world;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStreamingSubsystem.OnLevelRemoved
// (Final, Native, Private)
// Parameters:
// class ULevel*                           _removedLevel                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           _world                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCStreamingSubsystem::OnLevelRemoved(class ULevel* _removedLevel, class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCStreamingSubsystem", "OnLevelRemoved");

	Params::SCStreamingSubsystem_OnLevelRemoved Parms{};

	Parms._removedLevel = _removedLevel;
	Parms._world = _world;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCStringsHelper.BPF_ObjectPathToPackageName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    _objectPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCStringsHelper::BPF_ObjectPathToPackageName(const class FString& _objectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCStringsHelper", "BPF_ObjectPathToPackageName");

	Params::SCStringsHelper_BPF_ObjectPathToPackageName Parms{};

	Parms._objectPath = std::move(_objectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSubsystemBlueprintLibrary.GetEngineSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class USCSubsystem>         Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCSubsystem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSubsystem* USCSubsystemBlueprintLibrary::GetEngineSubsystem(TSubclassOf<class USCSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSubsystemBlueprintLibrary", "GetEngineSubsystem");

	Params::SCSubsystemBlueprintLibrary_GetEngineSubsystem Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSubsystemBlueprintLibrary.GetGameInstanceSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCSubsystem>         Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCSubsystem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSubsystem* USCSubsystemBlueprintLibrary::GetGameInstanceSubsystem(class UObject* ContextObject, TSubclassOf<class USCSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSubsystemBlueprintLibrary", "GetGameInstanceSubsystem");

	Params::SCSubsystemBlueprintLibrary_GetGameInstanceSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSubsystemBlueprintLibrary.GetLocalPlayerSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCSubsystem>         Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCSubsystem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSubsystem* USCSubsystemBlueprintLibrary::GetLocalPlayerSubsystem(class UObject* ContextObject, TSubclassOf<class USCSubsystem> Class_0, int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSubsystemBlueprintLibrary", "GetLocalPlayerSubsystem");

	Params::SCSubsystemBlueprintLibrary_GetLocalPlayerSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Class_0 = Class_0;
	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSubsystemBlueprintLibrary.GetWorldSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceMainWorld                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCSubsystem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSubsystem* USCSubsystemBlueprintLibrary::GetWorldSubsystem(class UObject* ContextObject, const struct FGameplayTag& Tag, bool bForceMainWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCSubsystemBlueprintLibrary", "GetWorldSubsystem");

	Params::SCSubsystemBlueprintLibrary_GetWorldSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Tag = std::move(Tag);
	Parms.bForceMainWorld = bForceMainWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTextHelpers.AsDistance_Float
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERoundingMode                           RoundingMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseGrouping                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumFractionalDigits                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumFractionalDigits                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USCTextHelpers::AsDistance_Float(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTextHelpers", "AsDistance_Float");

	Params::SCTextHelpers_AsDistance_Float Parms{};

	Parms.Value = Value;
	Parms.RoundingMode = RoundingMode;
	Parms.bAlwaysSign = bAlwaysSign;
	Parms.bUseGrouping = bUseGrouping;
	Parms.MinimumIntegralDigits = MinimumIntegralDigits;
	Parms.MaximumIntegralDigits = MaximumIntegralDigits;
	Parms.MinimumFractionalDigits = MinimumFractionalDigits;
	Parms.MaximumFractionalDigits = MaximumFractionalDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_AddDelayToDateTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FDateTime&                 _dateTime                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fDelayInSeconds                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USCTimeHelper::BPF_AddDelayToDateTime(const struct FDateTime& _dateTime, float _fDelayInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_AddDelayToDateTime");

	Params::SCTimeHelper_BPF_AddDelayToDateTime Parms{};

	Parms._dateTime = std::move(_dateTime);
	Parms._fDelayInSeconds = _fDelayInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetAvgLatencyInMsUsingBuffer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCTimeHelper::BPF_GetAvgLatencyInMsUsingBuffer(class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetAvgLatencyInMsUsingBuffer");

	Params::SCTimeHelper_BPF_GetAvgLatencyInMsUsingBuffer Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetCurrentSynchedTimeInDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UWorld*                     _world                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USCTimeHelper::BPF_GetCurrentSynchedTimeInDateTime(const class UWorld* _world)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetCurrentSynchedTimeInDateTime");

	Params::SCTimeHelper_BPF_GetCurrentSynchedTimeInDateTime Parms{};

	Parms._world = _world;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetDeltaTimeSlowMotionIndependant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fCurrentDt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fSlowMotionFactor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCTimeHelper::BPF_GetDeltaTimeSlowMotionIndependant(class UObject* _worldContextObject, float _fCurrentDt, float _fSlowMotionFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetDeltaTimeSlowMotionIndependant");

	Params::SCTimeHelper_BPF_GetDeltaTimeSlowMotionIndependant Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._fCurrentDt = _fCurrentDt;
	Parms._fSlowMotionFactor = _fSlowMotionFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetDiffBetweenToDateTimeInSeconds
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FDateTime&                 _dateTimeA                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 _dateTimeB                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCTimeHelper::BPF_GetDiffBetweenToDateTimeInSeconds(const struct FDateTime& _dateTimeA, const struct FDateTime& _dateTimeB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetDiffBetweenToDateTimeInSeconds");

	Params::SCTimeHelper_BPF_GetDiffBetweenToDateTimeInSeconds Parms{};

	Parms._dateTimeA = std::move(_dateTimeA);
	Parms._dateTimeB = std::move(_dateTimeB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetGameStartTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USCTimeHelper::BPF_GetGameStartTime(class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetGameStartTime");

	Params::SCTimeHelper_BPF_GetGameStartTime Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTimeHelper.BPF_GetTimePassedSinceGameStart
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bPredictedServerTime                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCTimeHelper::BPF_GetTimePassedSinceGameStart(class UObject* _worldContextObject, bool _bPredictedServerTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTimeHelper", "BPF_GetTimePassedSinceGameStart");

	Params::SCTimeHelper_BPF_GetTimePassedSinceGameStart Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._bPredictedServerTime = _bPredictedServerTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.BoxTraceMulti
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HalfSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "BoxTraceMulti");

	Params::SCTraceLibrary_BoxTraceMulti Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.HalfSize = std::move(HalfSize);
	Parms.Orientation = std::move(Orientation);
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.BoxTraceSingle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HalfSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "BoxTraceSingle");

	Params::SCTraceLibrary_BoxTraceSingle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.HalfSize = std::move(HalfSize);
	Parms.Orientation = std::move(Orientation);
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.CapsuleTraceMulti
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "CapsuleTraceMulti");

	Params::SCTraceLibrary_CapsuleTraceMulti Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.CapsuleTraceSingle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "CapsuleTraceSingle");

	Params::SCTraceLibrary_CapsuleTraceSingle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.LineTraceMulti
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "LineTraceMulti");

	Params::SCTraceLibrary_LineTraceMulti Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.LineTraceSingle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "LineTraceSingle");

	Params::SCTraceLibrary_LineTraceSingle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.SphereTraceMulti
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "SphereTraceMulti");

	Params::SCTraceLibrary_SphereTraceMulti Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Radius = Radius;
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceLibrary.SphereTraceSingle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCollisionResponseContainer&CollisionResponse                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTraceLibrary::SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ECollisionChannel CollisionChannel, const struct FCollisionResponseContainer& CollisionResponse, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTraceLibrary", "SphereTraceSingle");

	Params::SCTraceLibrary_SphereTraceSingle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Radius = Radius;
	Parms.CollisionChannel = CollisionChannel;
	Parms.CollisionResponse = std::move(CollisionResponse);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceSubsystem.BPF_LaunchTraceByChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _owner                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTraceSetup&             _newTrace                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    _traceName                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FSCTraceResult& _result)>&_onFinishedCallbackDynamic                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsAsync                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTraceSubsystem::BPF_LaunchTraceByChannel(const class AActor* _owner, const struct FSCTraceSetup& _newTrace, const class FString& _traceName, const TDelegate<void(const struct FSCTraceResult& _result)>& _onFinishedCallbackDynamic, bool _bIsAsync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTraceSubsystem", "BPF_LaunchTraceByChannel");

	Params::SCTraceSubsystem_BPF_LaunchTraceByChannel Parms{};

	Parms._owner = _owner;
	Parms._newTrace = std::move(_newTrace);
	Parms._traceName = std::move(_traceName);
	Parms._onFinishedCallbackDynamic = _onFinishedCallbackDynamic;
	Parms._bIsAsync = _bIsAsync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTraceSubsystem.BPF_LaunchTracesByChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _owner                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSCTraceSetup>&     _newTraces                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    _traceName                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FSCTraceResult>& _results)>&_onFinishedCallbackDynamic                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsAsync                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USCTraceSubsystem::BPF_LaunchTracesByChannel(const class AActor* _owner, const TArray<struct FSCTraceSetup>& _newTraces, const class FString& _traceName, const TDelegate<void(const TArray<struct FSCTraceResult>& _results)>& _onFinishedCallbackDynamic, bool _bIsAsync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTraceSubsystem", "BPF_LaunchTracesByChannel");

	Params::SCTraceSubsystem_BPF_LaunchTracesByChannel Parms{};

	Parms._owner = _owner;
	Parms._newTraces = std::move(_newTraces);
	Parms._traceName = std::move(_traceName);
	Parms._onFinishedCallbackDynamic = _onFinishedCallbackDynamic;
	Parms._bIsAsync = _bIsAsync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionHelper.GetTransitionSpeedState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCharacterSpeedState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCCharacterSpeedState USCTransitionHelper::GetTransitionSpeedState(const struct FSCTransition& _transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTransitionHelper", "GetTransitionSpeedState");

	Params::SCTransitionHelper_GetTransitionSpeedState Parms{};

	Parms._transition = std::move(_transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionHelper.GetTransitionType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCTransitionType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCTransitionType USCTransitionHelper::GetTransitionType(const struct FSCTransition& _transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCTransitionHelper", "GetTransitionType");

	Params::SCTransitionHelper_GetTransitionType Parms{};

	Parms._transition = std::move(_transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionDB.BPE_IsTransitionAllowed
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTransition&             _currentTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fTransitionRatio                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsInDeccel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionDB::BPE_IsTransitionAllowed(const struct FSCTransition& _testingTransition, const struct FSCTransition& _currentTransition, float _fTransitionRatio, bool _bIsInDeccel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionDB", "BPE_IsTransitionAllowed");

	Params::SCTransitionDB_BPE_IsTransitionAllowed Parms{};

	Parms._testingTransition = std::move(_testingTransition);
	Parms._currentTransition = std::move(_currentTransition);
	Parms._fTransitionRatio = _fTransitionRatio;
	Parms._bIsInDeccel = _bIsInDeccel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionDB.BPF_GetModifyTransitionAllowedIntervals
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFloatInterval>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFloatInterval> USCTransitionDB::BPF_GetModifyTransitionAllowedIntervals(const struct FSCTransition& _testingTransition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionDB", "BPF_GetModifyTransitionAllowedIntervals");

	Params::SCTransitionDB_BPF_GetModifyTransitionAllowedIntervals Parms{};

	Parms._testingTransition = std::move(_testingTransition);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionDB.BPF_GetTransitionVisual
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSCTransitionVisual              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSCTransitionVisual USCTransitionDB::BPF_GetTransitionVisual(const struct FSCTransition& _transition, bool* _bOutFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionDB", "BPF_GetTransitionVisual");

	Params::SCTransitionDB_BPF_GetTransitionVisual Parms{};

	Parms._transition = std::move(_transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_bOutFound != nullptr)
		*_bOutFound = Parms._bOutFound;

	return Parms.ReturnValue;
}


// Function SCCore.SCTransitionDB.BPF_GetVelocityAngularSpeed
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutSameWay                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutOppositeWay                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCTransitionDB::BPF_GetVelocityAngularSpeed(const struct FSCTransition& _testingTransition, float* _fOutSameWay, float* _fOutOppositeWay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionDB", "BPF_GetVelocityAngularSpeed");

	Params::SCTransitionDB_BPF_GetVelocityAngularSpeed Parms{};

	Parms._testingTransition = std::move(_testingTransition);

	UObject::ProcessEvent(Func, &Parms);

	if (_fOutSameWay != nullptr)
		*_fOutSameWay = Parms._fOutSameWay;

	if (_fOutOppositeWay != nullptr)
		*_fOutOppositeWay = Parms._fOutOppositeWay;
}


// Function SCCore.SCTransitionDB.IsAnimValidTransition
// (Final, Native, Protected, HasOutParams, HasDefaults, Const)
// Parameters:
// const struct FAssetData&                _assetData                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCTransitionDB::IsAnimValidTransition(const struct FAssetData& _assetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCTransitionDB", "IsAnimValidTransition");

	Params::SCTransitionDB_IsAnimValidTransition Parms{};

	Parms._assetData = std::move(_assetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BoolToVisibility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    _bValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility USCUIHelper::BoolToVisibility(bool _bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BoolToVisibility");

	Params::SCUIHelper_BoolToVisibility Parms{};

	Parms._bValue = _bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_CircleChildInVerticalBox
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVerticalBox*                     _box                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCUIHelper::BPF_CircleChildInVerticalBox(class UVerticalBox* _box)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_CircleChildInVerticalBox");

	Params::SCUIHelper_BPF_CircleChildInVerticalBox Parms{};

	Parms._box = _box;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_ClearUserFocus
// (Final, Native, Static, Public, BlueprintCallable)

void USCUIHelper::BPF_ClearUserFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_ClearUserFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_CycleChildren
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPanelWidget*                     _panel                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          _currentChild                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECycleDirection                         _eDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSkipDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCUIHelper::BPF_CycleChildren(class UPanelWidget* _panel, class UWidget* _currentChild, ECycleDirection _eDirection, bool _bSkipDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_CycleChildren");

	Params::SCUIHelper_BPF_CycleChildren Parms{};

	Parms._panel = _panel;
	Parms._currentChild = _currentChild;
	Parms._eDirection = _eDirection;
	Parms._bSkipDisabled = _bSkipDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_DeselectAllChildButtons
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     _panel                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_DeselectAllChildButtons(class UPanelWidget* _panel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_DeselectAllChildButtons");

	Params::SCUIHelper_BPF_DeselectAllChildButtons Parms{};

	Parms._panel = _panel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_EndAllAnimations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_EndAllAnimations(class UUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_EndAllAnimations");

	Params::SCUIHelper_BPF_EndAllAnimations Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_EndAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 _animation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_EndAnimation(class UUserWidget* _widget, class UWidgetAnimation* _animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_EndAnimation");

	Params::SCUIHelper_BPF_EndAnimation Parms{};

	Parms._widget = _widget;
	Parms._animation = _animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_FindSelectedButtonInArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class UWidget*>&           _widgets                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USCButtonUserWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCButtonUserWidget* USCUIHelper::BPF_FindSelectedButtonInArray(const TArray<class UWidget*>& _widgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_FindSelectedButtonInArray");

	Params::SCUIHelper_BPF_FindSelectedButtonInArray Parms{};

	Parms._widgets = std::move(_widgets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_FindSelectedChildButton
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPanelWidget*                     _panel                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCButtonUserWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCButtonUserWidget* USCUIHelper::BPF_FindSelectedChildButton(class UPanelWidget* _panel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_FindSelectedChildButton");

	Params::SCUIHelper_BPF_FindSelectedChildButton Parms{};

	Parms._panel = _panel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_FocusWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_FocusWidget(class UWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_FocusWidget");

	Params::SCUIHelper_BPF_FocusWidget Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_Get2DPosFrom3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class APlayerController*          _PlayerController                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v3DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _v2DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOut2DPos                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOut2DProjSuccess                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_Get2DPosFrom3D(const class APlayerController* _PlayerController, const struct FVector& _vLocation, const struct FVector& _v3DOffset, const struct FVector2D& _v2DOffset, struct FVector2D* _vOut2DPos, bool* _bOut2DProjSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_Get2DPosFrom3D");

	Params::SCUIHelper_BPF_Get2DPosFrom3D Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._vLocation = std::move(_vLocation);
	Parms._v3DOffset = std::move(_v3DOffset);
	Parms._v2DOffset = std::move(_v2DOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOut2DPos != nullptr)
		*_vOut2DPos = std::move(Parms._vOut2DPos);

	if (_bOut2DProjSuccess != nullptr)
		*_bOut2DProjSuccess = Parms._bOut2DProjSuccess;
}


// Function SCCore.SCUIHelper.BPF_Get2DPosFrom3DBehindCam
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v3DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _v2DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOut2DPos                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutLocationInFrontOfCamera                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_Get2DPosFrom3DBehindCam(const class UObject* _worldContextObject, const struct FVector& _vLocation, const struct FVector& _v3DOffset, const struct FVector2D& _v2DOffset, struct FVector2D* _vOut2DPos, bool* _bOutLocationInFrontOfCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_Get2DPosFrom3DBehindCam");

	Params::SCUIHelper_BPF_Get2DPosFrom3DBehindCam Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._vLocation = std::move(_vLocation);
	Parms._v3DOffset = std::move(_v3DOffset);
	Parms._v2DOffset = std::move(_v2DOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOut2DPos != nullptr)
		*_vOut2DPos = std::move(Parms._vOut2DPos);

	if (_bOutLocationInFrontOfCamera != nullptr)
		*_bOutLocationInFrontOfCamera = Parms._bOutLocationInFrontOfCamera;
}


// Function SCCore.SCUIHelper.BPF_GetAngleFromScreenCenter
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _v2DPos                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USCUIHelper::BPF_GetAngleFromScreenCenter(class UObject* _worldContextObject, const struct FVector2D& _v2DPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetAngleFromScreenCenter");

	Params::SCUIHelper_BPF_GetAngleFromScreenCenter Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._v2DPos = std::move(_v2DPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetCursorPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCUIHelper::BPF_GetCursorPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetCursorPosition");

	Params::SCUIHelper_BPF_GetCursorPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetIsEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUIHelper::BPF_GetIsEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetIsEditor");

	Params::SCUIHelper_BPF_GetIsEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetIsPIE
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUIHelper::BPF_GetIsPIE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetIsPIE");

	Params::SCUIHelper_BPF_GetIsPIE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetLastNavigationMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EUIInputModes                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIInputModes USCUIHelper::BPF_GetLastNavigationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetLastNavigationMode");

	Params::SCUIHelper_BPF_GetLastNavigationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetMenuActionInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSCMenuActionInstance&     _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USCMenuAction*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCMenuAction* USCUIHelper::BPF_GetMenuActionInstance(const struct FSCMenuActionInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetMenuActionInstance");

	Params::SCUIHelper_BPF_GetMenuActionInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetNextChildWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     container                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          currentWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECycleDirection                         _eDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSkipDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCUIHelper::BPF_GetNextChildWidget(class UPanelWidget* container, class UWidget* currentWidget, ECycleDirection _eDirection, bool _bSkipDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetNextChildWidget");

	Params::SCUIHelper_BPF_GetNextChildWidget Parms{};

	Parms.container = container;
	Parms.currentWidget = currentWidget;
	Parms._eDirection = _eDirection;
	Parms._bSkipDisabled = _bSkipDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetNextIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   _uiCurrentIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECycleDirection                         _eDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiLimitValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bLoopAtLimit                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIncludeLimit                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USCUIHelper::BPF_GetNextIndex(uint8 _uiCurrentIndex, ECycleDirection _eDirection, uint8 _uiLimitValue, bool _bLoopAtLimit, bool _bIncludeLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetNextIndex");

	Params::SCUIHelper_BPF_GetNextIndex Parms{};

	Parms._uiCurrentIndex = _uiCurrentIndex;
	Parms._eDirection = _eDirection;
	Parms._uiLimitValue = _uiLimitValue;
	Parms._bLoopAtLimit = _bLoopAtLimit;
	Parms._bIncludeLimit = _bIncludeLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetNextWidgetInArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UWidget*>&           _widgets                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UWidget*                          _currentWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECycleDirection                         _eDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bSkipDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USCUIHelper::BPF_GetNextWidgetInArray(const TArray<class UWidget*>& _widgets, class UWidget* _currentWidget, ECycleDirection _eDirection, bool _bSkipDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetNextWidgetInArray");

	Params::SCUIHelper_BPF_GetNextWidgetInArray Parms{};

	Parms._widgets = std::move(_widgets);
	Parms._currentWidget = _currentWidget;
	Parms._eDirection = _eDirection;
	Parms._bSkipDisabled = _bSkipDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetPositionOnEllipse
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCUIHelper::BPF_GetPositionOnEllipse(class UObject* _worldContextObject, const struct FVector2D& _vRadius, float _fAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetPositionOnEllipse");

	Params::SCUIHelper_BPF_GetPositionOnEllipse Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._vRadius = std::move(_vRadius);
	Parms._fAngle = _fAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetScaledViewportSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCUIHelper::BPF_GetScaledViewportSize(class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetScaledViewportSize");

	Params::SCUIHelper_BPF_GetScaledViewportSize Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetScreenCenter2DPos
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USCUIHelper::BPF_GetScreenCenter2DPos(class UObject* _worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetScreenCenter2DPos");

	Params::SCUIHelper_BPF_GetScreenCenter2DPos Parms{};

	Parms._worldContextObject = _worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_GetWidget2DPosFrom3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v3DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _v2DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _f2DMinY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOut2DPos                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOut2DProjSuccess                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_GetWidget2DPosFrom3D(class UWidget* _widget, const struct FVector& _vLocation, const struct FVector& _v3DOffset, const struct FVector2D& _v2DOffset, float _f2DMinY, struct FVector2D* _vOut2DPos, bool* _bOut2DProjSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_GetWidget2DPosFrom3D");

	Params::SCUIHelper_BPF_GetWidget2DPosFrom3D Parms{};

	Parms._widget = _widget;
	Parms._vLocation = std::move(_vLocation);
	Parms._v3DOffset = std::move(_v3DOffset);
	Parms._v2DOffset = std::move(_v2DOffset);
	Parms._f2DMinY = _f2DMinY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOut2DPos != nullptr)
		*_vOut2DPos = std::move(Parms._vOut2DPos);

	if (_bOut2DProjSuccess != nullptr)
		*_bOut2DProjSuccess = Parms._bOut2DProjSuccess;
}


// Function SCCore.SCUIHelper.BPF_Intersect2DPositionWithViewportBounds
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vInPosition                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutIntersection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIntersectDirection*                    _eOutIntersectDirection                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUIHelper::BPF_Intersect2DPositionWithViewportBounds(class APlayerController* _PlayerController, const struct FVector2D& _vInPosition, struct FVector2D* _vOutIntersection, EIntersectDirection* _eOutIntersectDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_Intersect2DPositionWithViewportBounds");

	Params::SCUIHelper_BPF_Intersect2DPositionWithViewportBounds Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._vInPosition = std::move(_vInPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutIntersection != nullptr)
		*_vOutIntersection = std::move(Parms._vOutIntersection);

	if (_eOutIntersectDirection != nullptr)
		*_eOutIntersectDirection = Parms._eOutIntersectDirection;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.BPF_ProjectWorldLocationToEllipse
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          _worldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _v3DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _v2DOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 _vEllipseRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FProjectInViewportResult*        _outProjectionResult                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   _bOutIsOnEllipse                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_ProjectWorldLocationToEllipse(class UObject* _worldContextObject, const struct FVector& _vLocation, const struct FVector& _v3DOffset, const struct FVector2D& _v2DOffset, const struct FVector2D& _vEllipseRadius, struct FProjectInViewportResult* _outProjectionResult, bool* _bOutIsOnEllipse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_ProjectWorldLocationToEllipse");

	Params::SCUIHelper_BPF_ProjectWorldLocationToEllipse Parms{};

	Parms._worldContextObject = _worldContextObject;
	Parms._vLocation = std::move(_vLocation);
	Parms._v3DOffset = std::move(_v3DOffset);
	Parms._v2DOffset = std::move(_v2DOffset);
	Parms._vEllipseRadius = std::move(_vEllipseRadius);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outProjectionResult != nullptr)
		*_outProjectionResult = std::move(Parms._outProjectionResult);

	if (_bOutIsOnEllipse != nullptr)
		*_bOutIsOnEllipse = Parms._bOutIsOnEllipse;
}


// Function SCCore.SCUIHelper.BPF_ProjectWorldLocationToScreen
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vInPosition                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseViewportBounds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fViewportBoundsOffset                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       _vOutScreenPosition                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  _fOutAngle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _bOutIsOfScreen                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_ProjectWorldLocationToScreen(class APlayerController* _PlayerController, const struct FVector& _vInPosition, bool _bUseViewportBounds, float _fViewportBoundsOffset, struct FVector2D* _vOutScreenPosition, float* _fOutAngle, bool* _bOutIsOfScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_ProjectWorldLocationToScreen");

	Params::SCUIHelper_BPF_ProjectWorldLocationToScreen Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._vInPosition = std::move(_vInPosition);
	Parms._bUseViewportBounds = _bUseViewportBounds;
	Parms._fViewportBoundsOffset = _fViewportBoundsOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_vOutScreenPosition != nullptr)
		*_vOutScreenPosition = std::move(Parms._vOutScreenPosition);

	if (_fOutAngle != nullptr)
		*_fOutAngle = Parms._fOutAngle;

	if (_bOutIsOfScreen != nullptr)
		*_bOutIsOfScreen = Parms._bOutIsOfScreen;
}


// Function SCCore.SCUIHelper.BPF_RequestRefreshDesiredFocus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bResetLastFocusedChild                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_RequestRefreshDesiredFocus(class APlayerController* _PlayerController, bool _bResetLastFocusedChild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_RequestRefreshDesiredFocus");

	Params::SCUIHelper_BPF_RequestRefreshDesiredFocus Parms{};

	Parms._PlayerController = _PlayerController;
	Parms._bResetLastFocusedChild = _bResetLastFocusedChild;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_ResetActiveRootWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                _PlayerController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_ResetActiveRootWidget(class APlayerController* _PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_ResetActiveRootWidget");

	Params::SCUIHelper_BPF_ResetActiveRootWidget Parms{};

	Parms._PlayerController = _PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_SetAutoWrapTextBlock
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       _textBlock                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bAutoWrap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_SetAutoWrapTextBlock(class UTextBlock* _textBlock, bool _bAutoWrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_SetAutoWrapTextBlock");

	Params::SCUIHelper_BPF_SetAutoWrapTextBlock Parms{};

	Parms._textBlock = _textBlock;
	Parms._bAutoWrap = _bAutoWrap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_SetCursorPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 _vCursor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_SetCursorPosition(const struct FVector2D& _vCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_SetCursorPosition");

	Params::SCUIHelper_BPF_SetCursorPosition Parms{};

	Parms._vCursor = std::move(_vCursor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_SetVirtualCursorWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULocalPlayer*                     _player                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseCursor                            Cursor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_SetVirtualCursorWidget(class ULocalPlayer* _player, EMouseCursor Cursor, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_SetVirtualCursorWidget");

	Params::SCUIHelper_BPF_SetVirtualCursorWidget Parms{};

	Parms._player = _player;
	Parms.Cursor = Cursor;
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.BPF_StopAllAnimations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUIHelper::BPF_StopAllAnimations(class UUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "BPF_StopAllAnimations");

	Params::SCUIHelper_BPF_StopAllAnimations Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUIHelper.Conv_FloatToStringDecimals0
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _Value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCUIHelper::Conv_FloatToStringDecimals0(float _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "Conv_FloatToStringDecimals0");

	Params::SCUIHelper_Conv_FloatToStringDecimals0 Parms{};

	Parms._Value = _Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.Conv_FloatToStringDecimals1
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _Value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCUIHelper::Conv_FloatToStringDecimals1(float _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "Conv_FloatToStringDecimals1");

	Params::SCUIHelper_Conv_FloatToStringDecimals1 Parms{};

	Parms._Value = _Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.Conv_FloatToStringDecimals2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _Value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCUIHelper::Conv_FloatToStringDecimals2(float _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "Conv_FloatToStringDecimals2");

	Params::SCUIHelper_Conv_FloatToStringDecimals2 Parms{};

	Parms._Value = _Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.Conv_FloatToStringDecimals3
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _Value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USCUIHelper::Conv_FloatToStringDecimals3(float _Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "Conv_FloatToStringDecimals3");

	Params::SCUIHelper_Conv_FloatToStringDecimals3 Parms{};

	Parms._Value = _Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.SelectBrush
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    _bPicker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateBrush&               _ifTrue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateBrush&               _ifFalse                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush USCUIHelper::SelectBrush(bool _bPicker, const struct FSlateBrush& _ifTrue, const struct FSlateBrush& _ifFalse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "SelectBrush");

	Params::SCUIHelper_SelectBrush Parms{};

	Parms._bPicker = _bPicker;
	Parms._ifTrue = std::move(_ifTrue);
	Parms._ifFalse = std::move(_ifFalse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.SelectSlateColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    _bPicker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateColor&               _ifTrue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateColor&               _ifFalse                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor USCUIHelper::SelectSlateColor(bool _bPicker, const struct FSlateColor& _ifTrue, const struct FSlateColor& _ifFalse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "SelectSlateColor");

	Params::SCUIHelper_SelectSlateColor Parms{};

	Parms._bPicker = _bPicker;
	Parms._ifTrue = std::move(_ifTrue);
	Parms._ifFalse = std::move(_ifFalse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUIHelper.VisibilityToBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESlateVisibility                        _eVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCUIHelper::VisibilityToBool(ESlateVisibility _eVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUIHelper", "VisibilityToBool");

	Params::SCUIHelper_VisibilityToBool Parms{};

	Parms._eVisibility = _eVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUISubsystem.BPF_AddWidgetToViewport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _pc                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCUserWidget>        _widgetClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _layer                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget**                   _createdWidget                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::BPF_AddWidgetToViewport(const class APlayerController* _pc, TSubclassOf<class USCUserWidget> _widgetClass, const struct FGameplayTag& _layer, class USCUserWidget** _createdWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUISubsystem", "BPF_AddWidgetToViewport");

	Params::SCUISubsystem_BPF_AddWidgetToViewport Parms{};

	Parms._pc = _pc;
	Parms._widgetClass = _widgetClass;
	Parms._layer = std::move(_layer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_createdWidget != nullptr)
		*_createdWidget = Parms._createdWidget;
}


// Function SCCore.SCUISubsystem.BPF_FindOrAddViewportWidgetOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _pc                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCUserWidget>        _widgetClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _layer                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget**                   _widget                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::BPF_FindOrAddViewportWidgetOfClass(const class APlayerController* _pc, TSubclassOf<class USCUserWidget> _widgetClass, const struct FGameplayTag& _layer, class USCUserWidget** _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUISubsystem", "BPF_FindOrAddViewportWidgetOfClass");

	Params::SCUISubsystem_BPF_FindOrAddViewportWidgetOfClass Parms{};

	Parms._pc = _pc;
	Parms._widgetClass = _widgetClass;
	Parms._layer = std::move(_layer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_widget != nullptr)
		*_widget = Parms._widget;
}


// Function SCCore.SCUISubsystem.BPF_FindViewportWidgetOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          _pc                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCUserWidget>        _widgetClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _layer                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget**                   _widget                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::BPF_FindViewportWidgetOfClass(const class APlayerController* _pc, TSubclassOf<class USCUserWidget> _widgetClass, const struct FGameplayTag& _layer, class USCUserWidget** _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUISubsystem", "BPF_FindViewportWidgetOfClass");

	Params::SCUISubsystem_BPF_FindViewportWidgetOfClass Parms{};

	Parms._pc = _pc;
	Parms._widgetClass = _widgetClass;
	Parms._layer = std::move(_layer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_widget != nullptr)
		*_widget = Parms._widget;
}


// Function SCCore.SCUISubsystem.BPF_RemoveViewportWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class APlayerController*          _pc                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCUserWidget*                    _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::BPF_RemoveViewportWidget(const class APlayerController* _pc, class USCUserWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCUISubsystem", "BPF_RemoveViewportWidget");

	Params::SCUISubsystem_BPF_RemoveViewportWidget Parms{};

	Parms._pc = _pc;
	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUISubsystem.BPF_BroadcastUIEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              _eventTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::BPF_BroadcastUIEvent(const struct FGameplayTag& _eventTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUISubsystem", "BPF_BroadcastUIEvent");

	Params::SCUISubsystem_BPF_BroadcastUIEvent Parms{};

	Parms._eventTag = std::move(_eventTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUISubsystem.BPF_GetOrCreateViewModelPoolChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class USCViewModel>         _viewModelClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UViewModelsPool*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UViewModelsPool* USCUISubsystem::BPF_GetOrCreateViewModelPoolChecked(TSubclassOf<class USCViewModel> _viewModelClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUISubsystem", "BPF_GetOrCreateViewModelPoolChecked");

	Params::SCUISubsystem_BPF_GetOrCreateViewModelPoolChecked Parms{};

	Parms._viewModelClass = _viewModelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCUISubsystem.OnLocalPlayerWidgetAddedInViewport
// (Final, Native, Private)
// Parameters:
// class UWidget*                          _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayer*                     _localPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::OnLocalPlayerWidgetAddedInViewport(class UWidget* _widget, class ULocalPlayer* _localPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUISubsystem", "OnLocalPlayerWidgetAddedInViewport");

	Params::SCUISubsystem_OnLocalPlayerWidgetAddedInViewport Parms{};

	Parms._widget = _widget;
	Parms._localPlayer = _localPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCUISubsystem.OnLocalPlayerWidgetRemovedInViewport
// (Final, Native, Private)
// Parameters:
// class UWidget*                          _widget                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCUISubsystem::OnLocalPlayerWidgetRemovedInViewport(class UWidget* _widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCUISubsystem", "OnLocalPlayerWidgetRemovedInViewport");

	Params::SCUISubsystem_OnLocalPlayerWidgetRemovedInViewport Parms{};

	Parms._widget = _widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVideoLightManager.BPF_ExportCurveFromLight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULocalLightComponent*             LightComponentToFind                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveLinearColor*                curveToFill                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVideoLightManager::BPF_ExportCurveFromLight(class ULocalLightComponent* LightComponentToFind, class UCurveLinearColor* curveToFill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVideoLightManager", "BPF_ExportCurveFromLight");

	Params::SCVideoLightManager_BPF_ExportCurveFromLight Parms{};

	Parms.LightComponentToFind = LightComponentToFind;
	Parms.curveToFill = curveToFill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVideoLightManager.PreCache
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaTexture*                    MediaTex                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMediaSource*                     MediaSource                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               SamplerMaterialBase                                    (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVideoLightManager::PreCache(class UMediaTexture* MediaTex, class UMediaSource* MediaSource, class UMaterialInterface* SamplerMaterialBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVideoLightManager", "PreCache");

	Params::SCVideoLightManager_PreCache Parms{};

	Parms.MediaTex = MediaTex;
	Parms.MediaSource = MediaSource;
	Parms.SamplerMaterialBase = SamplerMaterialBase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVideoSpotLightComponent.OnMediaOpen
// (Final, Native, Public)
// Parameters:
// const class FString&                    _openedUrl                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVideoSpotLightComponent::OnMediaOpen(const class FString& _openedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVideoSpotLightComponent", "OnMediaOpen");

	Params::SCVideoSpotLightComponent_OnMediaOpen Parms{};

	Parms._openedUrl = std::move(_openedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVideoRectLightComponent.OnMediaOpen
// (Final, Native, Public)
// Parameters:
// const class FString&                    _openedUrl                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVideoRectLightComponent::OnMediaOpen(const class FString& _openedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCVideoRectLightComponent", "OnMediaOpen");

	Params::SCVideoRectLightComponent_OnMediaOpen Parms{};

	Parms._openedUrl = std::move(_openedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_IsValidFilename
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            _outError                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCVisualLoggerHelper::BPF_IsValidFilename(const class FString& _fileName, class FText* _outError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_IsValidFilename");

	Params::SCVisualLoggerHelper_BPF_IsValidFilename Parms{};

	Parms._fileName = std::move(_fileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outError != nullptr)
		*_outError = std::move(Parms._outError);

	return Parms.ReturnValue;
}


// Function SCCore.SCVisualLoggerHelper.BPF_SetVisualLoggerPaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    _bPaused                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_SetVisualLoggerPaused(bool _bPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_SetVisualLoggerPaused");

	Params::SCVisualLoggerHelper_BPF_SetVisualLoggerPaused Parms{};

	Parms._bPaused = _bPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_TakeVisualLoggerSnapshot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    _fileName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            _outError                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USCVisualLoggerHelper::BPF_TakeVisualLoggerSnapshot(const class FString& _fileName, class FText* _outError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_TakeVisualLoggerSnapshot");

	Params::SCVisualLoggerHelper_BPF_TakeVisualLoggerSnapshot Parms{};

	Parms._fileName = std::move(_fileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outError != nullptr)
		*_outError = std::move(Parms._outError);

	return Parms.ReturnValue;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _inString                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _category                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDisplayLevel                           _eVerbosity                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog(const class FString& _inString, const class UObject* _logOwner, const class FString& _category, EDisplayLevel _eVerbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog");

	Params::SCVisualLoggerHelper_BPF_Vlog Parms{};

	Parms._inString = std::move(_inString);
	Parms._logOwner = _logOwner;
	Parms._category = std::move(_category);
	Parms._eVerbosity = _eVerbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Arrow
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSegmentStart                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSegmentEnd                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fArrowSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Arrow(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vSegmentStart, const struct FVector& _vSegmentEnd, float _fArrowSize, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Arrow");

	Params::SCVisualLoggerHelper_BPF_Vlog_Arrow Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vSegmentStart = std::move(_vSegmentStart);
	Parms._vSegmentEnd = std::move(_vSegmentEnd);
	Parms._fArrowSize = _fArrowSize;
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Box
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _position                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _size                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    _color                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Box(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FVector& _position, float _size, const struct FColor& _color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Box");

	Params::SCVisualLoggerHelper_BPF_Vlog_Box Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._position = std::move(_position);
	Parms._size = _size;
	Parms._color = std::move(_color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Capsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vCenter                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fHalfHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     _qRotation                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Capsule(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vCenter, float _fHalfHeight, float _fRadius, const struct FQuat& _qRotation, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Capsule");

	Params::SCVisualLoggerHelper_BPF_Vlog_Capsule Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vCenter = std::move(_vCenter);
	Parms._fHalfHeight = _fHalfHeight;
	Parms._fRadius = _fRadius;
	Parms._qRotation = std::move(_qRotation);
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Circle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vCenter                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Segments                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vYAxis                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vZAxis                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Circle(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vCenter, float _fRadius, int32 Segments, const struct FVector& _vYAxis, const struct FVector& _vZAxis, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Circle");

	Params::SCVisualLoggerHelper_BPF_Vlog_Circle Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vCenter = std::move(_vCenter);
	Parms._fRadius = _fRadius;
	Parms.Segments = Segments;
	Parms._vYAxis = std::move(_vYAxis);
	Parms._vZAxis = std::move(_vZAxis);
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Cylinder
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vStart                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vEnd                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Segments                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Cylinder(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vStart, const struct FVector& _vEnd, float _fRadius, int32 Segments, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Cylinder");

	Params::SCVisualLoggerHelper_BPF_Vlog_Cylinder Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vStart = std::move(_vStart);
	Parms._vEnd = std::move(_vEnd);
	Parms._fRadius = _fRadius;
	Parms.Segments = Segments;
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Location
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Location(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vLocation, float _fRadius, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Location");

	Params::SCVisualLoggerHelper_BPF_Vlog_Location Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vLocation = std::move(_vLocation);
	Parms._fRadius = _fRadius;
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Point
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Point(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vLocation, float _fSize, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Point");

	Params::SCVisualLoggerHelper_BPF_Vlog_Point Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vLocation = std::move(_vLocation);
	Parms._fSize = _fSize;
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCVisualLoggerHelper.BPF_Vlog_Segment
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    _logOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _displayPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _name                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              _color                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSegmentStart                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSegmentEnd                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   _iShapeIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bUseFirstPlayerPawn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCVisualLoggerHelper::BPF_Vlog_Segment(const class UObject* _logOwner, const class FString& _displayPath, const class FString& _name, const struct FLinearColor& _color, const struct FVector& _vSegmentStart, const struct FVector& _vSegmentEnd, int32 _iShapeIndex, bool _bUseFirstPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCVisualLoggerHelper", "BPF_Vlog_Segment");

	Params::SCVisualLoggerHelper_BPF_Vlog_Segment Parms{};

	Parms._logOwner = _logOwner;
	Parms._displayPath = std::move(_displayPath);
	Parms._name = std::move(_name);
	Parms._color = std::move(_color);
	Parms._vSegmentStart = std::move(_vSegmentStart);
	Parms._vSegmentEnd = std::move(_vSegmentEnd);
	Parms._iShapeIndex = _iShapeIndex;
	Parms._bUseFirstPlayerPawn = _bUseFirstPlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWidgetImage.SetMaterialScalar0
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialScalar0(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialScalar0");

	Params::SCWidgetImage_SetMaterialScalar0 Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWidgetImage.SetMaterialScalar1
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   _fValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialScalar1(float _fValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialScalar1");

	Params::SCWidgetImage_SetMaterialScalar1 Parms{};

	Parms._fValue = _fValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWidgetImage.SetMaterialTexture0
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>*       _texture                                               (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialTexture0(TSoftObjectPtr<class UTexture2D>* _texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialTexture0");

	Params::SCWidgetImage_SetMaterialTexture0 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_texture != nullptr)
		*_texture = Parms._texture;
}


// Function SCCore.SCWidgetImage.SetMaterialTexture1
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>*       _texture                                               (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialTexture1(TSoftObjectPtr<class UTexture2D>* _texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialTexture1");

	Params::SCWidgetImage_SetMaterialTexture1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_texture != nullptr)
		*_texture = Parms._texture;
}


// Function SCCore.SCWidgetImage.SetMaterialVector0
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  _vValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialVector0(const struct FVector4& _vValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialVector0");

	Params::SCWidgetImage_SetMaterialVector0 Parms{};

	Parms._vValue = std::move(_vValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWidgetImage.SetMaterialVector1
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  _vValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWidgetImage::SetMaterialVector1(const struct FVector4& _vValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWidgetImage", "SetMaterialVector1");

	Params::SCWidgetImage_SetMaterialVector1 Parms{};

	Parms._vValue = std::move(_vValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavControllerComponent.BPF_GoToSector
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTag&              _transitionType                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _sectorId                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWorldNavControllerComponent::BPF_GoToSector(const struct FGameplayTag& _transitionType, const struct FGameplayTag& _sectorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavControllerComponent", "BPF_GoToSector");

	Params::SCWorldNavControllerComponent_BPF_GoToSector Parms{};

	Parms._transitionType = std::move(_transitionType);
	Parms._sectorId = std::move(_sectorId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavControllerComponent.BPF_GetDebugColor
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USCWorldNavControllerComponent::BPF_GetDebugColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavControllerComponent", "BPF_GetDebugColor");

	Params::SCWorldNavControllerComponent_BPF_GetDebugColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCWorldNavSubsystem.BPF_CleanRefreshFlowGraphFromControllers
// (Final, Native, Protected, BlueprintCallable)

void USCWorldNavSubsystem::BPF_CleanRefreshFlowGraphFromControllers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavSubsystem", "BPF_CleanRefreshFlowGraphFromControllers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavSubsystem.BPF_GoToSector
// (Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTag&              _transitionType                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _sectorId                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _debugTransitionName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWorldNavSubsystem::BPF_GoToSector(const struct FGameplayTag& _transitionType, const struct FGameplayTag& _sectorId, const class FString& _debugTransitionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavSubsystem", "BPF_GoToSector");

	Params::SCWorldNavSubsystem_BPF_GoToSector Parms{};

	Parms._transitionType = std::move(_transitionType);
	Parms._sectorId = std::move(_sectorId);
	Parms._debugTransitionName = std::move(_debugTransitionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavSubsystem.BPF_RefreshFlowGraphFromControllers
// (Final, Native, Protected, BlueprintCallable)

void USCWorldNavSubsystem::BPF_RefreshFlowGraphFromControllers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavSubsystem", "BPF_RefreshFlowGraphFromControllers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavSubsystem.BPF_SpawnActorInWorldNavDataLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               _class                                                 (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCWorldNavSubsystem::BPF_SpawnActorInWorldNavDataLayer(TSubclassOf<class AActor> _class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavSubsystem", "BPF_SpawnActorInWorldNavDataLayer");

	Params::SCWorldNavSubsystem_BPF_SpawnActorInWorldNavDataLayer Parms{};

	Parms._class = _class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavTransitionControllerComponent.BPF_GoToSectorA
// (Native, Public)

void USCWorldNavTransitionControllerComponent::BPF_GoToSectorA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavTransitionControllerComponent", "BPF_GoToSectorA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldNavTransitionControllerComponent.BPF_GoToSectorB
// (Native, Public)

void USCWorldNavTransitionControllerComponent::BPF_GoToSectorB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCWorldNavTransitionControllerComponent", "BPF_GoToSectorB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCWorldSubsystemsContainer.BPF_GetWorldSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForceMainWorld                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCWorldSubsystem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCWorldSubsystem* USCWorldSubsystemsContainer::BPF_GetWorldSubsystem(const class UObject* _worldContext, const struct FGameplayTag& _tag, bool _bForceMainWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCWorldSubsystemsContainer", "BPF_GetWorldSubsystem");

	Params::SCWorldSubsystemsContainer_BPF_GetWorldSubsystem Parms{};

	Parms._worldContext = _worldContext;
	Parms._tag = std::move(_tag);
	Parms._bForceMainWorld = _bForceMainWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCWorldSubsystemsContainer.BPF_GetWorldSubsystemFromObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    _worldContext                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              _tag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bForceMainWorld                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCWorldSubsystem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCWorldSubsystem* USCWorldSubsystemsContainer::BPF_GetWorldSubsystemFromObject(const class UObject* _worldContext, const struct FGameplayTag& _tag, bool _bForceMainWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SCWorldSubsystemsContainer", "BPF_GetWorldSubsystemFromObject");

	Params::SCWorldSubsystemsContainer_BPF_GetWorldSubsystemFromObject Parms{};

	Parms._worldContext = _worldContext;
	Parms._tag = std::move(_tag);
	Parms._bForceMainWorld = _bForceMainWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueContainer.BPE_GetDataTable
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* IDataTableValueContainer::BPE_GetDataTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DataTableValueContainer", "BPE_GetDataTable");

	Params::DataTableValueContainer_BPE_GetDataTable Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SCCore.DataTableValueContainer.BPE_GetDataTableRowHandle
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FDataTableRowHandle*             _outHandle                                             (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void IDataTableValueContainer::BPE_GetDataTableRowHandle(struct FDataTableRowHandle* _outHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DataTableValueContainer", "BPE_GetDataTableRowHandle");

	Params::DataTableValueContainer_BPE_GetDataTableRowHandle Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (_outHandle != nullptr)
		*_outHandle = std::move(Parms._outHandle);
}


// Function SCCore.DataTableValueContainerActor.GetCustomDataTableStruct
// (Native, Public, Const)
// Parameters:
// class UScriptStruct*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptStruct* ADataTableValueContainerActor::GetCustomDataTableStruct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataTableValueContainerActor", "GetCustomDataTableStruct");

	Params::DataTableValueContainerActor_GetCustomDataTableStruct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TagAvailabilityLayerHelpers.GetContainerEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FTagAvailabilityLayerContainerInstance&_tags                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTagAvailabilityLayerHelpers::GetContainerEditorDesc(const struct FTagAvailabilityLayerContainerInstance& _tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TagAvailabilityLayerHelpers", "GetContainerEditorDesc");

	Params::TagAvailabilityLayerHelpers_GetContainerEditorDesc Parms{};

	Parms._tags = std::move(_tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TagAvailabilityLayerHelpers.GetTagsEditorDesc
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const struct FTagAvailabilityLayer&     _tags                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTagAvailabilityLayerHelpers::GetTagsEditorDesc(const struct FTagAvailabilityLayer& _tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TagAvailabilityLayerHelpers", "GetTagsEditorDesc");

	Params::TagAvailabilityLayerHelpers_GetTagsEditorDesc Parms{};

	Parms._tags = std::move(_tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.LatentTargetDatasource.OnTick
// (Native, Public)
// Parameters:
// float                                   _fDt                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULatentTargetDatasource::OnTick(float _fDt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LatentTargetDatasource", "OnTick");

	Params::LatentTargetDatasource_OnTick Parms{};

	Parms._fDt = _fDt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TargetDatasourceHelpers.BPF_GetDatasourceInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTargetDatasourceInstance& _instance                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UTargetDatasource*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetDatasource* UTargetDatasourceHelpers::BPF_GetDatasourceInstance(const struct FTargetDatasourceInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_GetDatasourceInstance");

	Params::TargetDatasourceHelpers_BPF_GetDatasourceInstance Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDatasourceHelpers.BPF_PickTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UTargetDatasource>    _datasource                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UTargetPicker>        _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*_outTargetData                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// class UObject*                          _ownerObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetDatasourceHelpers::BPF_PickTarget(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _context, TSubclassOf<class UTargetDatasource> _datasource, TSubclassOf<class UTargetPicker> _picker, struct FGameplayAbilityTargetDataHandle* _outTargetData, class UObject* _ownerObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_PickTarget");

	Params::TargetDatasourceHelpers_BPF_PickTarget Parms{};

	Parms._actor = _actor;
	Parms._context = std::move(_context);
	Parms._datasource = _datasource;
	Parms._picker = _picker;
	Parms._ownerObject = _ownerObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outTargetData != nullptr)
		*_outTargetData = std::move(Parms._outTargetData);
}


// Function SCCore.TargetDatasourceHelpers.BPF_PickTargetOnProvider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FOnDemandTargetProvider&   _provider                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle*outTargetData                                          (Parm, OutParm, NativeAccessSpecifierPublic)

void UTargetDatasourceHelpers::BPF_PickTargetOnProvider(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _context, const struct FOnDemandTargetProvider& _provider, struct FGameplayAbilityTargetDataHandle* outTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_PickTargetOnProvider");

	Params::TargetDatasourceHelpers_BPF_PickTargetOnProvider Parms{};

	Parms._actor = _actor;
	Parms._context = std::move(_context);
	Parms._provider = std::move(_provider);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (outTargetData != nullptr)
		*outTargetData = std::move(Parms.outTargetData);
}


// Function SCCore.TargetDatasourceHelpers.BPF_PickTargets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UTargetDatasource>    _datasource                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UTargetPicker>        _picker                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGameplayAbilityTargetDataHandle>*_outTargetData                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetDatasourceHelpers::BPF_PickTargets(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _context, TSubclassOf<class UTargetDatasource> _datasource, TSubclassOf<class UTargetPicker> _picker, TArray<struct FGameplayAbilityTargetDataHandle>* _outTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_PickTargets");

	Params::TargetDatasourceHelpers_BPF_PickTargets Parms{};

	Parms._actor = _actor;
	Parms._context = std::move(_context);
	Parms._datasource = _datasource;
	Parms._picker = _picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outTargetData != nullptr)
		*_outTargetData = std::move(Parms._outTargetData);
}


// Function SCCore.TargetDatasourceHelpers.BPF_ValidateTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FOnDemandTargetProvider&   _provider                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_target                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bValidateEmptyTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetDatasourceHelpers::BPF_ValidateTarget(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _context, const struct FOnDemandTargetProvider& _provider, const struct FGameplayAbilityTargetDataHandle& _target, bool _bValidateEmptyTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_ValidateTarget");

	Params::TargetDatasourceHelpers_BPF_ValidateTarget Parms{};

	Parms._actor = _actor;
	Parms._context = std::move(_context);
	Parms._provider = std::move(_provider);
	Parms._target = std::move(_target);
	Parms._bValidateEmptyTarget = _bValidateEmptyTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TargetDatasourceHelpers.BPF_ValidateTargetBranch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_context                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FOnDemandTargetProvider&   _provider                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_target                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETargetValidationResult*                _outResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bValidateEmptyTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetDatasourceHelpers::BPF_ValidateTargetBranch(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _context, const struct FOnDemandTargetProvider& _provider, const struct FGameplayAbilityTargetDataHandle& _target, ETargetValidationResult* _outResult, bool _bValidateEmptyTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetDatasourceHelpers", "BPF_ValidateTargetBranch");

	Params::TargetDatasourceHelpers_BPF_ValidateTargetBranch Parms{};

	Parms._actor = _actor;
	Parms._context = std::move(_context);
	Parms._provider = std::move(_provider);
	Parms._target = std::move(_target);
	Parms._bValidateEmptyTarget = _bValidateEmptyTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_outResult != nullptr)
		*_outResult = Parms._outResult;
}


// Function SCCore.TargetLocationCurveCondition.BPF_DrawDebugCurveCondition
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetLocationCurveCondition::BPF_DrawDebugCurveCondition(const class AActor* _actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetLocationCurveCondition", "BPF_DrawDebugCurveCondition");

	Params::TargetLocationCurveCondition_BPF_DrawDebugCurveCondition Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TargetReachableOnTimeWithLocoCondition.BPF_EvaluateTargetSpeed
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayAbilityTargetDataHandle&_handle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    _bLog                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETargetReachableOnTimeWithLocoCondition_ResultReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETargetReachableOnTimeWithLocoCondition_Result UTargetReachableOnTimeWithLocoCondition::BPF_EvaluateTargetSpeed(const class AActor* _actor, const struct FGameplayAbilityTargetDataHandle& _handle, bool _bLog) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetReachableOnTimeWithLocoCondition", "BPF_EvaluateTargetSpeed");

	Params::TargetReachableOnTimeWithLocoCondition_BPF_EvaluateTargetSpeed Parms{};

	Parms._actor = _actor;
	Parms._handle = std::move(_handle);
	Parms._bLog = _bLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TestModel.BPF_ResetForm
// (Final, Native, Public, BlueprintCallable)

void UTestModel::BPF_ResetForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestModel", "BPF_ResetForm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestModel.BPF_ValidateForm_A
// (Final, Native, Public, BlueprintCallable)

void UTestModel::BPF_ValidateForm_A()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestModel", "BPF_ValidateForm_A");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestModel.DeInitialize
// (Final, Native, Public, BlueprintCallable)

void UTestModel::DeInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestModel", "DeInitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestModel.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    _worldContextObj                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestModel::Initialize(const class UObject* _worldContextObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestModel", "Initialize");

	Params::TestModel_Initialize Parms{};

	Parms._worldContextObj = _worldContextObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestViewModel.BPF_SetChildFirstName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iChildIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _newName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestViewModel::BPF_SetChildFirstName(int32 _iChildIndex, const class FString& _newName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestViewModel", "BPF_SetChildFirstName");

	Params::TestViewModel_BPF_SetChildFirstName Parms{};

	Parms._iChildIndex = _iChildIndex;
	Parms._newName = std::move(_newName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestViewModel.BPF_SetChildLastName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iChildIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _newName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestViewModel::BPF_SetChildLastName(int32 _iChildIndex, const class FString& _newName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestViewModel", "BPF_SetChildLastName");

	Params::TestViewModel_BPF_SetChildLastName Parms{};

	Parms._iChildIndex = _iChildIndex;
	Parms._newName = std::move(_newName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestViewModel.BPF_SetChildViewModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   _iChildIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTestViewModelChild*              _childViewModel                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestViewModel::BPF_SetChildViewModel(int32 _iChildIndex, class UTestViewModelChild* _childViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestViewModel", "BPF_SetChildViewModel");

	Params::TestViewModel_BPF_SetChildViewModel Parms{};

	Parms._iChildIndex = _iChildIndex;
	Parms._childViewModel = _childViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.TestViewModel.GetChildViewModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   _iIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTestViewModelChild*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTestViewModelChild* UTestViewModel::GetChildViewModel(int32 _iIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestViewModel", "GetChildViewModel");

	Params::TestViewModel_GetChildViewModel Parms{};

	Parms._iIndex = _iIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TransitionRotationPointsHelper.BPF_AngleRadToTransitionRotation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   _fAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bOnly90DegSteps                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETransitionRotation                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETransitionRotation UTransitionRotationPointsHelper::BPF_AngleRadToTransitionRotation(float _fAngle, bool _bOnly90DegSteps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TransitionRotationPointsHelper", "BPF_AngleRadToTransitionRotation");

	Params::TransitionRotationPointsHelper_BPF_AngleRadToTransitionRotation Parms{};

	Parms._fAngle = _fAngle;
	Parms._bOnly90DegSteps = _bOnly90DegSteps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.TransitionRotationPointsHelper.BPF_CardinalDiffToTransitionRotation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESCCardinalPoints                       _eInCardinal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESCCardinalPoints                       _eOutCardinal                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETransitionRotation                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETransitionRotation UTransitionRotationPointsHelper::BPF_CardinalDiffToTransitionRotation(ESCCardinalPoints _eInCardinal, ESCCardinalPoints _eOutCardinal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TransitionRotationPointsHelper", "BPF_CardinalDiffToTransitionRotation");

	Params::TransitionRotationPointsHelper_BPF_CardinalDiffToTransitionRotation Parms{};

	Parms._eInCardinal = _eInCardinal;
	Parms._eOutCardinal = _eOutCardinal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.BlueprintableVisibilityAsOptionWidgetComponent.BPE_SetWidgetVisibility
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USCUserWidget*                    _userWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintableVisibilityAsOptionWidgetComponent::BPE_SetWidgetVisibility(class USCUserWidget* _userWidget, bool _bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintableVisibilityAsOptionWidgetComponent", "BPE_SetWidgetVisibility");

	Params::BlueprintableVisibilityAsOptionWidgetComponent_BPE_SetWidgetVisibility Parms{};

	Parms._userWidget = _userWidget;
	Parms._bVisible = _bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SCCore.TargetWeightEvaluationHelpers.GetEditorDesc
// (Final, Native, Static, Private, HasOutParams)
// Parameters:
// const struct FTargetWeightEvaluationInstance&_instance                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetWeightEvaluationHelpers::GetEditorDesc(const struct FTargetWeightEvaluationInstance& _instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetWeightEvaluationHelpers", "GetEditorDesc");

	Params::TargetWeightEvaluationHelpers_GetEditorDesc Parms{};

	Parms._instance = std::move(_instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_ApplyRootMotionTransition_Base.ApplyRootMotionStaticTransition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCTransitionDB>      _transitionDB                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vStartVelocity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWasOrientedToMovement                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vWantedDir                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERootMotionFinishVelocityMode           _eVelocityOnFinishMode                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSetVelocityOnFinish                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fClampVelocityOnFinish                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ApplyRootMotionTransition_Base*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ApplyRootMotionTransition_Base* UAbilityTask_ApplyRootMotionTransition_Base::ApplyRootMotionStaticTransition(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class USCTransitionDB> _transitionDB, const struct FSCTransition& _transition, const struct FVector& _vStartVelocity, bool _bWasOrientedToMovement, const struct FVector& _vWantedDir, ERootMotionFinishVelocityMode _eVelocityOnFinishMode, const struct FVector& _vSetVelocityOnFinish, float _fClampVelocityOnFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ApplyRootMotionTransition_Base", "ApplyRootMotionStaticTransition");

	Params::AbilityTask_ApplyRootMotionTransition_Base_ApplyRootMotionStaticTransition Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._transitionDB = _transitionDB;
	Parms._transition = std::move(_transition);
	Parms._vStartVelocity = std::move(_vStartVelocity);
	Parms._bWasOrientedToMovement = _bWasOrientedToMovement;
	Parms._vWantedDir = std::move(_vWantedDir);
	Parms._eVelocityOnFinishMode = _eVelocityOnFinishMode;
	Parms._vSetVelocityOnFinish = std::move(_vSetVelocityOnFinish);
	Parms._fClampVelocityOnFinish = _fClampVelocityOnFinish;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.AbilityTask_ApplyRootMotionTransition_Base.BPF_StopTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETransitionStopReason                   _eStopReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_ApplyRootMotionTransition_Base::BPF_StopTransition(ETransitionStopReason _eStopReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_ApplyRootMotionTransition_Base", "BPF_StopTransition");

	Params::AbilityTask_ApplyRootMotionTransition_Base_BPF_StopTransition Parms{};

	Parms._eStopReason = _eStopReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.AbilityTask_ApplyRootMotionTransition.ApplyRootMotionTransition
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 _owningAbility                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             _taskInstanceName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCTransitionDB>      _transitionDB                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSCTransition&             _transition                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vStartVelocity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bWasOrientedToMovement                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vWantedDir                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERootMotionFinishVelocityMode           _eVelocityOnFinishMode                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   _vSetVelocityOnFinish                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   _fClampVelocityOnFinish                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCInputAction*                   _action                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   _uiPendingMoveDirectionUID                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_ApplyRootMotionTransition*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_ApplyRootMotionTransition* UAbilityTask_ApplyRootMotionTransition::ApplyRootMotionTransition(class UGameplayAbility* _owningAbility, class FName _taskInstanceName, TSubclassOf<class USCTransitionDB> _transitionDB, const struct FSCTransition& _transition, const struct FVector& _vStartVelocity, bool _bWasOrientedToMovement, const struct FVector& _vWantedDir, ERootMotionFinishVelocityMode _eVelocityOnFinishMode, const struct FVector& _vSetVelocityOnFinish, float _fClampVelocityOnFinish, class USCInputAction* _action, uint8 _uiPendingMoveDirectionUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_ApplyRootMotionTransition", "ApplyRootMotionTransition");

	Params::AbilityTask_ApplyRootMotionTransition_ApplyRootMotionTransition Parms{};

	Parms._owningAbility = _owningAbility;
	Parms._taskInstanceName = _taskInstanceName;
	Parms._transitionDB = _transitionDB;
	Parms._transition = std::move(_transition);
	Parms._vStartVelocity = std::move(_vStartVelocity);
	Parms._bWasOrientedToMovement = _bWasOrientedToMovement;
	Parms._vWantedDir = std::move(_vWantedDir);
	Parms._eVelocityOnFinishMode = _eVelocityOnFinishMode;
	Parms._vSetVelocityOnFinish = std::move(_vSetVelocityOnFinish);
	Parms._fClampVelocityOnFinish = _fClampVelocityOnFinish;
	Parms._action = _action;
	Parms._uiPendingMoveDirectionUID = _uiPendingMoveDirectionUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SubsystemDynamicPossession.FindSubsystemBindingByClass
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCSubsystem>         Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneDynamicBindingResolveResultReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMovieSceneDynamicBindingResolveResult USubsystemDynamicPossession::FindSubsystemBindingByClass(class UObject* WorldContextObject, TSubclassOf<class USCSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubsystemDynamicPossession", "FindSubsystemBindingByClass");

	Params::SubsystemDynamicPossession_FindSubsystemBindingByClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SubsystemDynamicPossession.FindSubsystemInstanceByClass
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USCSubsystem>         Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USCSubsystem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USCSubsystem* USubsystemDynamicPossession::FindSubsystemInstanceByClass(class UObject* WorldContextObject, TSubclassOf<class USCSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubsystemDynamicPossession", "FindSubsystemInstanceByClass");

	Params::SubsystemDynamicPossession_FindSubsystemInstanceByClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerfStatWidgetBase.FetchStatValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCPerfStatWidgetBase::FetchStatValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerfStatWidgetBase", "FetchStatValue");

	Params::SCPerfStatWidgetBase_FetchStatValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerfStatWidgetBase.GetStatToDisplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCDisplayablePerformanceStat           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESCDisplayablePerformanceStat USCPerfStatWidgetBase::GetStatToDisplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerfStatWidgetBase", "GetStatToDisplay");

	Params::SCPerfStatWidgetBase_GetStatToDisplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSimulatedInputWidget.FlushSimulatedInput
// (Final, Native, Public, BlueprintCallable)

void USCSimulatedInputWidget::FlushSimulatedInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "FlushSimulatedInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSimulatedInputWidget.InputKeyValue
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSimulatedInputWidget::InputKeyValue(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "InputKeyValue");

	Params::SCSimulatedInputWidget_InputKeyValue Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSimulatedInputWidget.InputKeyValue2D
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USCSimulatedInputWidget::InputKeyValue2D(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "InputKeyValue2D");

	Params::SCSimulatedInputWidget_InputKeyValue2D Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSimulatedInputWidget.OnControlMappingsRebuilt
// (Final, Native, Protected)

void USCSimulatedInputWidget::OnControlMappingsRebuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "OnControlMappingsRebuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SCCore.SCSimulatedInputWidget.GetAssociatedAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UInputAction*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInputAction* USCSimulatedInputWidget::GetAssociatedAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "GetAssociatedAction");

	Params::SCSimulatedInputWidget_GetAssociatedAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSimulatedInputWidget.GetEnhancedInputSubsystem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UEnhancedInputLocalPlayerSubsystem*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnhancedInputLocalPlayerSubsystem* USCSimulatedInputWidget::GetEnhancedInputSubsystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "GetEnhancedInputSubsystem");

	Params::SCSimulatedInputWidget_GetEnhancedInputSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCSimulatedInputWidget.GetSimulatedKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey USCSimulatedInputWidget::GetSimulatedKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCSimulatedInputWidget", "GetSimulatedKey");

	Params::SCSimulatedInputWidget_GetSimulatedKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SCCore.SCPerformanceStatSubsystem.GetCachedStat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESCDisplayablePerformanceStat           _eStat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USCPerformanceStatSubsystem::GetCachedStat(ESCDisplayablePerformanceStat _eStat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SCPerformanceStatSubsystem", "GetCachedStat");

	Params::SCPerformanceStatSubsystem_GetCachedStat Parms{};

	Parms._eStat = _eStat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

