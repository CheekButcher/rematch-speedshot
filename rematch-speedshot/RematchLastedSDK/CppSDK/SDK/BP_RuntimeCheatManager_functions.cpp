#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RuntimeCheatManager

#include "Basic.hpp"

#include "BP_RuntimeCheatManager_classes.hpp"
#include "BP_RuntimeCheatManager_parameters.hpp"


namespace SDK
{

// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ActivateDiveAimAssist
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ActivateDiveAimAssist(bool bToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ActivateDiveAimAssist");

	Params::BP_RuntimeCheatManager_C_ActivateDiveAimAssist Parms{};

	Parms.bToggled = bToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.CmdHideHUD
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::CmdHideHUD(bool bToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "CmdHideHUD");

	Params::BP_RuntimeCheatManager_C_CmdHideHUD Parms{};

	Parms.bToggled = bToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Debug AI Spawn
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAITeamOnSpawn                          _Spawn_Parameters_Team_On_Spawn                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Debug_AI_Spawn(EAITeamOnSpawn _Spawn_Parameters_Team_On_Spawn, double B, const struct FVector& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Debug AI Spawn");

	Params::BP_RuntimeCheatManager_C_Debug_AI_Spawn Parms{};

	Parms._Spawn_Parameters_Team_On_Spawn = _Spawn_Parameters_Team_On_Spawn;
	Parms.B = B;
	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ExecuteDebugCmd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CmdName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ExecuteDebugCmd(class FName CmdName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ExecuteDebugCmd");

	Params::BP_RuntimeCheatManager_C_ExecuteDebugCmd Parms{};

	Parms.CmdName = CmdName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ExecuteUbergraph_BP_RuntimeCheatManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ExecuteUbergraph_BP_RuntimeCheatManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ExecuteUbergraph_BP_RuntimeCheatManager");

	Params::BP_RuntimeCheatManager_C_ExecuteUbergraph_BP_RuntimeCheatManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Add_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Add_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Add_K2Node_InputKeyEvent_4");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Add_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Alt_A_AccentGrave_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Alt_A_AccentGrave_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Alt_A_AccentGrave_K2Node_InputKeyEvent_6");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Alt_A_AccentGrave_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Alt_NumPadZero_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Alt_NumPadZero_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Alt_NumPadZero_K2Node_InputKeyEvent_7");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Alt_NumPadZero_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Alt_Zero_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Alt_Zero_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Alt_Zero_K2Node_InputKeyEvent_5");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Alt_Zero_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_1");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_2");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_NumPadEight_K2Node_InputKeyEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_NumPadEight_K2Node_InputKeyEvent_10");

	Params::BP_RuntimeCheatManager_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_NumPadFive_K2Node_InputKeyEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_NumPadFive_K2Node_InputKeyEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_NumPadFive_K2Node_InputKeyEvent_12");

	Params::BP_RuntimeCheatManager_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_NumPadNine_K2Node_InputKeyEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_NumPadNine_K2Node_InputKeyEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_NumPadNine_K2Node_InputKeyEvent_9");

	Params::BP_RuntimeCheatManager_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_NumPadOne_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_NumPadOne_K2Node_InputKeyEvent_8");

	Params::BP_RuntimeCheatManager_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11");

	Params::BP_RuntimeCheatManager_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_R_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_R_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_R_K2Node_InputKeyEvent_0");

	Params::BP_RuntimeCheatManager_C_InpActEvt_R_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.InpActEvt_Subtract_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::InpActEvt_Subtract_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "InpActEvt_Subtract_K2Node_InputKeyEvent_3");

	Params::BP_RuntimeCheatManager_C_InpActEvt_Subtract_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Is Controller Debug Displayed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_RuntimeCheatManager_C::Is_Controller_Debug_Displayed(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Is Controller Debug Displayed");

	Params::BP_RuntimeCheatManager_C_Is_Controller_Debug_Displayed Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.On Simplified Custo Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::On_Simplified_Custo_Changed(bool bToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "On Simplified Custo Changed");

	Params::BP_RuntimeCheatManager_C_On_Simplified_Custo_Changed Parms{};

	Parms.bToggled = bToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.On Toggle Display Controller Debug Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::On_Toggle_Display_Controller_Debug_Changed(bool bToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "On Toggle Display Controller Debug Changed");

	Params::BP_RuntimeCheatManager_C_On_Toggle_Display_Controller_Debug_Changed Parms{};

	Parms.bToggled = bToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.OnPawnChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            NewPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            OldPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::OnPawnChanged(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "OnPawnChanged");

	Params::BP_RuntimeCheatManager_C_OnPawnChanged Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.OnPawnSet
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::OnPawnSet(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "OnPawnSet");

	Params::BP_RuntimeCheatManager_C_OnPawnSet Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.OnPlayerStateAdded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     _PlayerStateAdded                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::OnPlayerStateAdded(class APlayerState* _PlayerStateAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "OnPlayerStateAdded");

	Params::BP_RuntimeCheatManager_C_OnPlayerStateAdded Parms{};

	Parms._PlayerStateAdded = _PlayerStateAdded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)

void UBP_RuntimeCheatManager_C::ReceiveEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ReceiveEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ReceiveInitCheatManager
// (Event, Public, BlueprintEvent)

void UBP_RuntimeCheatManager_C::ReceiveInitCheatManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ReceiveInitCheatManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.RefreshPawns
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::RefreshPawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "RefreshPawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.RegisterDebugCmds
// (BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::RegisterDebugCmds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "RegisterDebugCmds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ResetSteamAchievements
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ResetSteamAchievements(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ResetSteamAchievements");

	Params::BP_RuntimeCheatManager_C_ResetSteamAchievements Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ServerRefillFullStamina
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           inTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ServerRefillFullStamina(class AActor* inTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ServerRefillFullStamina");

	Params::BP_RuntimeCheatManager_C_ServerRefillFullStamina Parms{};

	Parms.inTarget = inTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ServerResetBallAtLocation
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ServerResetBallAtLocation(const struct FVector& InLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ServerResetBallAtLocation");

	Params::BP_RuntimeCheatManager_C_ServerResetBallAtLocation Parms{};

	Parms.InLocation = std::move(InLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ServerResetBallVelocity
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ServerResetBallVelocity(const struct FVector& Pos, const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ServerResetBallVelocity");

	Params::BP_RuntimeCheatManager_C_ServerResetBallVelocity Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ServerResetCharacterAtLocationAndRotation
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rot                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RuntimeCheatManager_C::ServerResetCharacterAtLocationAndRotation(const struct FVector& Pos, const struct FRotator& Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ServerResetCharacterAtLocationAndRotation");

	Params::BP_RuntimeCheatManager_C_ServerResetCharacterAtLocationAndRotation Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Rot = std::move(Rot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ServerSpawnBall
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARuntimeCharacter*                InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    TakeBall                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ServerSpawnBall(class ARuntimeCharacter* InActor, bool TakeBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ServerSpawnBall");

	Params::BP_RuntimeCheatManager_C_ServerSpawnBall Parms{};

	Parms.InActor = InActor;
	Parms.TakeBall = TakeBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.SetControllerDebugInViewport
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::SetControllerDebugInViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "SetControllerDebugInViewport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Setup Spawn AI Event
// (BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::Setup_Spawn_AI_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Setup Spawn AI Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.SetupAchievementsDebug
// (BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::SetupAchievementsDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "SetupAchievementsDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ShowForcedRenderStats
// (BlueprintCallable, BlueprintEvent)

void UBP_RuntimeCheatManager_C::ShowForcedRenderStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ShowForcedRenderStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.SnapNearestBall
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MenuEnumHandler                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TakeBall                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::SnapNearestBall(bool MenuEnumHandler, bool TakeBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "SnapNearestBall");

	Params::BP_RuntimeCheatManager_C_SnapNearestBall Parms{};

	Parms.MenuEnumHandler = MenuEnumHandler;
	Parms.TakeBall = TakeBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Spawn AI As Opponent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Spawn_AI_As_Opponent(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Spawn AI As Opponent");

	Params::BP_RuntimeCheatManager_C_Spawn_AI_As_Opponent Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Spawn AI As Teammate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Spawn_AI_As_Teammate(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Spawn AI As Teammate");

	Params::BP_RuntimeCheatManager_C_Spawn_AI_As_Teammate Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Spawn both teams
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Spawn_both_teams(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Spawn both teams");

	Params::BP_RuntimeCheatManager_C_Spawn_both_teams Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ToggleDebug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ToggleDebug(bool bToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ToggleDebug");

	Params::BP_RuntimeCheatManager_C_ToggleDebug Parms{};

	Parms.bToggled = bToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.ToggleMarketCameraPreset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::ToggleMarketCameraPreset(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "ToggleMarketCameraPreset");

	Params::BP_RuntimeCheatManager_C_ToggleMarketCameraPreset Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Trigger Save Progression Achievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Trigger_Save_Progression_Achievement(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Trigger Save Progression Achievement");

	Params::BP_RuntimeCheatManager_C_Trigger_Save_Progression_Achievement Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.TriggerPrologueAchievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::TriggerPrologueAchievement(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "TriggerPrologueAchievement");

	Params::BP_RuntimeCheatManager_C_TriggerPrologueAchievement Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RuntimeCheatManager.BP_RuntimeCheatManager_C.Can Execute Debug Commands
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RuntimeCheatManager_C::Can_Execute_Debug_Commands(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RuntimeCheatManager_C", "Can Execute Debug Commands");

	Params::BP_RuntimeCheatManager_C_Can_Execute_Debug_Commands Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

