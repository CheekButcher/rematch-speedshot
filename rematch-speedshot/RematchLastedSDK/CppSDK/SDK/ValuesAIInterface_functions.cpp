#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValuesAIInterface

#include "Basic.hpp"

#include "ValuesAIInterface_classes.hpp"
#include "ValuesAIInterface_parameters.hpp"


namespace SDK
{

// Function ValuesAIInterface.ValuesAIInterface_C.GetAbilityToUse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAbilityShootType*                      OutAbilityToUse                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetAbilityToUse(EAbilityShootType* OutAbilityToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetAbilityToUse");

	Params::ValuesAIInterface_C_GetAbilityToUse Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutAbilityToUse != nullptr)
		*OutAbilityToUse = Parms.OutAbilityToUse;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetAimedDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetAimedDirection(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetAimedDirection");

	Params::ValuesAIInterface_C_GetAimedDirection Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetAimingPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsAimingPlayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetAimingPlayer(bool* IsAimingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetAimingPlayer");

	Params::ValuesAIInterface_C_GetAimingPlayer Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsAimingPlayer != nullptr)
		*IsAimingPlayer = Parms.IsAimingPlayer;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetCardinalOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESCCardinalPoints*                      OutCardinalOffset                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetCardinalOffset(ESCCardinalPoints* OutCardinalOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetCardinalOffset");

	Params::ValuesAIInterface_C_GetCardinalOffset Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutCardinalOffset != nullptr)
		*OutCardinalOffset = Parms.OutCardinalOffset;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutHeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetHeight(double* OutHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetHeight");

	Params::ValuesAIInterface_C_GetHeight Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutHeight != nullptr)
		*OutHeight = Parms.OutHeight;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetOffset(double* OutOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetOffset");

	Params::ValuesAIInterface_C_GetOffset Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutOffset != nullptr)
		*OutOffset = Parms.OutOffset;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetOriginalPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         OutOriginPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetOriginalPosition(struct FVector* OutOriginPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetOriginalPosition");

	Params::ValuesAIInterface_C_GetOriginalPosition Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutOriginPosition != nullptr)
		*OutOriginPosition = std::move(Parms.OutOriginPosition);
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetOriginalRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IValuesAIInterface_C::GetOriginalRotation(struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetOriginalRotation");

	Params::ValuesAIInterface_C_GetOriginalRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetShootAnimNetDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutShootAnimNetDelay                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IValuesAIInterface_C::GetShootAnimNetDelay(double* OutShootAnimNetDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetShootAnimNetDelay");

	Params::ValuesAIInterface_C_GetShootAnimNetDelay Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutShootAnimNetDelay != nullptr)
		*OutShootAnimNetDelay = Parms.OutShootAnimNetDelay;
}


// Function ValuesAIInterface.ValuesAIInterface_C.GetShootForce
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShootForceComputationInstance*  OutForce                                               (Parm, OutParm, NoDestructor, ContainsInstancedReference)

void IValuesAIInterface_C::GetShootForce(struct FShootForceComputationInstance* OutForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ValuesAIInterface_C", "GetShootForce");

	Params::ValuesAIInterface_C_GetShootForce Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutForce != nullptr)
		*OutForce = std::move(Parms.OutForce);
}

}

