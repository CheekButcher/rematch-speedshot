#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPrivateProfileViewModel

#include "Basic.hpp"

#include "BPE_StatUnit_structs.hpp"
#include "SOSBindings_classes.hpp"
#include "SOS_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPrivateProfileViewModel.BP_PlayerPrivateProfileViewModel_C
// 0x0010 (0x0110 - 0x0100)
class UBP_PlayerPrivateProfileViewModel_C final : public UPlayerPrivateProfileViewModel
{
public:
	int32                                         LeagueCount;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DivisionCount;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlacementMatchCount;                               // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	double Get_CurrentLvlXP_FloatProgressBar() const;
	int32 Get_Next_Level() const;
	void Get_Placement_Match_Status(int32 Index_0, const class FString& GameMode, bool* IsPlacementMatchCompleted) const;
	void GetCurrentDivision(const class FString& GameMode, int32* Division) const;
	void GetCurrentLeague(const class FString& GameMode, int32* League) const;
	void GetCurrentRankUIData(const class FString& GameMode, struct FUIRankedLeagues* LeagueUIData) const;
	void GetCurrentSeasonRankPoints(const class FString& GameMode, int32* Current_Season_Rank_Point) const;
	void GetHighestRankGameMode(ESOSGameType* GameMode) const;
	void GetLastMatchColorAtIndex(int32 Index_0, struct FLinearColor* Color) const;
	void GetLastMatchesCountAsText(class FText* Matches) const;
	void GetLastMatchIconAtIndex(int32 Index_0, TSoftObjectPtr<class UTexture2D>* Icon) const;
	void GetLastSeasonDivision(const class FString& GameMode, int32* Division) const;
	void GetLastSeasonLeague(const class FString& GameMode, int32* League) const;
	void GetLastWinsCountAsText(class FText* Wins) const;
	void GetLeagueUIData(int32 LeagueID, int32 DivID, struct FUIRankedLeagues* LeagueUIData) const;
	void GetLossPercent(const class FString& GameMode, int32* Percent) const;
	void GetLossPercentAsText(const class FString& GameMode, class FText* Percent) const;
	void GetMostPlayedGameMode(ESOSGameType* GameMode) const;
	void GetNextRankDivision(const class FString& GameMode, int32* Division) const;
	void GetNextRankLeague(const class FString& GameMode, int32* League) const;
	void GetNextRankUIData(const class FString& GameMode, struct FUIRankedLeagues* LeagueUIData) const;
	void GetPrivateRankedDataForGameMode(const class FString& GameMode, class USOSPlayerProfilePrivateRankData** PrivateRankedData) const;
	void GetRankedDataForGameMode(const class FString& GameMode, class USOSPlayerProfileRankGameModeViewData** RankData) const;
	void GetSeasonEndStatsGameMode(ESOSGameType* GameMode) const;
	void GetSeasonEndStatsGameModeName(class FText* Name_0) const;
	void GetSeasonEndStatsViewModel(class USOSPlayerProfileStatisticsViewData** VM) const;
	void GetStatFormattedValue(double Stat, EBPE_StatUnit Unit, class FText* FormattedValue) const;
	void GetTotalMatchesAsText(class FText* Matches) const;
	void GetWinPercent(const class FString& GameMode, int32* Percent) const;
	void GetWinPercentAsText(const class FString& GameMode, class FText* Percent) const;
	void HasPlacementMatches(const class FString& GameMode, bool* bHasMatches) const;
	void IsCurrentLeagueLast(const class FString& GameMode, bool* bLastLeague) const;
	void IsNextRankLeagueLast(const class FString& GameMode, bool* bLastLeague) const;
	void IsRankedInCurrentSeason(const class FString& GameMode, bool* bRanked) const;
	void IsUnrankedInCurrentSeason(const class FString& GameMode, bool* bUnranked) const;
	void WasRankedInPreviousSeason(const class FString& GameMode, bool* bRanked) const;

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_PlayerPrivateProfileViewModel_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_PlayerPrivateProfileViewModel_C")
	}
	static class UBP_PlayerPrivateProfileViewModel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerPrivateProfileViewModel_C>();
	}
};
DUMPER7_ASSERTS_UBP_PlayerPrivateProfileViewModel_C;

}

