#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VM_CustomFriendSystem

#include "Basic.hpp"

#include "BP_VM_CustomFriendSystem_classes.hpp"
#include "BP_VM_CustomFriendSystem_parameters.hpp"


namespace SDK
{

// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.Get Online and Offline Friends
// (Exec, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OnlineFriends                                          (Parm, OutParm)
// TArray<class UFriendViewModel*>*        OfflineFriends                                         (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::Get_Online_and_Offline_Friends(TArray<class UFriendViewModel*>* OnlineFriends, TArray<class UFriendViewModel*>* OfflineFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "Get Online and Offline Friends");

	Params::BP_VM_CustomFriendSystem_C_Get_Online_and_Offline_Friends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineFriends != nullptr)
		*OnlineFriends = std::move(Parms.OnlineFriends);

	if (OfflineFriends != nullptr)
		*OfflineFriends = std::move(Parms.OfflineFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayInviteReceived
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        CrossplayInviteReceived                                (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayInviteReceived(TArray<class UFriendViewModel*>* CrossplayInviteReceived) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayInviteReceived");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayInviteReceived Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CrossplayInviteReceived != nullptr)
		*CrossplayInviteReceived = std::move(Parms.CrossplayInviteReceived);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayInviteReceivedCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  Crossplay_Friend_Invite_Received_Value                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VM_CustomFriendSystem_C::GetCrossplayInviteReceivedCount(int32* Crossplay_Friend_Invite_Received_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayInviteReceivedCount");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayInviteReceivedCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Crossplay_Friend_Invite_Received_Value != nullptr)
		*Crossplay_Friend_Invite_Received_Value = Parms.Crossplay_Friend_Invite_Received_Value;
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayInviteReceivedCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Crossplay_invitation_received_count                    (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayInviteReceivedCountText(class FText* Crossplay_invitation_received_count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayInviteReceivedCountText");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayInviteReceivedCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Crossplay_invitation_received_count != nullptr)
		*Crossplay_invitation_received_count = std::move(Parms.Crossplay_invitation_received_count);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayInviteSent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        CrossplayInviteSent                                    (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayInviteSent(TArray<class UFriendViewModel*>* CrossplayInviteSent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayInviteSent");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayInviteSent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CrossplayInviteSent != nullptr)
		*CrossplayInviteSent = std::move(Parms.CrossplayInviteSent);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayInviteSentCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Crossplay_invitation_sent_count                        (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayInviteSentCountText(class FText* Crossplay_invitation_sent_count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayInviteSentCountText");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayInviteSentCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Crossplay_invitation_sent_count != nullptr)
		*Crossplay_invitation_sent_count = std::move(Parms.Crossplay_invitation_sent_count);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayOfflineCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            FirstPartyOnlineCount                                  (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayOfflineCountText(class FText* FirstPartyOnlineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayOfflineCountText");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayOfflineCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstPartyOnlineCount != nullptr)
		*FirstPartyOnlineCount = std::move(Parms.FirstPartyOnlineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayOfflineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OfflineCrossplayFriends                                (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayOfflineFriends(TArray<class UFriendViewModel*>* OfflineCrossplayFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayOfflineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayOfflineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OfflineCrossplayFriends != nullptr)
		*OfflineCrossplayFriends = std::move(Parms.OfflineCrossplayFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayOnlineCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            FirstPartyOnlineCount                                  (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayOnlineCountText(class FText* FirstPartyOnlineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayOnlineCountText");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayOnlineCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstPartyOnlineCount != nullptr)
		*FirstPartyOnlineCount = std::move(Parms.FirstPartyOnlineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetCrossplayOnlineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OnlineCrossplayFriend                                  (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetCrossplayOnlineFriends(TArray<class UFriendViewModel*>* OnlineCrossplayFriend) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetCrossplayOnlineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetCrossplayOnlineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineCrossplayFriend != nullptr)
		*OnlineCrossplayFriend = std::move(Parms.OnlineCrossplayFriend);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetFirstParty&CrossplayFriendsStatus
// (Exec, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OnlineCrossplayFriend                                  (Parm, OutParm)
// TArray<class UFriendViewModel*>*        OnlineFirstPartyFriends                                (Parm, OutParm)
// TArray<class UFriendViewModel*>*        OfflineCrossplayFriends                                (Parm, OutParm)
// TArray<class UFriendViewModel*>*        OfflineFirstPartyFriends                               (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetFirstParty_CrossplayFriendsStatus(TArray<class UFriendViewModel*>* OnlineCrossplayFriend, TArray<class UFriendViewModel*>* OnlineFirstPartyFriends, TArray<class UFriendViewModel*>* OfflineCrossplayFriends, TArray<class UFriendViewModel*>* OfflineFirstPartyFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetFirstParty&CrossplayFriendsStatus");

	Params::BP_VM_CustomFriendSystem_C_GetFirstParty_CrossplayFriendsStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineCrossplayFriend != nullptr)
		*OnlineCrossplayFriend = std::move(Parms.OnlineCrossplayFriend);

	if (OnlineFirstPartyFriends != nullptr)
		*OnlineFirstPartyFriends = std::move(Parms.OnlineFirstPartyFriends);

	if (OfflineCrossplayFriends != nullptr)
		*OfflineCrossplayFriends = std::move(Parms.OfflineCrossplayFriends);

	if (OfflineFirstPartyFriends != nullptr)
		*OfflineFirstPartyFriends = std::move(Parms.OfflineFirstPartyFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetFirstPartyOfflineCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            FirstPartyOnlineCount                                  (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetFirstPartyOfflineCountText(class FText* FirstPartyOnlineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetFirstPartyOfflineCountText");

	Params::BP_VM_CustomFriendSystem_C_GetFirstPartyOfflineCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstPartyOnlineCount != nullptr)
		*FirstPartyOnlineCount = std::move(Parms.FirstPartyOnlineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetFirstPartyOfflineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OfflineFirstPartyFriends                               (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetFirstPartyOfflineFriends(TArray<class UFriendViewModel*>* OfflineFirstPartyFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetFirstPartyOfflineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetFirstPartyOfflineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OfflineFirstPartyFriends != nullptr)
		*OfflineFirstPartyFriends = std::move(Parms.OfflineFirstPartyFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetFirstPartyOnlineCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            FirstPartyOnlineCount                                  (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetFirstPartyOnlineCountText(class FText* FirstPartyOnlineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetFirstPartyOnlineCountText");

	Params::BP_VM_CustomFriendSystem_C_GetFirstPartyOnlineCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstPartyOnlineCount != nullptr)
		*FirstPartyOnlineCount = std::move(Parms.FirstPartyOnlineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetFirstPartyOnlineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OnlineFirstPartyFriends                                (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetFirstPartyOnlineFriends(TArray<class UFriendViewModel*>* OnlineFirstPartyFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetFirstPartyOnlineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetFirstPartyOnlineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineFirstPartyFriends != nullptr)
		*OnlineFirstPartyFriends = std::move(Parms.OnlineFirstPartyFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetOfflineCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            OfflineCount                                           (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetOfflineCount(class FText* OfflineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetOfflineCount");

	Params::BP_VM_CustomFriendSystem_C_GetOfflineCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OfflineCount != nullptr)
		*OfflineCount = std::move(Parms.OfflineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetOfflineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OfflineFriends                                         (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetOfflineFriends(TArray<class UFriendViewModel*>* OfflineFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetOfflineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetOfflineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OfflineFriends != nullptr)
		*OfflineFriends = std::move(Parms.OfflineFriends);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetOnlineCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            OnlineCount                                            (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetOnlineCount(class FText* OnlineCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetOnlineCount");

	Params::BP_VM_CustomFriendSystem_C_GetOnlineCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineCount != nullptr)
		*OnlineCount = std::move(Parms.OnlineCount);
}


// Function BP_VM_CustomFriendSystem.BP_VM_CustomFriendSystem_C.GetOnlineFriends
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UFriendViewModel*>*        OnlineFriends                                          (Parm, OutParm)

void UBP_VM_CustomFriendSystem_C::GetOnlineFriends(TArray<class UFriendViewModel*>* OnlineFriends) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VM_CustomFriendSystem_C", "GetOnlineFriends");

	Params::BP_VM_CustomFriendSystem_C_GetOnlineFriends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlineFriends != nullptr)
		*OnlineFriends = std::move(Parms.OnlineFriends);
}

}

