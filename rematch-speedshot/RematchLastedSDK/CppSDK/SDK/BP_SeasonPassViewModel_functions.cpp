#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeasonPassViewModel

#include "Basic.hpp"

#include "BP_SeasonPassViewModel_classes.hpp"
#include "BP_SeasonPassViewModel_parameters.hpp"


namespace SDK
{

// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetUnlockedPremiumItemsList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USOSBindingsStoreSeasonTierViewModel*>*PremiumTiersArray                                      (Parm, OutParm)

void UBP_SeasonPassViewModel_C::GetUnlockedPremiumItemsList(TArray<class USOSBindingsStoreSeasonTierViewModel*>* PremiumTiersArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetUnlockedPremiumItemsList");

	Params::BP_SeasonPassViewModel_C_GetUnlockedPremiumItemsList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PremiumTiersArray != nullptr)
		*PremiumTiersArray = std::move(Parms.PremiumTiersArray);
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.CalcChapterCardTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            TimeLeftText                                           (Parm, OutParm)

void UBP_SeasonPassViewModel_C::CalcChapterCardTime(int32 ChapterID, class FText* TimeLeftText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "CalcChapterCardTime");

	Params::BP_SeasonPassViewModel_C_CalcChapterCardTime Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (TimeLeftText != nullptr)
		*TimeLeftText = std::move(Parms.TimeLeftText);
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.CalcOverviewOwnedTiers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  TotalOwnedTiersCount                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::CalcOverviewOwnedTiers(int32* TotalOwnedTiersCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "CalcOverviewOwnedTiers");

	Params::BP_SeasonPassViewModel_C_CalcOverviewOwnedTiers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalOwnedTiersCount != nullptr)
		*TotalOwnedTiersCount = Parms.TotalOwnedTiersCount;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.CalcOverviewTotalTiers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  TotalTiersCount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::CalcOverviewTotalTiers(int32* TotalTiersCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "CalcOverviewTotalTiers");

	Params::BP_SeasonPassViewModel_C_CalcOverviewTotalTiers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalTiersCount != nullptr)
		*TotalTiersCount = Parms.TotalTiersCount;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.CalcPremiumOwnedTiers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  TotalOwnedTiersCount                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::CalcPremiumOwnedTiers(int32* TotalOwnedTiersCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "CalcPremiumOwnedTiers");

	Params::BP_SeasonPassViewModel_C_CalcPremiumOwnedTiers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalOwnedTiersCount != nullptr)
		*TotalOwnedTiersCount = Parms.TotalOwnedTiersCount;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.CalcSeasonTimeLeft
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            TimeLeftText                                           (Parm, OutParm)

void UBP_SeasonPassViewModel_C::CalcSeasonTimeLeft(int32 ChapterID, class FText* TimeLeftText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "CalcSeasonTimeLeft");

	Params::BP_SeasonPassViewModel_C_CalcSeasonTimeLeft Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (TimeLeftText != nullptr)
		*TimeLeftText = std::move(Parms.TimeLeftText);
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterFirstSlotState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESOSTierAvailability*                   Slot_State                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterFirstSlotState(int32 ChapterID, ESOSTierAvailability* Slot_State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterFirstSlotState");

	Params::BP_SeasonPassViewModel_C_GetChapterFirstSlotState Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (Slot_State != nullptr)
		*Slot_State = Parms.Slot_State;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterFromIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USOSBindingsStoreSeasonPassChapterViewModel**ChapterData                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterFromIndex(int32 ID, class USOSBindingsStoreSeasonPassChapterViewModel** ChapterData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterFromIndex");

	Params::BP_SeasonPassViewModel_C_GetChapterFromIndex Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (ChapterData != nullptr)
		*ChapterData = Parms.ChapterData;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterLockedStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsLocked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterLockedStatus(int32 ChapterID, bool* bIsLocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterLockedStatus");

	Params::BP_SeasonPassViewModel_C_GetChapterLockedStatus Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsLocked != nullptr)
		*bIsLocked = Parms.bIsLocked;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterMaxTiers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Tiers_Count                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterMaxTiers(int32 ChapterID, int32* Tiers_Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterMaxTiers");

	Params::BP_SeasonPassViewModel_C_GetChapterMaxTiers Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (Tiers_Count != nullptr)
		*Tiers_Count = Parms.Tiers_Count;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterOwnedTiers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Owned_Tiers_Count                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterOwnedTiers(int32 ChapterID, int32* Owned_Tiers_Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterOwnedTiers");

	Params::BP_SeasonPassViewModel_C_GetChapterOwnedTiers Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (Owned_Tiers_Count != nullptr)
		*Owned_Tiers_Count = Parms.Owned_Tiers_Count;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterProgressionRatio
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ChapterID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  ProgressionRatio                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterProgressionRatio(int32 ChapterID, float* ProgressionRatio) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterProgressionRatio");

	Params::BP_SeasonPassViewModel_C_GetChapterProgressionRatio Parms{};

	Parms.ChapterID = ChapterID;

	UObject::ProcessEvent(Func, &Parms);

	if (ProgressionRatio != nullptr)
		*ProgressionRatio = Parms.ProgressionRatio;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChaptersCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  ChaptersCount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChaptersCount(int32* ChaptersCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChaptersCount");

	Params::BP_SeasonPassViewModel_C_GetChaptersCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChaptersCount != nullptr)
		*ChaptersCount = Parms.ChaptersCount;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetChapterUnlockedCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  UnlockedChaptersCount                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetChapterUnlockedCount(int32* UnlockedChaptersCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetChapterUnlockedCount");

	Params::BP_SeasonPassViewModel_C_GetChapterUnlockedCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UnlockedChaptersCount != nullptr)
		*UnlockedChaptersCount = Parms.UnlockedChaptersCount;
}


// Function BP_SeasonPassViewModel.BP_SeasonPassViewModel_C.GetOverviewProgressionRatio
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float*                                  ProgressionRatio                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SeasonPassViewModel_C::GetOverviewProgressionRatio(float* ProgressionRatio) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonPassViewModel_C", "GetOverviewProgressionRatio");

	Params::BP_SeasonPassViewModel_C_GetOverviewProgressionRatio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProgressionRatio != nullptr)
		*ProgressionRatio = Parms.ProgressionRatio;
}

}

