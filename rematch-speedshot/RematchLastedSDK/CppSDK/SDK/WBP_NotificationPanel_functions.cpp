#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NotificationPanel

#include "Basic.hpp"

#include "WBP_NotificationPanel_classes.hpp"
#include "WBP_NotificationPanel_parameters.hpp"


namespace SDK
{

// Function WBP_NotificationPanel.WBP_NotificationPanel_C.BP_OnActivated
// (Event, Protected, BlueprintEvent)

void UWBP_NotificationPanel_C::BP_OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationPanel_C", "BP_OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationPanel.WBP_NotificationPanel_C.ExecuteUbergraph_WBP_NotificationPanel
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationPanel_C::ExecuteUbergraph_WBP_NotificationPanel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationPanel_C", "ExecuteUbergraph_WBP_NotificationPanel");

	Params::WBP_NotificationPanel_C_ExecuteUbergraph_WBP_NotificationPanel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationPanel.WBP_NotificationPanel_C.NotificationAdded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNotificationViewModel*           viewModel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationPanel_C::NotificationAdded(class UNotificationViewModel* viewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationPanel_C", "NotificationAdded");

	Params::WBP_NotificationPanel_C_NotificationAdded Parms{};

	Parms.viewModel = viewModel;

	UObject::ProcessEvent(Func, &Parms);
}

}

