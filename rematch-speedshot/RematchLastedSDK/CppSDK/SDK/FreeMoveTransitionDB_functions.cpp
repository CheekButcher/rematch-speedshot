#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreeMoveTransitionDB

#include "Basic.hpp"

#include "FreeMoveTransitionDB_classes.hpp"
#include "FreeMoveTransitionDB_parameters.hpp"


namespace SDK
{

// Function FreeMoveTransitionDB.FreeMoveTransitionDB_C.BPE_IsTransitionAllowed
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FSCTransition&             _currentTransition                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// float                                   _fTransitionRatio                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    _bIsInDeccel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UFreeMoveTransitionDB_C::BPE_IsTransitionAllowed(const struct FSCTransition& _testingTransition, const struct FSCTransition& _currentTransition, float _fTransitionRatio, bool _bIsInDeccel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FreeMoveTransitionDB_C", "BPE_IsTransitionAllowed");

	Params::FreeMoveTransitionDB_C_BPE_IsTransitionAllowed Parms{};

	Parms._testingTransition = std::move(_testingTransition);
	Parms._currentTransition = std::move(_currentTransition);
	Parms._fTransitionRatio = _fTransitionRatio;
	Parms._bIsInDeccel = _bIsInDeccel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FreeMoveTransitionDB.FreeMoveTransitionDB_C.BPF_GetModifyTransitionAllowedIntervals
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// TArray<struct FFloatInterval>           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FFloatInterval> UFreeMoveTransitionDB_C::BPF_GetModifyTransitionAllowedIntervals(const struct FSCTransition& _testingTransition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FreeMoveTransitionDB_C", "BPF_GetModifyTransitionAllowedIntervals");

	Params::FreeMoveTransitionDB_C_BPF_GetModifyTransitionAllowedIntervals Parms{};

	Parms._testingTransition = std::move(_testingTransition);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FreeMoveTransitionDB.FreeMoveTransitionDB_C.BPF_GetVelocityAngularSpeed
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FSCTransition&             _testingTransition                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// float*                                  _fOutSameWay                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  _fOutOppositeWay                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFreeMoveTransitionDB_C::BPF_GetVelocityAngularSpeed(const struct FSCTransition& _testingTransition, float* _fOutSameWay, float* _fOutOppositeWay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FreeMoveTransitionDB_C", "BPF_GetVelocityAngularSpeed");

	Params::FreeMoveTransitionDB_C_BPF_GetVelocityAngularSpeed Parms{};

	Parms._testingTransition = std::move(_testingTransition);

	UObject::ProcessEvent(Func, &Parms);

	if (_fOutSameWay != nullptr)
		*_fOutSameWay = Parms._fOutSameWay;

	if (_fOutOppositeWay != nullptr)
		*_fOutOppositeWay = Parms._fOutOppositeWay;
}

}

